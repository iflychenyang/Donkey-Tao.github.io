<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陶飞的技术博客</title>
  <subtitle>自强不息,厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Donkey-Tao.github.io/"/>
  <updated>2017-07-24T08:01:20.000Z</updated>
  <id>http://Donkey-Tao.github.io/</id>
  
  <author>
    <name>Tao Fei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DBNetworking</title>
    <link href="http://Donkey-Tao.github.io/2017/06/02/2017-06-02-DBNetworking/"/>
    <id>http://Donkey-Tao.github.io/2017/06/02/2017-06-02-DBNetworking/</id>
    <published>2017-06-02T06:24:39.000Z</published>
    <updated>2017-07-24T08:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DBNetworking"><a href="#DBNetworking" class="headerlink" title="DBNetworking"></a>DBNetworking</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    DBNetworking是基于AFNetworking开发的网络请求框架。DBNetworking集成依赖AFNetworking(3.1.0)、DBProgressHUD，提供HTTPS请求的相关方法，并可以自动监控网络状态的改变并弹出相应的提示。在网络请求时有提供默认的加载中提示。</p>
<p>​    DBNetworking中关于GET/POST网络请求的封装主要代码放在DBHTTPSSessionManager中。利用DBHTTPSSessionManager可以实现各种网络请求。但是，目前项目中的请求基本都是POST请求，所以在DBHTTPSSessionManager的基础上提供了<code>DBPoster</code>专门用来发送POST请求，DBPoster中目前提供了三种样式的POST请求。</p>
<p>​    关于网络状态改变的提示，目前默认在网络状态发生改变时进行提示。</p>
<h2 id="将DBNetworking加入到项目中"><a href="#将DBNetworking加入到项目中" class="headerlink" title="将DBNetworking加入到项目中"></a>将DBNetworking加入到项目中</h2><p>建议使用CocoaPods对项目中的第三方框架进行管理。</p>
<ul>
<li>在Podfile文件中添加<code>pod &#39;DBNetworking&#39;</code>；</li>
<li>使用<code>pod install</code>命令将DBNetworking加入到项目中；</li>
<li>在使用的时候将其引入或者在PCH文件中将其引入；</li>
</ul>
<h2 id="DBNetworking的使用"><a href="#DBNetworking的使用" class="headerlink" title="DBNetworking的使用"></a>DBNetworking的使用</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>DBNetworking中的网络请求是HTTPS，需要配置相应的证书。在使用前需要将证书加入项目中。（如果改项目的证书暂时没有，也可以使用。）</p>
<p>在使用DBNetworking发送网络请求之前要对网络请求的管理者进行初始化操作，建议在AppDelegate中进行初始化。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DBNetWorkingManager *manager=[DBNetWorkingManager sharedManager];</div><div class="line">manager.db_BaseURLString=@&quot;http://taofei.me&quot;;</div><div class="line">manager.db_certificateString=@&quot;donkey.dabay.cn&quot;;</div></pre></td></tr></table></figure>
<p>DBNetWorkingManager使用sharedManager方法创建后作为单例存在，然后设置项目的基地址和HTTPS请求相关的证书名称，并且将证书加入到项目中。</p>
<h3 id="DBHTTPSSessionManager"><a href="#DBHTTPSSessionManager" class="headerlink" title="DBHTTPSSessionManager"></a>DBHTTPSSessionManager</h3><p>关于GET/POST网络请求的封装主要代码放在DBHTTPSSessionManager中;</p>
<h4 id="发送POST请求，默认带有加载中提示的HUD"><a href="#发送POST请求，默认带有加载中提示的HUD" class="headerlink" title="发送POST请求，默认带有加载中提示的HUD"></a>发送POST请求，默认带有加载中提示的HUD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> DBNetworking HTTPS请求 默认带有HUD</div><div class="line"></div><div class="line"> @param URLString 网络请求的URL地址字符串</div><div class="line"> @param parameters 网络请求的参数</div><div class="line"> @param successBlock 网络请求成功的回调</div><div class="line"> @param failedBlock 网络请求失败的回调</div><div class="line"> */</div><div class="line">+(void)db_postWithURLString:(NSString *)URLString Parameters:(NSDictionary *)parameters succeed:(SuccessBlock)successBlock failure:(FailedBlock)failedBlock;</div></pre></td></tr></table></figure>
<h4 id="发送POST请求，加载中提示的HUD可以进行配置是否显示"><a href="#发送POST请求，加载中提示的HUD可以进行配置是否显示" class="headerlink" title="发送POST请求，加载中提示的HUD可以进行配置是否显示"></a>发送POST请求，加载中提示的HUD可以进行配置是否显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> DBNetworking HTTPS请求 默认为POST请求</div><div class="line"> </div><div class="line"> @param URLString 网络请求的URL地址字符串</div><div class="line"> @param parameters 网络请求的参数</div><div class="line"> @param isWithHUD 是否带有HUD提示</div><div class="line"> @param view HUD显示在View上</div><div class="line"> @param successBlock 网络请求成功的回调</div><div class="line"> @param failedBlock 网络请求失败的回调</div><div class="line"> */</div><div class="line">+(void)db_postRequestWithURLString:(NSString*)URLString Parameters:(NSDictionary *)parameters isWithHUD:(BOOL)isWithHUD inView:(UIView *)view succeed:(SuccessBlock)successBlock failure:(FailedBlock)failedBlock;</div></pre></td></tr></table></figure>
<h4 id="发送POST或者GET请求，加载中提示的HUD可以进行配置是否显示"><a href="#发送POST或者GET请求，加载中提示的HUD可以进行配置是否显示" class="headerlink" title="发送POST或者GET请求，加载中提示的HUD可以进行配置是否显示"></a>发送POST或者GET请求，加载中提示的HUD可以进行配置是否显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> DBNetworking HTTPS请求 可以选择请求方式：GET,POST</div><div class="line"></div><div class="line"> @param URLString 网络请求的URL地址字符串</div><div class="line"> @param method 网络请求的方式：GET/POST</div><div class="line"> @param parameters 网络请求的参数</div><div class="line"> @param isWithHUD 是否带有HUD提示</div><div class="line"> @param view HUD显示在View上</div><div class="line"> @param successBlock 网络请求成功的回调</div><div class="line"> @param failedBlock 网络请求失败的回调</div><div class="line"> */</div><div class="line">+(void)db_requestWithURLString:(NSString *)URLString httpsMethod:(DB_HTTPSMETHOD)method  parameters:(NSDictionary *)parameters isWithHUD:(BOOL)isWithHUD inView:(UIView *)view  succeed:(SuccessBlock)successBlock failure:(FailedBlock)failedBlock;</div></pre></td></tr></table></figure>
<h3 id="DBPoster"><a href="#DBPoster" class="headerlink" title="DBPoster"></a>DBPoster</h3><p>DBPoster是专门发送POST请求的类，在项目中如果POST请求使用的频率比较高，使用DBPoster发送POST请求可以简化代码。DBPoster中提供了一些实用的方法。</p>
<h4 id="网络请求默认带有HUD提示加载中"><a href="#网络请求默认带有HUD提示加载中" class="headerlink" title="网络请求默认带有HUD提示加载中"></a>网络请求默认带有HUD提示加载中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> DBNetworking--发送POST请求--带有默认的HUD提示</div><div class="line"> </div><div class="line"> @param URLString 网络请求的URL地址字符串</div><div class="line"> @param parameters 网络请求的参数</div><div class="line"> @param successBlock 网络请求成功的回调</div><div class="line"> @param failedBlock 网络请求失败的回调</div><div class="line"> */</div><div class="line">+(void)db_URLString:(NSString *)URLString parameters:(NSDictionary *)parameters succeed:(SuccessBlock)successBlock failure:(FailedBlock)failedBlock;</div></pre></td></tr></table></figure>
<h4 id="网络请求的同时不显示HUD提示加载中"><a href="#网络请求的同时不显示HUD提示加载中" class="headerlink" title="网络请求的同时不显示HUD提示加载中"></a>网络请求的同时不显示HUD提示加载中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> DBNetworking--发送POST请求--没有默认的HUD提示</div><div class="line"></div><div class="line"> @param URLString 网络请求的URL地址字符串</div><div class="line"> @param parameters 网络请求的参数</div><div class="line"> @param successBlock 网络请求成功的回调</div><div class="line"> @param failedBlock 网络请求失败的回调</div><div class="line"> */</div><div class="line">+(void)db_withoutHUDWithURLString:(NSString *)URLString parameters:(NSDictionary *)parameters succeed:(SuccessBlock)successBlock failure:(FailedBlock)failedBlock;</div></pre></td></tr></table></figure>
<h4 id="网络请求的同时加载HUD到特定的View上"><a href="#网络请求的同时加载HUD到特定的View上" class="headerlink" title="网络请求的同时加载HUD到特定的View上"></a>网络请求的同时加载HUD到特定的View上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> DBNetworking--发送POST请求--指定HUD显示在View上</div><div class="line"></div><div class="line"> @param view HUD显示在View上</div><div class="line"> @param URLString 网络请求的URL地址字符串</div><div class="line"> @param parameters 网络请求的参数</div><div class="line"> @param successBlock 网络请求成功的回调</div><div class="line"> @param failedBlock 网络请求失败的回调</div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="DBPoster的使用"><a href="#DBPoster的使用" class="headerlink" title="DBPoster的使用"></a>DBPoster的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[DBPoster db_withHUDInView:self.view URLString:@&quot;index/banner.json?&quot; parameters:nil succeed:^(NSDictionary *responseDict) &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;请求成功&quot;);</div><div class="line">&#125; failure:^(NSError *error) &#123;</div><div class="line">    NSLog(@&quot;请求失败&quot;);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DBNetworking&quot;&gt;&lt;a href=&quot;#DBNetworking&quot; class=&quot;headerlink&quot; title=&quot;DBNetworking&quot;&gt;&lt;/a&gt;DBNetworking&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;
    
    </summary>
    
      <category term="iOS , AFNetworking" scheme="http://Donkey-Tao.github.io/categories/iOS-AFNetworking/"/>
    
    
  </entry>
  
  <entry>
    <title>DBProgressHUD</title>
    <link href="http://Donkey-Tao.github.io/2017/05/12/2017-05-12-DBProgressHUD%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://Donkey-Tao.github.io/2017/05/12/2017-05-12-DBProgressHUD使用说明/</id>
    <published>2017-05-12T05:41:52.000Z</published>
    <updated>2017-07-24T08:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DBProgressHUD"><a href="#DBProgressHUD" class="headerlink" title="DBProgressHUD"></a>DBProgressHUD</h1><p>DBProgressHUD是在开源框架MBProgressHUD（version 1.0.0）的基础上进行了一些功能的增加。</p>
<p>本项目是为DBNetworking进行开发的，目前DBNetworking已经使用了本项目中相关功能。</p>
<p>如果现在的项目中有MBProgressHUD的1.0.0版本且利用CocoaPods进行管理的，那么只要pod ‘DBProgressHUD’即可将本项目加入现有的项目中， 可以兼容完全兼容MBProgressHUD的1.0.0版本。MBProgressHUD的1.0.0以下的版本暂时未做适配。</p>
<h2 id="使用CocoaPods添加DBProgressHUD到项目中"><a href="#使用CocoaPods添加DBProgressHUD到项目中" class="headerlink" title="使用CocoaPods添加DBProgressHUD到项目中"></a>使用CocoaPods添加DBProgressHUD到项目中</h2><p>本项目DBProgressHUD已经放在CocoaPods上进行管理，目前版本1.1.5。</p>
<p>推荐使用CocoaPods引入DBProgressHUD并对项目中的第三方框架进行管理。</p>
<ol>
<li>在Podfile文件中添加 <code>pod &#39;DBProgressHUD&#39;</code></li>
<li>进入Podfile同级目录，使用命令 <code>pod install</code>进行本项目的安装.</li>
<li>建议在项目的pch文件中导入本项目或者在要使用的时候引入 <code>#import &quot;DBProgressHUD.h&quot;</code>.</li>
</ol>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>之前的MBProgressHUD在使用时经常要在使用的控制器中拥有MBProgressHUD类型的属性，添加HUD时进行还有指定相关的View，导致整个项目中有很多类似的代码，使用起来比较麻烦。另外，在非视图控制器中拿不到相应的view，想使用MBProgressHUD进行相应的提示就不是很方便了。</p>
<p><code>本项目中新增的方法都是DBProgressHUD的类方法且方法名都是以db_开头。</code></p>
<p>在进行耗时操作需要给用户一些提示时，推荐使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DBProgressHUD db_showLoading:@&quot;加载中...&quot;];</div></pre></td></tr></table></figure>
<p>在耗时操作结束需要结束提示时，推荐使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DBProgressHUD db_hideHUD];</div></pre></td></tr></table></figure>
<p>在操作成功需要提示时，推荐使用：(默认3秒后自动消失)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DBProgressHUD db_showMessage:@&quot;认证成功！&quot;];</div></pre></td></tr></table></figure>
<p>在操作失败需要提示时，推荐使用：(默认3秒后自动消失)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DBProgressHUD db_showError:@&quot;服务暂不可用，请稍后重试&quot;];</div></pre></td></tr></table></figure>
<p>如果要提示的内容有多行，DBProgressHUD提供了相应的方法。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DBProgressHUD db_showMultiLineMessage:@&quot;服务暂不可用，请稍后重试 服务暂不可用，请稍后重试&quot;];</div></pre></td></tr></table></figure>
<p>如果想要特定的位置进行换行，在已在想要换行的位置加\n即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DBProgressHUD db_showMultiLineMessage:@&quot;服务暂不可用，请稍后\n重试 服务暂不可用，请稍后重试&quot;];</div></pre></td></tr></table></figure>
<p>其他的成功、失败的提示类似。</p>
<p>想使用更多的方法，建议简单浏览下DBProgressHUD.h。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DBProgressHUD&quot;&gt;&lt;a href=&quot;#DBProgressHUD&quot; class=&quot;headerlink&quot; title=&quot;DBProgressHUD&quot;&gt;&lt;/a&gt;DBProgressHUD&lt;/h1&gt;&lt;p&gt;DBProgressHUD是在开源框架MBProgr
    
    </summary>
    
      <category term="iOS , AFNetworking" scheme="http://Donkey-Tao.github.io/categories/iOS-AFNetworking/"/>
    
    
  </entry>
  
  <entry>
    <title>安装CocoaPods时遇见的问题</title>
    <link href="http://Donkey-Tao.github.io/2017/04/26/2017-4-26-%E5%AE%89%E8%A3%85CocoaPods%E6%97%B6%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://Donkey-Tao.github.io/2017/04/26/2017-4-26-安装CocoaPods时遇见的问题/</id>
    <published>2017-04-26T08:24:39.000Z</published>
    <updated>2017-04-26T08:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>遇到如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:  While executing gem ... (Errno::EPERM)</div><div class="line">Operation not permitted - /usr/bin/xcodeproj</div></pre></td></tr></table></figure>
<p>之前安装时使用的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods</div></pre></td></tr></table></figure>
<p>解决办法，改使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods</div></pre></td></tr></table></figure>
<p>若想安装指定版本号的cocoapods，请使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods -v 0.39.0</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到如下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/
    
    </summary>
    
      <category term="CocoaPods,iOS" scheme="http://Donkey-Tao.github.io/categories/CocoaPods-iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS8环境下UITextView出现的内存泄露</title>
    <link href="http://Donkey-Tao.github.io/2017/03/22/2017-03-22-iOS8%E4%B8%ADUITextView%E7%9A%84%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://Donkey-Tao.github.io/2017/03/22/2017-03-22-iOS8中UITextView的内存问题/</id>
    <published>2017-03-22T14:48:39.000Z</published>
    <updated>2017-03-23T15:09:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>[UITextView textInputView:] message sent to deallocated instance </p>
<p>今天测试说项目在iOS8环境下其中的用户反馈点击进入并返回后再次进入后点击UITextView时软件会直接闪退，并且能够百分之百重现。这个问题在iOS7、iOS9、iOS10上均没有出现。</p>
<p>连接在电脑上调试时没有打印出相关的错误信息，然后打开Enable Zombie Objects后控制台打印出了错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[UITextView textInputView:] message sent to deallocated instance</div></pre></td></tr></table></figure>
<p>说明是产生了内存泄漏了。但是，这个问题只是出现在iOS8系统的手机上，并且能够百分之百重现，这就有点奇怪了。在网上搜到了相似的问题：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/35715601/uitextfield-textinputview-message-sent-to-deallocated-instance" target="_blank" rel="external">http://stackoverflow.com/questions/35715601/uitextfield-textinputview-message-sent-to-deallocated-instance</a></li>
<li><a href="http://stackoverflow.com/questions/40459924/uitextfield-textinputview-message-sent-to-deallocated-instance-ios-8" target="_blank" rel="external">http://stackoverflow.com/questions/40459924/uitextfield-textinputview-message-sent-to-deallocated-instance-ios-8</a></li>
</ul>
<p>发现可能是引入第三方的分类引起的。一开始以为Category中可能是某个监听没有移除掉导致的。但实际检查分类后发现通知都已经移除了，而且其他版本没有问题，最后将引入的 Category 中 dealloc 方法注释掉，就不会闪退了。</p>
<p>此处是内存问题，分析问题时不能只看系统 的UITextView这个类，还要分析他的分类。此处，从监听等多方面考虑。但是，iOS8提前释放了UITextView类型的对象，iOS8 和 iOS 9的内存处理可能确实有点不同，在此没有具体弄清楚是什么机理。如有知道具体原因的望不吝告知~谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[UITextView textInputView:] message sent to deallocated instance &lt;/p&gt;
&lt;p&gt;今天测试说项目在iOS8环境下其中的用户反馈点击进入并返回后再次进入后点击UITextView时软件会直接闪退，并且能够百分之百
    
    </summary>
    
      <category term="Bug,iOS" scheme="http://Donkey-Tao.github.io/categories/Bug-iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>将自己的开源框架发布到CocoaPods</title>
    <link href="http://Donkey-Tao.github.io/2017/03/16/2017-03-16-%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8F%91%E5%B8%83%E5%88%B0CocoaPods/"/>
    <id>http://Donkey-Tao.github.io/2017/03/16/2017-03-16-将自己的开源框架发布到CocoaPods/</id>
    <published>2017-03-16T04:32:48.000Z</published>
    <updated>2017-03-19T01:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    我们在iOS开发过程中经常会使用一些第三方框架。例如，比较著名的AFNetworking等。在使用这些框架时，我们只要在项目的根目录下新建podfile文件，并且在podfile文件中添加相关的框架名称（以及版本号），然后使用pod install命令即可很方便的将其加到我们自己的项目中。</p>
<p>​    如果我们也想将自己写的框架或者组件开源出去并且让别人也可以通过pod install命令安装自己的框架，那么怎样才能办到呢？</p>
<p>​    下面我们来一步一步实现将自己的框架或者组件发布到Cocoapods上。</p>
<h2 id="简单的准备"><a href="#简单的准备" class="headerlink" title="简单的准备"></a>简单的准备</h2><h3 id="GitHub上面的项目打tag"><a href="#GitHub上面的项目打tag" class="headerlink" title="GitHub上面的项目打tag"></a>GitHub上面的项目打tag</h3><p>​    我们一般会将自己的开源项目放在GitHub上面，但是很多时候没有对项目的版本进行一些标记。我们在pod别人的项目时，经常会在后面加上版本号。我们也需要对自己的开源框架进行版本标记，以便来区分各个版本。要想让我们自己的开源框架各个版本有自己的标记，为此我们要在一个版本完成后，对这个版本进行标记。具体操作如下：</p>
<ul>
<li>首先我们需要在本地打tag:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -a <span class="number">0.0</span><span class="number">.1</span> -m <span class="string">"0.0.1"</span></div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<ul>
<li>然后提交tag到GitHub上</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --tag</div></pre></td></tr></table></figure>
<h2 id="创建并配置Podspec文件"><a href="#创建并配置Podspec文件" class="headerlink" title="创建并配置Podspec文件"></a>创建并配置Podspec文件</h2><h3 id="Podspec文件的简单介绍"><a href="#Podspec文件的简单介绍" class="headerlink" title="Podspec文件的简单介绍"></a>Podspec文件的简单介绍</h3><h3 id="创建Podspec文件"><a href="#创建Podspec文件" class="headerlink" title="创建Podspec文件"></a>创建Podspec文件</h3><p>​    下面我来通过我自己的一个开源项目:TFNetworking来讲解这个过程。</p>
<p>​    我们之前发布在GitHub上的项目在打上tag后，现在我们需要进入项目<code>根目录</code>,在项目的<code>根目录</code>中初始化一个Podspec文件；</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create TFNetworking</div></pre></td></tr></table></figure>
<p>​    执行完该命令后会在本目录下会生成一个名为TFNetworking.podspec的文件。用编辑器打开这个文件，里面会有丰富的说明配置信息。</p>
<h3 id="配置Podspec文件"><a href="#配置Podspec文件" class="headerlink" title="配置Podspec文件"></a>配置Podspec文件</h3><p>​    Podspec文件中可以配置的东西有很多，在此我只简单介绍下常用的一些配置。声明我们开源的框架的<code>代码目录</code>和<code>资源目录</code>以及第三方库所<code>依赖</code>的<code>iOS核心框架</code>和<code>第三方库</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.<span class="keyword">new</span> <span class="keyword">do</span> |s|</div><div class="line">  </div><div class="line">  s.name         = <span class="string">"TFNetworking"</span></div><div class="line">  s.version      = <span class="string">"0.0.1"</span></div><div class="line">  s.summary      = <span class="string">"A framework for iOS networking"</span></div><div class="line">  s.description  = &lt;&lt;-DESC</div><div class="line">                  Dabay tech : A framework <span class="keyword">for</span> iOS networking</div><div class="line">                   DESC</div><div class="line">  s.homepage     = <span class="string">"https://github.com/Donkey-Tao/TFNetworking"</span></div><div class="line">  s.license      = <span class="string">"MIT"</span></div><div class="line">  s.author       = &#123; <span class="string">"Tao Fei"</span> =&gt; <span class="string">"taofei0610@gmail.com"</span> &#125;</div><div class="line">  s.social_media_url   = <span class="string">"http://taofei.me"</span></div><div class="line">  s.platform     = :ios, <span class="string">"8.0"</span></div><div class="line">  s.source       = &#123; :git =&gt; <span class="string">"https://github.com/Donkey-Tao/TFNetworking.git"</span>, :tag =&gt; <span class="string">"#&#123;s.version&#125;"</span> &#125;</div><div class="line">  s.source_files  = <span class="string">"TFNetworking"</span>, <span class="string">"TFNetworking/**/*.&#123;h,m&#125;"</span></div><div class="line">  s.framework  = <span class="string">"CFNetwork"</span></div><div class="line">  s.requires_arc = <span class="literal">true</span></div><div class="line">  s.dependency <span class="string">"AFNnetworking"</span>, <span class="string">"~&gt; 3.1.0"</span></div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>s.name是我们库的名称，s.version是库原代码版本号，s.summary是对我们库的一个简单的介绍，s.homepage声明库的主页，s.license是所采用的授权版本，s.author是库的作者。s.platform是我们库所支持的软件平台，这在我们最后提交进行编译时有用。s.source声明原代码的地址。我这里是托管在GitHub上,所以这里将地址copy过来就行了。</p>
<p>对于很多第三方库而言，在发布的时候都会打上一个tag，如版本0.0.1就会打上一个名为0.0.1的tag,你也可以选择一个最新的commit来作为该库0.0.1版的代码, 那么最终source就是这样了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;:git =&gt; "https://github.com/Donkey-Tao/TFNetworking.git", :commit =&gt; '65584b0e0b08e01f83e66d487180c164b5182409'&#125;</div></pre></td></tr></table></figure>
<p>我这里还是使用的tag，所以我这里就是这样的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; :git =&gt; <span class="string">"https://github.com/Donkey-Tao/TFNetworking.git"</span>, :tag =&gt; <span class="string">"0.0.1"</span> &#125;</div></pre></td></tr></table></figure>
<p>以后我们的库有新版本时，我们可以修改相应的version和source。</p>
<p>s.source_files声明了我们库的源代码的位置，所以这个地方不能填错了。</p>
<p>到此我们看下我的目录结构：</p>
<p>所以工程根目录下的TFNetworking文件夹才是库的原代码目录。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source_files  = <span class="string">"TFNetworking"</span>, <span class="string">"TFNetworking/**/*.&#123;h,m&#125;"</span></div></pre></td></tr></table></figure>
<p>目录的层级关系一定要跟代码库的保持一致。这里前一部分可以不用的，因为我这里后一部分的TFNetworking/<em>*与前面是一致的，这个指定的目录下的文件都会进行编译。如果该目录下还有一些资源文件（如图片等），这些文件并不需要进行编译。可以使用s.resourcs声明。</em>.{h,m}是一个类似正则表达式的字符串，表示匹配所有以.h和.m为扩展名的文件。</p>
<p>s.framework声明了所依赖的核心库，我这里只用到了UIKit,所以是这样的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.framework  = <span class="string">"UIKit"</span></div></pre></td></tr></table></figure>
<p>如果你的项目中依赖多个库，可以使用</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.frameworks = <span class="string">"SomeFramework"</span>, <span class="string">"AnotherFramework"</span></div></pre></td></tr></table></figure>
<p>当然，我们开发的库中也可能还依赖第三方库，例如JSONKit，那么，就可以做如下声明:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.dependency <span class="string">"AFNetworking"</span>, <span class="string">"~&gt; 3.1.0"</span></div></pre></td></tr></table></figure>
<p>如果有多个需要填写多个s.dependency。</p>
<p>遇到的错误：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[!] The spec did not pass validation, due to <span class="number">2</span> errors and <span class="number">1</span> warning.</div><div class="line">[!] The validator <span class="keyword">for</span> Swift projects uses Swift <span class="number">3.0</span> by <span class="keyword">default</span>, <span class="keyword">if</span> you are <span class="keyword">using</span> a different version of swift you can use a `.swift-version` file to <span class="built_in">set</span> the version <span class="keyword">for</span> your Pod. For example to use Swift <span class="number">2.3</span>, run: </div><div class="line">    `echo <span class="string">"2.3"</span> &gt; .swift-version`.</div></pre></td></tr></table></figure>
<p>执行上面提示的命令即可；</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo <span class="string">"2.3"</span> &gt; .swift-version</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | [iOS] xcodebuild: Returned an unsuccessful <span class="built_in">exit</span> code. You can use `--verbose` <span class="keyword">for</span> more information.</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | xcodebuild:  TFNetworking/TFNetworking/JHNetWorkTools.h:10:9: error: 'AFNetworking.h' file not found with &lt;angled&gt; include; use "quotes" instead</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- WARN  | xcodebuild:  TFNetworking/TFNetworking/TFNetWorkingManeger.m:238:22: warning: unused variable 'status' [-Wunused-variable]</div></pre></td></tr></table></figure>
<p>在进行</p>
<p>编辑完podspec文件后，需要验证一下这个文件是否可用，如果有任何WARNING或者ERROR都是不可以的，它就不能被添加到Spec Repo中，不过xcode的WARNING是可以存在的，验证需要执行命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec lint TFNetworking.podspec</div></pre></td></tr></table></figure>
<p>当看到TFNetworking passed validation.时，说明验证通过了。</p>
<p>编辑好podspec文件后就可以将该podspec文件保存到本机的~/.cocoapods/repos/master/Specs目录中仅供自己使用，也可以将其提交到CocoaPods/Specs代码库中。下面我们先将其保存到本机中：</p>
<p>下面可以看一下是否可以通过搜索找到该库:</p>
<p>同样在需要依赖于HUPhotoBrowser这个库的项目，可以将下列添加到项目的Podfile文件中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod 'TFNetworking', '~0.0.1'</div></pre></td></tr></table></figure>
<p>保存文件，并用pod install安装HUPhotoBrowser库。</p>
<p>通过以上步骤创建Pod库还只能供自己使用，下面会继续讲解如何将其提交到CocoaPods/Specs代码库中，让其他人也可以通过pod install安装我们的开源库。</p>
<p>CocoaPods Trunk发布自己的Pods</p>
<p>在cocoapods使用了trunk之后，CocoaPods 需要0.33以上版本，用 pod –version查看版本，如果版本低，需要更新。</p>
<p>注册Trunk</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk register orta@cocoapods.org 'Orta Therox' --description='macbook air'</div></pre></td></tr></table></figure>
<p>大家在注册时需要替换成自己的邮箱和用户名，一切顺利的话就会受到一份邮件，点击邮件中的链接后验证一下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk me</div></pre></td></tr></table></figure>
<p>当然，如果你的pod是由多人维护的，你也可以添加其他维护者:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk add-owner ARAnalytics kyle@cocoapods.org</div></pre></td></tr></table></figure>
<p>上面的工作完成之后，我们就可以开始 trunk push了。</p>
<p>Trunk push</p>
<p>pod trunk push 命令会首先验证你本地的podspec文件(是否有错误)，之后会上传spec文件到trunk，最后会将你上传的podspec文件转换为需要的json文件。在工程根目录(包含有.podspec)下执行命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push</div></pre></td></tr></table></figure>
<p>如果在trunk push过程中报错了，仔细查看一下错误信息。我当初就是使用了podspec文件中描述的版本所没有的API，之后修改podspec文件中s.platform = :ios, “7.0”就可以了。</p>
<p>如果你能看的上面的结果说明上传成功了。我们也可以在本地的~/.cocoapods/repos/master/Specs目录下看到转换之后的json文件,</p>
<p>至此我们整个制作自己的开源库的过程就完成了，以后有新版本只需要修改工程根目录下的podspec文件就行了，然后重新执行pod trunk push命令。</p>
<p>最后</p>
<p>最后对这个过程做个总结：</p>
<p>1.开源库发布之后，需要打上tag</p>
<p>2.进入到项目根目录下，创建podspec文件</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create PodName</div></pre></td></tr></table></figure>
<p>3.编辑podspec文件中的相关信息，有两个比较重要的地方s.source和s.source_files,可以验证是否有误：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec lint TFNetworking.podspec</div></pre></td></tr></table></figure>
<p>4.注册pod trunk</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk register taofei0610@gmail.com 'Tao Fei' --description='MacBook Pro Donkey-Tao'</div></pre></td></tr></table></figure>
<p>5.发布到pod trunk</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push [NAME.podspec]</div></pre></td></tr></table></figure>
<p>该命令在包含有.podspec文件的目录下执行</p>
<p>6.更新pod库</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup</div></pre></td></tr></table></figure>
<p>如果pod trunk push成功后无法pod search到自己的库，可执行该命令。</p>
<p>最后的最后</p>
<p>哈哈。好吧，我承认其实我是来打广告的。例子中的<a href="https://github.com/Donkey-Tao/TFNetworking" target="_blank" rel="external">TFNetworking</a>是我开源的一个图片浏览器的库，使用起来非常简单，一行代码就以实现图片浏览功能，支持本地和网络图片。希望大家可以支持一下，欢迎大家star。如果有什么问题的话可以直接issue我。最后，希望能跟大家共同进步。项目地址：<a href="https://github.com/Donkey-Tao/TFNetworking" target="_blank" rel="external">TFNetworking</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.cocoachina.com/ios/20160301/15459.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20160301/15459.html</a></p>
<p><a href="https://github.com/trending" target="_blank" rel="external">https://github.com/trending</a></p>
<p><a href="http://www.cnblogs.com/Keys/p/5245143.html" target="_blank" rel="external">http://www.cnblogs.com/Keys/p/5245143.html</a></p>
<p><a href="http://www.cnblogs.com/marlonxlj/p/6062646.html" target="_blank" rel="external">http://www.cnblogs.com/marlonxlj/p/6062646.html</a></p>
<p><a href="http://blog.csdn.net/th_gsb/article/details/50114331" target="_blank" rel="external">http://blog.csdn.net/th_gsb/article/details/50114331</a></p>
<p><a href="http://blog.csdn.net/tsite/article/details/59547646" target="_blank" rel="external">http://blog.csdn.net/tsite/article/details/59547646</a></p>
<p><a href="http://zeeyang.com/archives/" target="_blank" rel="external">http://zeeyang.com/archives/</a></p>
<p><a href="http://blog.csdn.net/hellozsmj/article/details/50725370" target="_blank" rel="external">http://blog.csdn.net/hellozsmj/article/details/50725370</a></p>
<p><a href="http://www.jianshu.com/p/8a7b9232cbab" target="_blank" rel="external">http://www.jianshu.com/p/8a7b9232cbab</a></p>
<p><a href="http://www.cnblogs.com/zhanglinfeng/p/6283178.html" target="_blank" rel="external">http://www.cnblogs.com/zhanglinfeng/p/6283178.html</a></p>
<p>pod新版本时出现的问题</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[!] There was an error pushing a <span class="keyword">new</span> version to trunk: getaddrinfo: nodename nor servname provided, or not known</div></pre></td></tr></table></figure>
<p>解决办法：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    我们在iOS开发过程中经常会使用一些第三方框架。例如，比较著名的AFNetworking等。在使用这些框架时，我们只要在项目的根目录下新建podfile文件，并且在podfile文件中添加相关的框架名称（以及版本号），然后使用pod install命令即可很方便的
    
    </summary>
    
      <category term="iOS" scheme="http://Donkey-Tao.github.io/categories/iOS/"/>
    
    
      <category term="CocoaPods" scheme="http://Donkey-Tao.github.io/tags/CocoaPods/"/>
    
      <category term="TFKit" scheme="http://Donkey-Tao.github.io/tags/TFKit/"/>
    
      <category term="TFNetworking" scheme="http://Donkey-Tao.github.io/tags/TFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>Xcode8.2.1自动配置证书进行打包遇到的问题</title>
    <link href="http://Donkey-Tao.github.io/2017/03/09/2017-03-09-Xcode8.2.1%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://Donkey-Tao.github.io/2017/03/09/2017-03-09-Xcode8.2.1自动配置证书进行打包遇到的问题/</id>
    <published>2017-03-09T05:00:39.000Z</published>
    <updated>2017-03-10T03:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>声明：本文为博主原创，如需转载请注明出处。</code></p>
<p><code>问题描述</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to locate or generate matching signing assets，You account already has a valid iOS Distribution certificate</div></pre></td></tr></table></figure>
<p><img src="/images/AlreadyHaveAValidDistibutionCertificate.png" alt="证书缺失"></p>
<p>这个问题是勾选Automatically manager signing生成IPA文件时产生的，之前一直是自己手动配置Profiles、app IDs和Certificates，没有勾选过Automatically manager signing生成IPA文件，在出现上述问题的弹框时没有仔细查看原因直接try again后没能解决就reset了一下，然后再try again时就能够继续打包了。但是，这样做虽然这次可以生成IPA包，看上去没有任何问题。其实，这样做的后果很严重，点击reset后Xcode会自动发送网络请求到开发者中心去生成新的Distribution Certificate，如果之前开发者账号已经有两个发布证书，由于一个开发者账号只能生成两个Distribution Certificate，所以系统会默认revoke掉之前已经有已有的一个发布证书。这样如果revoke的证书是别人创建的，会影响到这个生产证书的相关的电脑证书环境异常(因为以前配置在这台电脑的生产证书已经在苹果的开发者中心找不到了)，还会影响到用被revoke的证书之前生成的描述文件失效。</p>
<p><code>问题排查</code>：之前用Xcode打包时没注意到这个问题，但是由于Xcode revoke 了之前别的同事创建的Distribution Certificate，所以别的同事在打包时Xcode会自动创建新的Distribution Certificate并revoke了之前其他的Distribution Certificate，这样导致每次打包都会创建新的发布证书，导致之前生成的描述文件全部失效。发现这个问题是因为打好的包放到蒲公英上经常不能下载，进入开发者中心后发现，发现Distribution Certificate都是最近生成的(另外，web页面的开发中心中生成的发布证书的显示时间跟我天朝的北京时间的市区是不一样的，之前看到证书的生成时间也让我很不解)。这样以前的描述文件跟现在的发布证书不一致，这才确定所有描述文件失效的原因。</p>
<p><code>问题成因</code>：因为Xcode在自动进行Profiles、app IDs和Certificates的配置时没有找到相应的发布证书，可能成因是之前没有安装相应的生产证书。我这之所以出现这样的问题，是因为之前同事只发给我两个推送相关的证书的p12文件，没有生产证书的p12文件，在安装后没有进行检查缺少了生产证书的p12文件。</p>
<p><code>解决办法</code>：需要去开发者中心进行下载后安装，如果要用的生产证书是别人生产的，那么需要从生产该证书的那台电脑上去导出p12文件，然后安装到自己进行打包的电脑上。</p>
<p><code>谨记</code>：在勾选Automatically manager signing生成IPA文件时产生的时，出现异常问题要谨慎查看原因，遇到reset相关提示时要特别注意，防止Xcode自动在开发者中心中修改了或者revoke了之前别人创建好的证书之类。以后开发或者打包时一定要仔细检查使用的电脑上是否已经装有开发证书和生产证书，以免出现Xcode自动生成证书并revoke了之前的证书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;声明：本文为博主原创，如需转载请注明出处。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;问题描述&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
      <category term="iOS" scheme="http://Donkey-Tao.github.io/categories/iOS/"/>
    
    
      <category term="certificate" scheme="http://Donkey-Tao.github.io/tags/certificate/"/>
    
      <category term="Xcode" scheme="http://Donkey-Tao.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>AFNetworking (3.1.0) 英文翻译与源码详细解析&lt;一&gt;</title>
    <link href="http://Donkey-Tao.github.io/2016/05/03/2016-05-03-AFNetworking%20(3.1.0)%20%E8%8B%B1%E6%96%87%E7%BF%BB%E8%AF%91%E4%B8%8E%E6%BA%90%E7%A0%81%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%3C%E4%B8%80%3E/"/>
    <id>http://Donkey-Tao.github.io/2016/05/03/2016-05-03-AFNetworking (3.1.0) 英文翻译与源码详细解析&lt;一&gt;/</id>
    <published>2016-05-03T14:10:54.000Z</published>
    <updated>2017-03-28T13:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用前阅读README是非常重要的，里面往往包括了这个库的介绍、安装和使用等等，对于快速了解一个库来说，这是非常有帮助的。在看完头文件和README之后，你会发现<code>AFURLSessionManager</code>和<code>AFHTTPSessionManager</code>是里面比较重要的两个类。这里我先讲<code>AFURLSessionManager</code>这个类：首先浏览完这个类从API，发现其主要提供了数据的请求、上传和下载功能。</p>
<p>在属性方面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@property(readonly,nonatomic,strong)NSArray *tasks;//总的任务集合</div><div class="line">@property(readonly,nonatomic,strong)NSArray *dataTasks;//数据任务集合</div><div class="line">@property(readonly,nonatomic,strong)NSArray *uploadTasks;//上传任务集合</div><div class="line">@property(readonly,nonatomic,strong)NSArray *downloadTasks;//下载任务集合</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property(nonatomic,assign)BOOL attemptsToRecreateUploadTasksForBackgroundSessions;</div></pre></td></tr></table></figure>
<p>这个属性非常重要，注释里面写到，在iOS7中存在一个bug，在创建后台上传任务时，有时候会返回nil，所以为了解决这个问题，AFNetworking遵照了苹果的建议，在创建失败的时候，会重新尝试创建，次数默认为3次，所以你的应用如果有场景会有在后台上传的情况的话，记得将该值设为YES，避免出现上传失败的问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidResumeNotification;</div></pre></td></tr></table></figure>
<p>在对外提供的notification key里面，使用了<code>FOUNDATION_EXPORT</code>来定义常量，使用<code>FOUNDATION_EXPORT</code>和<code>extern</code>或者<code>define</code>有什么区别呢？</p>
<p><code>FOUNDATION_EXPORT</code>在c文件编译下是和extern等同，在c++文件编译下是和extern “C”等同，在32位机的环境下又是另外编译情况，在兼容性方面，<code>FOUNDATION_EXPORT</code>做的会更好。</p>
<p>进入到实现文件里面，我们可以看到在外部API调用dataTask、uploadTask、downloadTask方法实际上都是completionHanlder block返回出来的，但是我们知道网络请求是delegate返回结果的，AF内部做了巧妙的操作，他对每个task都增加代理设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request</div><div class="line">                               uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock</div><div class="line">                             downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock</div><div class="line">                            completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler &#123;</div><div class="line">	__block NSURLSessionDataTask *dataTask = nil;</div><div class="line">    url_session_manager_create_task_safely(^&#123;</div><div class="line">        dataTask = [self.session dataTaskWithRequest:request];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">	// 每个task里面都会调用addDelegate方法</div><div class="line">    [self addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler];</div><div class="line"></div><div class="line">    return dataTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在设置里面，每个task会在内部创建<code>AFURLSessionManagerTaskDelegate</code>对象，并设置completionHandler、uploadProgressBlock、downloadProgressBlock回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (void)addDelegateForDataTask:(NSURLSessionDataTask *)dataTask</div><div class="line">                uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock</div><div class="line">              downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock</div><div class="line">             completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler</div><div class="line">&#123;</div><div class="line">    // 初始化delegate对象</div><div class="line">    AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] init];</div><div class="line">    delegate.manager = self;</div><div class="line">    // 将task的completionHandler赋给delegate，系统网络请求delegate 调用该block，返回结果</div><div class="line">    delegate.completionHandler = completionHandler;</div><div class="line"></div><div class="line">    dataTask.taskDescription = self.taskDescriptionForSessionTasks;</div><div class="line">    // 对task进行delegate</div><div class="line">    [self setDelegate:delegate forTask:dataTask];</div><div class="line">	// 设置上传和下载进度回调</div><div class="line">    delegate.uploadProgressBlock = uploadProgressBlock;</div><div class="line">    delegate.downloadProgressBlock = downloadProgressBlock;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后delegate对象利用kvo将task对一些方法进行监听，并且监听到变化时，通过block返回，将delegate转成block出去</p>
<p>从CocoaPods导入项目中的AFNetworking可以很清晰地看到五个文件夹：<code>NSURLSession</code>、<code>ReachAbility</code>、<code>Security</code>、<code>Serialization</code>和<code>UIKit</code>。当不使用CocoaPods时就只能看到两个文件夹：<code>AFNetworking</code>和<code>UIKit+AFNetworking</code>，很显然第一个文件夹是跟网络请求相关的，但是第二个文件夹中是跟UI相关的。</p>
<p>在此我们按照CocoaPods导入的文件显示来进行分析。</p>
<p>首先我们来先看看<code>AFURLSessionManager</code>这个类，主要提供了数据的<code>请求</code>、<code>上传</code>和<code>下载</code>功能；</p>
<p>下面我们来对AFURLSessionManager.h文件中的内容进行详细的解释；</p>
<p><code>AFURLSessionManager</code> creates and manages an <code>NSURLSession</code> object based on a specified <code>NSURLSessionConfiguration</code> object, which conforms to <code>&lt;NSURLSessionTaskDelegate&gt;</code>, <code>&lt;NSURLSessionDataDelegate&gt;</code>, <code>&lt;NSURLSessionDownloadDelegate&gt;</code>, and <code>&lt;NSURLSessionDelegate&gt;</code>.</p>
<p>AFURLSessionManager创建并且管理一个NSURLSession对象，这个对象是基于一个规定的NSURLSessionConfiguration对象，并且遵循NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate,和 NSURLSessionDelegate这四个协议。</p>
<p>This is the base class for <code>AFHTTPSessionManager</code>, which adds functionality specific to making HTTP requests. If you are looking to extend <code>AFURLSessionManager</code> specifically for HTTP, consider subclassing <code>AFHTTPSessionManager</code> instead.</p>
<p>AFURLSessionManager是AFHTTPSessionManager的基类，AFHTTPSessionManager增加了特别为发送HTTP请求准备的方法。如果你正在寻找HTTP相关的AFURLSessionManager的扩展，可以考虑使用AFURLSessionManager的子类AFHTTPSessionManager来代替。</p>
<p>NSURLSession &amp; NSURLSessionTask Delegate Methods</p>
<p><code>AFURLSessionManager</code> implements the following delegate methods:</p>
<p> NSURLSession 和 NSURLSessionTask 的代理方法，AFURLSessionManager实现了以下的代理方法，</p>
<p>下面来介绍下相关的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> The managed session.</div><div class="line"> */</div><div class="line">@property (readonly, nonatomic, strong) NSURLSession *session;</div><div class="line"></div><div class="line">/**</div><div class="line"> The operation queue on which delegate callbacks are run.</div><div class="line"> */</div><div class="line">@property (readonly, nonatomic, strong) NSOperationQueue *operationQueue;</div><div class="line">/**</div><div class="line"> Responses sent from the server in data tasks created with `dataTaskWithRequest:success:failure:` and run using the `GET` / `POST` / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of `AFJSONResponseSerializer`.</div><div class="line"></div><div class="line"> @warning `responseSerializer` must not be `nil`.</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) id &lt;AFURLResponseSerialization&gt; responseSerializer;</div></pre></td></tr></table></figure>
<p>session就是要管理的NSURLSession对象，operationQueue是操作队列，当代理回调的时候运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">///-------------------------------</div><div class="line">/// @name Managing Security Policy</div><div class="line">///-------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> The security policy used by created session to evaluate server trust for secure connections. `AFURLSessionManager` uses the `defaultPolicy` unless otherwise specified.</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) AFSecurityPolicy *securityPolicy;</div></pre></td></tr></table></figure>
<p>securityPolicy是AFURLSessionManager的安全策略，如果有指定的安全策略就是用指定的，否则使用默认的安全策略。设置这个安全策略的属性是为了评估安全链接的服务器信任。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#if !TARGET_OS_WATCH</div><div class="line">///--------------------------------------</div><div class="line">/// @name Monitoring Network Reachability</div><div class="line">///--------------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> The network reachability manager. `AFURLSessionManager` uses the `sharedManager` by default.</div><div class="line"> */</div><div class="line">@property (readwrite, nonatomic, strong) AFNetworkReachabilityManager *reachabilityManager;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>很显然这里的reachabilityManager在苹果表相关应用的开发时时不适用的。AFNetworkReachabilityManager这个类是用于监测当前设备的网络状态，reachabilityManager是一个单例对象，可以通过sharedManager拿到默认的网络状态的单例对象reachabilityManager。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">///----------------------------</div><div class="line">/// @name Getting Session Tasks</div><div class="line">///----------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> The data, upload, and download tasks currently run by the managed session.</div><div class="line"> */</div><div class="line">@property (readonly, nonatomic, strong) NSArray &lt;NSURLSessionTask *&gt; *tasks;</div><div class="line"></div><div class="line">/**</div><div class="line"> The data tasks currently run by the managed session.</div><div class="line"> */</div><div class="line">@property (readonly, nonatomic, strong) NSArray &lt;NSURLSessionDataTask *&gt; *dataTasks;</div><div class="line"></div><div class="line">/**</div><div class="line"> The upload tasks currently run by the managed session.</div><div class="line"> */</div><div class="line">@property (readonly, nonatomic, strong) NSArray &lt;NSURLSessionUploadTask *&gt; *uploadTasks;</div><div class="line"></div><div class="line">/**</div><div class="line"> The download tasks currently run by the managed session.</div><div class="line"> */</div><div class="line">@property (readonly, nonatomic, strong) NSArray &lt;NSURLSessionDownloadTask *&gt; *downloadTasks;</div></pre></td></tr></table></figure>
<p>通过这四个属性，我们分别可以拿到总的任务集合（包括上传和下载任务）、数据任务集合、上传任务集合和下载任务集合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">///-------------------------------</div><div class="line">/// @name Managing Callback Queues</div><div class="line">///-------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> The dispatch queue for `completionBlock`. If `NULL` (default), the main queue is used.</div><div class="line"> */</div><div class="line">@property (nonatomic, strong, nullable) dispatch_queue_t completionQueue;</div><div class="line"></div><div class="line">/**</div><div class="line"> The dispatch group for `completionBlock`. If `NULL` (default), a private dispatch group is used.</div><div class="line"> */</div><div class="line">@property (nonatomic, strong, nullable) dispatch_group_t completionGroup;</div></pre></td></tr></table></figure>
<p>管理回调队列。</p>
<p>completionQueue是完成回调的队列。如果是默认的NULL那么使用主队列。</p>
<p>completionGroup是完成回调组。如果是默认的NULL就使用私有的回调组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">///---------------------------------</div><div class="line">/// @name Working Around System Bugs</div><div class="line">///---------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Whether to attempt to retry creation of upload tasks for background sessions when initial call returns `nil`. `NO` by default.</div><div class="line"></div><div class="line"> @bug As of iOS 7.0, there is a bug where upload tasks created for background tasks are sometimes `nil`. As a workaround, if this property is `YES`, AFNetworking will follow Apple&apos;s recommendation to try creating the task again.</div><div class="line"></div><div class="line"> @see https://github.com/AFNetworking/AFNetworking/issues/1675</div><div class="line">  */</div><div class="line">@property (nonatomic, assign) BOOL attemptsToRecreateUploadTasksForBackgroundSessions;</div></pre></td></tr></table></figure>
<p>如上图所示，注释里面写到，在iOS7中存在一个bug，在创建后台上传任务时，有时候会返回nil。作为一个修补方案，如果设置这个属性为YES, AFNetworking将会遵照苹果的建议，在创建失败的时候，会重新尝试创建，次数默认为3次。所以你的应用如果有在后台上传的情况的话，记得将该值设为YES，避免出现上传失败的问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">///---------------------</div><div class="line">/// @name Initialization</div><div class="line">///---------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates and returns a manager for a session created with the specified configuration. This is the designated initializer.</div><div class="line"></div><div class="line"> @param configuration The configuration used to create the managed session.</div><div class="line"></div><div class="line"> @return A manager for a newly-created session.</div><div class="line"> */</div><div class="line">- (instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)configuration NS_DESIGNATED_INITIALIZER;</div><div class="line"></div><div class="line">/**</div><div class="line"> Invalidates the managed session, optionally canceling pending tasks.</div><div class="line"></div><div class="line"> @param cancelPendingTasks Whether or not to cancel pending tasks.</div><div class="line"> */</div><div class="line">- (void)invalidateSessionCancelingTasks:(BOOL)cancelPendingTasks;</div></pre></td></tr></table></figure>
<p>这里可以实现对AFURLSession的初始化。在创建一个基于特定的NSURLSessionConfiguration类型的对象的session的时候会创建并返回一个AFURLSessionManager类型的manager对象。</p>
<p>使被管理会话无效，并可选择取消挂起的任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">///-------------------------</div><div class="line">/// @name Running Data Tasks</div><div class="line">///-------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionDataTask` with the specified request.</div><div class="line"></div><div class="line"> @param request The HTTP request for the request.</div><div class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</div><div class="line"> */</div><div class="line">- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request</div><div class="line">                            completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionDataTask` with the specified request.</div><div class="line"></div><div class="line"> @param request The HTTP request for the request.</div><div class="line"> @param uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param downloadProgressBlock A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</div><div class="line"> */</div><div class="line">- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request</div><div class="line">                               uploadProgress:(nullable void (^)(NSProgress *uploadProgress))uploadProgressBlock</div><div class="line">                             downloadProgress:(nullable void (^)(NSProgress *downloadProgress))downloadProgressBlock</div><div class="line">                            completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler;</div></pre></td></tr></table></figure>
<p>这里是用来创建NSURLSessionDataTask对象的对象方法，提供了两个方法。两个方法只是参数不一样，第一个方法可以通过一个HTTP请求对象以及一个completionHandle block来创建一个数据任务。第二个方法比第一个方法多两个参数，风别是上传和下载的block，在这两个block中我们可以分别拿到上传和下载的进度进行一定的处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">///---------------------------</div><div class="line">/// @name Running Upload Tasks</div><div class="line">///---------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionUploadTask` with the specified request for a local file.</div><div class="line"></div><div class="line"> @param request The HTTP request for the request.</div><div class="line"> @param fileURL A URL to the local file to be uploaded.</div><div class="line"> @param uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</div><div class="line"></div><div class="line"> @see `attemptsToRecreateUploadTasksForBackgroundSessions`</div><div class="line"> */</div><div class="line">- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request</div><div class="line">                                         fromFile:(NSURL *)fileURL</div><div class="line">                                         progress:(nullable void (^)(NSProgress *uploadProgress))uploadProgressBlock</div><div class="line">                                completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject, NSError  * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionUploadTask` with the specified request for an HTTP body.</div><div class="line"></div><div class="line"> @param request The HTTP request for the request.</div><div class="line"> @param bodyData A data object containing the HTTP body to be uploaded.</div><div class="line"> @param uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</div><div class="line"> */</div><div class="line">- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request</div><div class="line">                                         fromData:(nullable NSData *)bodyData</div><div class="line">                                         progress:(nullable void (^)(NSProgress *uploadProgress))uploadProgressBlock</div><div class="line">                                completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject, NSError * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionUploadTask` with the specified streaming request.</div><div class="line"></div><div class="line"> @param request The HTTP request for the request.</div><div class="line"> @param uploadProgressBlock A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</div><div class="line"> */</div><div class="line">- (NSURLSessionUploadTask *)uploadTaskWithStreamedRequest:(NSURLRequest *)request</div><div class="line">                                                 progress:(nullable void (^)(NSProgress *uploadProgress))uploadProgressBlock</div><div class="line">                                        completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject, NSError * _Nullable error))completionHandler;</div></pre></td></tr></table></figure>
<p>这里的三个方法都是用来创建上传任务的，也只是参数不一样，返回NSURLSessionUploadTask类型的对象。我们可以根据上传不同类型的文件选择不同的方法进行处理。可以用第一个方法来上传本地文件，用第二个方法来上传包装后的NSData类型的文件，用第三种方法来上传流文件。注意这里的上传block的实在session的队列中而不是在主队列中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">///-----------------------------</div><div class="line">/// @name Running Download Tasks</div><div class="line">///-----------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionDownloadTask` with the specified request.</div><div class="line"></div><div class="line"> @param request The HTTP request for the request.</div><div class="line"> @param downloadProgressBlock A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param destination A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path &amp; the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.</div><div class="line"> @param completionHandler A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.</div><div class="line"></div><div class="line"> @warning If using a background `NSURLSessionConfiguration` on iOS, these blocks will be lost when the app is terminated. Background sessions may prefer to use `-setDownloadTaskDidFinishDownloadingBlock:` to specify the URL for saving the downloaded file, rather than the destination block of this method.</div><div class="line"> */</div><div class="line">- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request</div><div class="line">                                             progress:(nullable void (^)(NSProgress *downloadProgress))downloadProgressBlock</div><div class="line">                                          destination:(nullable NSURL * (^)(NSURL *targetPath, NSURLResponse *response))destination</div><div class="line">                                    completionHandler:(nullable void (^)(NSURLResponse *response, NSURL * _Nullable filePath, NSError * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">/**</div><div class="line"> Creates an `NSURLSessionDownloadTask` with the specified resume data.</div><div class="line"></div><div class="line"> @param resumeData The data used to resume downloading.</div><div class="line"> @param downloadProgressBlock A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.</div><div class="line"> @param destination A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path &amp; the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.</div><div class="line"> @param completionHandler A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.</div><div class="line"> */</div><div class="line">- (NSURLSessionDownloadTask *)downloadTaskWithResumeData:(NSData *)resumeData</div><div class="line">                                                progress:(nullable void (^)(NSProgress *downloadProgress))downloadProgressBlock</div><div class="line">                                             destination:(nullable NSURL * (^)(NSURL *targetPath, NSURLResponse *response))destination</div><div class="line">                                       completionHandler:(nullable void (^)(NSURLResponse *response, NSURL * _Nullable filePath, NSError * _Nullable error))completionHandler;</div></pre></td></tr></table></figure>
<p>这里的两个方法是用来创建下载任务的，只是参数不一样，最后均是返回NSURLSessionDownloadTask类型的对象。这里第一的方法的描述中的相关警告要注意。第一个方法中的请求参数用到NSURLRequest类型的对象比较常用，而方法二中使用的NSData类型的对象作为描述下载任务的参数平时用得比较少。注意：这里的下载任务中的下载进度的block的调用是在session的队列中而不是在主线程中调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">///---------------------------------</div><div class="line">/// @name Getting Progress for Tasks</div><div class="line">///---------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Returns the upload progress of the specified task.</div><div class="line"></div><div class="line"> @param task The session task. Must not be `nil`.</div><div class="line"></div><div class="line"> @return An `NSProgress` object reporting the upload progress of a task, or `nil` if the progress is unavailable.</div><div class="line"> */</div><div class="line">- (nullable NSProgress *)uploadProgressForTask:(NSURLSessionTask *)task;</div><div class="line"></div><div class="line">/**</div><div class="line"> Returns the download progress of the specified task.</div><div class="line"></div><div class="line"> @param task The session task. Must not be `nil`.</div><div class="line"></div><div class="line"> @return An `NSProgress` object reporting the download progress of a task, or `nil` if the progress is unavailable.</div><div class="line"> */</div><div class="line">- (nullable NSProgress *)downloadProgressForTask:(NSURLSessionTask *)task;</div></pre></td></tr></table></figure>
<p>这里的两个方法用来获取上传或者下载的进度。第一个方法可以根据NSURLSessionTask类型的对象来获取上传任务的进度；第二个方法可以根据NSURLSessionTask类型的对象来获取上传任务的进度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">///-----------------------------------------</div><div class="line">/// @name Setting Session Delegate Callbacks</div><div class="line">///-----------------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when the managed session becomes invalid, as handled by the `NSURLSessionDelegate` method `URLSession:didBecomeInvalidWithError:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when the managed session becomes invalid. The block has no return value, and takes two arguments: the session, and the error related to the cause of invalidation.</div><div class="line"> */</div><div class="line">- (void)setSessionDidBecomeInvalidBlock:(nullable void (^)(NSURLSession *session, NSError *error))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a connection level authentication challenge has occurred, as handled by the `NSURLSessionDelegate` method `URLSession:didReceiveChallenge:completionHandler:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a connection level authentication challenge has occurred. The block returns the disposition of the authentication challenge, and takes three arguments: the session, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.</div><div class="line"> */</div><div class="line">- (void)setSessionDidReceiveAuthenticationChallengeBlock:(nullable NSURLSessionAuthChallengeDisposition (^)(NSURLSession *session, NSURLAuthenticationChallenge *challenge, NSURLCredential * _Nullable __autoreleasing * _Nullable credential))block;</div></pre></td></tr></table></figure>
<p>第一个方法是用来设置一个Block，在session失效的时候进行调用；</p>
<p>第二个方法是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">///--------------------------------------</div><div class="line">/// @name Setting Task Delegate Callbacks</div><div class="line">///--------------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a task requires a new request body stream to send to the remote server, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:needNewBodyStream:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a task requires a new request body stream.</div><div class="line"> */</div><div class="line">- (void)setTaskNeedNewBodyStreamBlock:(nullable NSInputStream * (^)(NSURLSession *session, NSURLSessionTask *task))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when an HTTP request is attempting to perform a redirection to a different URL, as handled by the `NSURLSessionTaskDelegate` method `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when an HTTP request is attempting to perform a redirection to a different URL. The block returns the request to be made for the redirection, and takes four arguments: the session, the task, the redirection response, and the request corresponding to the redirection response.</div><div class="line"> */</div><div class="line">- (void)setTaskWillPerformHTTPRedirectionBlock:(nullable NSURLRequest * (^)(NSURLSession *session, NSURLSessionTask *task, NSURLResponse *response, NSURLRequest *request))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a session task has received a request specific authentication challenge, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didReceiveChallenge:completionHandler:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a session task has received a request specific authentication challenge. The block returns the disposition of the authentication challenge, and takes four arguments: the session, the task, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.</div><div class="line"> */</div><div class="line">- (void)setTaskDidReceiveAuthenticationChallengeBlock:(nullable NSURLSessionAuthChallengeDisposition (^)(NSURLSession *session, NSURLSessionTask *task, NSURLAuthenticationChallenge *challenge, NSURLCredential * _Nullable __autoreleasing * _Nullable credential))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed periodically to track upload progress, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`.</div><div class="line"></div><div class="line"> @param block A block object to be called when an undetermined number of bytes have been uploaded to the server. This block has no return value and takes five arguments: the session, the task, the number of bytes written since the last time the upload progress block was called, the total bytes written, and the total bytes expected to be written during the request, as initially determined by the length of the HTTP body. This block may be called multiple times, and will execute on the main thread.</div><div class="line"> */</div><div class="line">- (void)setTaskDidSendBodyDataBlock:(nullable void (^)(NSURLSession *session, NSURLSessionTask *task, int64_t bytesSent, int64_t totalBytesSent, int64_t totalBytesExpectedToSend))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed as the last message related to a specific task, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didCompleteWithError:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any error that occurred in the process of executing the task.</div><div class="line"> */</div><div class="line">- (void)setTaskDidCompleteBlock:(nullable void (^)(NSURLSession *session, NSURLSessionTask *task, NSError * _Nullable error))block;</div></pre></td></tr></table></figure>
<p>这里的五个方法都是session任务的代理回调。</p>
<p>第一个方法：</p>
<p>第二个方法：</p>
<p>第三个方法：</p>
<p>第四个方法：</p>
<p>第五个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">///-------------------------------------------</div><div class="line">/// @name Setting Data Task Delegate Callbacks</div><div class="line">///-------------------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a data task has received a response, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didReceiveResponse:completionHandler:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a data task has received a response. The block returns the disposition of the session response, and takes three arguments: the session, the data task, and the received response.</div><div class="line"> */</div><div class="line">- (void)setDataTaskDidReceiveResponseBlock:(nullable NSURLSessionResponseDisposition (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSURLResponse *response))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a data task has become a download task, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didBecomeDownloadTask:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a data task has become a download task. The block has no return value, and takes three arguments: the session, the data task, and the download task it has become.</div><div class="line"> */</div><div class="line">- (void)setDataTaskDidBecomeDownloadTaskBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSURLSessionDownloadTask *downloadTask))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a data task receives data, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didReceiveData:`.</div><div class="line"></div><div class="line"> @param block A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes three arguments: the session, the data task, and the data received. This block may be called multiple times, and will execute on the session manager operation queue.</div><div class="line"> */</div><div class="line">- (void)setDataTaskDidReceiveDataBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSData *data))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed to determine the caching behavior of a data task, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:willCacheResponse:completionHandler:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed to determine the caching behavior of a data task. The block returns the response to cache, and takes three arguments: the session, the data task, and the proposed cached URL response.</div><div class="line"> */</div><div class="line">- (void)setDataTaskWillCacheResponseBlock:(nullable NSCachedURLResponse * (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSCachedURLResponse *proposedResponse))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed once all messages enqueued for a session have been delivered, as handled by the `NSURLSessionDataDelegate` method `URLSessionDidFinishEventsForBackgroundURLSession:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed once all messages enqueued for a session have been delivered. The block has no return value and takes a single argument: the session.</div><div class="line"> */</div><div class="line">- (void)setDidFinishEventsForBackgroundURLSessionBlock:(nullable void (^)(NSURLSession *session))block;</div></pre></td></tr></table></figure>
<p>这里的五个方法是设置NSURLSessionDataTask的代理方法；</p>
<p>第一个方法：</p>
<p>第二个方法：</p>
<p>第三个方法：</p>
<p>第四个方法：</p>
<p>第五个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">///-----------------------------------------------</div><div class="line">/// @name Setting Download Task Delegate Callbacks</div><div class="line">///-----------------------------------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a download task has completed a download, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didFinishDownloadingToURL:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a download task has completed. The block returns the URL the download should be moved to, and takes three arguments: the session, the download task, and the temporary location of the downloaded file. If the file manager encounters an error while attempting to move the temporary file to the destination, an `AFURLSessionDownloadTaskDidFailToMoveFileNotification` will be posted, with the download task as its object, and the user info of the error.</div><div class="line"> */</div><div class="line">- (void)setDownloadTaskDidFinishDownloadingBlock:(nullable NSURL * _Nullable  (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, NSURL *location))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed periodically to track download progress, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:`.</div><div class="line"></div><div class="line"> @param block A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes five arguments: the session, the download task, the number of bytes read since the last time the download progress block was called, the total bytes read, and the total bytes expected to be read during the request, as initially determined by the expected content size of the `NSHTTPURLResponse` object. This block may be called multiple times, and will execute on the session manager operation queue.</div><div class="line"> */</div><div class="line">- (void)setDownloadTaskDidWriteDataBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite))block;</div><div class="line"></div><div class="line">/**</div><div class="line"> Sets a block to be executed when a download task has been resumed, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`.</div><div class="line"></div><div class="line"> @param block A block object to be executed when a download task has been resumed. The block has no return value and takes four arguments: the session, the download task, the file offset of the resumed download, and the total number of bytes expected to be downloaded.</div><div class="line"> */</div><div class="line">- (void)setDownloadTaskDidResumeBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, int64_t fileOffset, int64_t expectedTotalBytes))block;</div></pre></td></tr></table></figure>
<p>这里的三个方法是NSURLSessionDownloadTask的代理的三个方法；</p>
<p>第一个方法：</p>
<p>第二个方法：</p>
<p>第三个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">///--------------------</div><div class="line">/// @name Notifications</div><div class="line">///--------------------</div><div class="line"></div><div class="line">/**</div><div class="line"> Posted when a task resumes.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidResumeNotification;</div><div class="line"></div><div class="line">/**</div><div class="line"> Posted when a task finishes executing. Includes a userInfo dictionary with additional information about the task.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidCompleteNotification;</div><div class="line"></div><div class="line">/**</div><div class="line"> Posted when a task suspends its execution.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidSuspendNotification;</div><div class="line"></div><div class="line">/**</div><div class="line"> Posted when a session is invalidated.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFURLSessionDidInvalidateNotification;</div><div class="line"></div><div class="line">/**</div><div class="line"> Posted when a session download task encountered an error when moving the temporary download file to a specified destination.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFURLSessionDownloadTaskDidFailToMoveFileNotification;</div><div class="line"></div><div class="line">/**</div><div class="line"> The raw response data of the task. Included in the userInfo dictionary of the `AFNetworkingTaskDidCompleteNotification` if response data exists for the task.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidCompleteResponseDataKey;</div><div class="line"></div><div class="line">/**</div><div class="line"> The serialized response object of the task. Included in the userInfo dictionary of the `AFNetworkingTaskDidCompleteNotification` if the response was serialized.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidCompleteSerializedResponseKey;</div><div class="line"></div><div class="line">/**</div><div class="line"> The response serializer used to serialize the response. Included in the userInfo dictionary of the `AFNetworkingTaskDidCompleteNotification` if the task has an associated response serializer.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidCompleteResponseSerializerKey;</div><div class="line"></div><div class="line">/**</div><div class="line"> The file path associated with the download task. Included in the userInfo dictionary of the `AFNetworkingTaskDidCompleteNotification` if an the response data has been stored directly to disk.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidCompleteAssetPathKey;</div><div class="line"></div><div class="line">/**</div><div class="line"> Any error associated with the task, or the serialization of the response. Included in the userInfo dictionary of the `AFNetworkingTaskDidCompleteNotification` if an error exists.</div><div class="line"> */</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingTaskDidCompleteErrorKey;</div></pre></td></tr></table></figure>
<p>这里是设置并定义网络请求中涉及的各种通知的名称字符串的定义。</p>
<p>到此你可能会发现这里没有对遵循什么上传的代理协议。</p>
<p>到此我们只是简单的介绍了下AFN核心功能AFURLSessionManager的.h文件。</p>
<p>下面一篇博文我们将一起来好好学习下AFURLSessionManager的.m</p>
<p>268行</p>
<p><a href="http://www.jianshu.com/p/20f43fa00ec3" target="_blank" rel="external">http://www.jianshu.com/p/20f43fa00ec3</a></p>
<p><a href="http://www.jianshu.com/p/6aef297d1780#" target="_blank" rel="external">http://www.jianshu.com/p/6aef297d1780#</a></p>
<p><a href="http://www.cnblogs.com/Jenaral/p/6169903.html" target="_blank" rel="external">http://www.cnblogs.com/Jenaral/p/6169903.html</a></p>
<p><a href="http://www.cnblogs.com/qiutangfengmian/p/5647377.html" target="_blank" rel="external">http://www.cnblogs.com/qiutangfengmian/p/5647377.html</a></p>
<p><a href="http://zeeyang.com/2016/02/21/AFNetWorking-one/" target="_blank" rel="external">http://zeeyang.com/2016/02/21/AFNetWorking-one/</a></p>
<p><a href="http://www.jianshu.com/u/b82d2721ba07" target="_blank" rel="external">http://www.jianshu.com/u/b82d2721ba07</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用前阅读README是非常重要的，里面往往包括了这个库的介绍、安装和使用等等，对于快速了解一个库来说，这是非常有帮助的。在看完头文件和README之后，你会发现&lt;code&gt;AFURLSessionManager&lt;/code&gt;和&lt;code&gt;AFHTTPSessionMan
    
    </summary>
    
      <category term="AFNetworking" scheme="http://Donkey-Tao.github.io/categories/AFNetworking/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift练手项目:新浪微博</title>
    <link href="http://Donkey-Tao.github.io/2016/04/01/2016-04-01-Swift%E9%A1%B9%E7%9B%AE/"/>
    <id>http://Donkey-Tao.github.io/2016/04/01/2016-04-01-Swift项目/</id>
    <published>2016-04-01T15:00:39.000Z</published>
    <updated>2017-02-07T06:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<p> <code>声明：本文为博主原创，如需转载请注明出处。</code></p>
<p>本项目使用swift3完成。</p>
<p>写在项目之前：</p>
<p>Swift中自定义LOG:在Debug环境下打印内容，但是在Release环境下不显示打印</p>
<ul>
<li>自定义标记-&gt;项目 -&gt;buildSettings -&gt; Swift flag -&gt; Debug -&gt;-D DEBUG</li>
<li>if DEBUG 和endif</li>
</ul>
<p>1.获取所在文件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.获取打印所在的文件</span></div><div class="line"><span class="keyword">let</span> file=(#file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</div></pre></td></tr></table></figure>
<p>2.获取打印所在的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 2.获取打印所在的方法</span></div><div class="line"><span class="keyword">let</span> funcName = #function</div></pre></td></tr></table></figure>
<p>3.获取打印所在的行</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3.获取打印所在行数</span></div><div class="line"><span class="keyword">let</span> lineNum = #line</div></pre></td></tr></table></figure>
<p>4.整个到一个TFLog函数中，并将函数放在AppDelegae.swift中，这样可以实现整个项目中都可以用，利于团队合作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TFLog</span>&lt;T&gt;<span class="params">(<span class="number">_</span> messsage : T, file : String = #file, funcName : String = #function, lineNum : Int = #line)</span></span> &#123;</div><div class="line"></div><div class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span>  </div><div class="line">        <span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent  </div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(fileName):(\(lineNum))-\(messsage)"</span>) </div><div class="line">    #endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中上面函数中的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">if</span> <span class="type">DEBUG</span></div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>​    可以通过TAGETS -&gt; Build Settings -&gt; Other Swift Flags -&gt; Debug -&gt;Any Architecture|Any SDK方式修改，在其中添加”-D DEBUG”，表示debug环境下有这样的一个标记。加上上面的这些就可以让TFLog()打印的东西在Debug环境下显示，在Release环境下不显示。</p>
<p>​    到此在项目中以后就可以使用这样的自定义的TFLog()函数作为打印调试用，以后在其他的项目中也可以直接拿过去就用。</p>
<h1 id="项目的部署-OSChina"><a href="#项目的部署-OSChina" class="headerlink" title="项目的部署:OSChina"></a>项目的部署:OSChina</h1><p>基本步骤：</p>
<ul>
<li>在OSChina上创建远程代码仓库</li>
<li>将仓库clone到本地</li>
<li>添加.gitignore文件-&gt;pods</li>
<li>初始化项目</li>
<li>将项目提交到远程代码仓库</li>
</ul>
<p>本项目采用Git管理源代码，为个人练手项目。所以，源代码开源且同时部署在GitHub和OSChina上面。</p>
<p>首先在OSChina上面新建项目SinaWeibo。这里没有采用SSH方式实现代码的管理，而是采用HTTPS方式来进行代码的管理。<a href="https://git.oschina.net/taofei0610/SinaWeibo.git" target="_blank" rel="external">https://git.oschina.net/taofei0610/SinaWeibo.git</a></p>
<p>然后将项目Clone到的我的电脑上面，打开终端进入到代码存储的目录下，使用命令Clone下OSChina上面的项目。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用到的命令</span></div><div class="line">cd /Users/taofei/Documents/TFCode/TFOSChina</div><div class="line">git clone https:<span class="comment">//git.oschina.net/taofei0610/SinaWeibo.git</span></div><div class="line">cd SinaWeibo</div><div class="line">touch .gitignore</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"add gitignore"</span></div><div class="line">git push</div></pre></td></tr></table></figure>
<p><img src="/images/CloneAndPuash.png" alt="clone项目"></p>
<p>到此就将OSChina上面的项目Clone下来了，但是由于OSChina上面创建项目时没有swift的</p>
<p>.gitignore，所以我们要去GitHub中找到swift项目开发中的gitignore并将其复制后加入我们的项目中。(<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a>)</p>
<p><code>注意：一般在这里复制的.gitignore中的内容时最好将#Pods中的#去掉，这样上传时不用将CocoaPods中的文件上传，</code></p>
<p><code>只上传Podfile中的内容</code></p>
<p><img src="/images/gitignoreAttention.png" alt="gitignore"></p>
<p>这样关于swift的.gitignore文件就在项目中了，我们需要git对其进行管理。用命令将其加入然后提交本地最后push到OSChina即可。</p>
<p>下面我们就可以新建swift项目放到刚才clone下来的与.gitignore同级的目录下。用Xcode创建完项目后我们就可以利用Xcode集成的Source Controller来commit，push项目代码了，当然命令行重度用户可以继续命令行也是特别好的。（此过程中第一次要输入OSChina的账号密码，直接输入就好了。）到此，项目部署完毕。</p>
<p><code>注意：这里项目名称一定要规范尽量不要出现特殊的符号</code></p>
<h1 id="项目的基本设置"><a href="#项目的基本设置" class="headerlink" title="项目的基本设置"></a>项目的基本设置</h1><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><ul>
<li>部署版本（Deployment Target）：本项目支持9.0及以上版本。（Swift很多要用到的语法比较新）</li>
<li>设备（Devices）：iPhone</li>
<li>设备方向（Device Orientation）：本项目只支持竖屏。</li>
<li>启动图片（Launch Screen Source）:Use Asset Catalog. </li>
</ul>
<p><img src="/images/Deployment.png" alt="项目配置"></p>
<p>到这里我们可以将已有的启动图片添加到项目的启动图片文件夹中了。要想尽量没有警告可以将没有用到的items移除。项目图标也是同样。</p>
<p>这里APP在模拟器上显示的是用们的项目名称，要想让其显示对用户比较有好多名称在项目的info.plist文件中修该Bundle name（或者Bundle display name） 后面的值为自己想要显示给用户的名称即可。我这里改为：微博。</p>
<p>最后设置下项目前缀（class prefix）：TF</p>
<h2 id="整理项目文件目录结构"><a href="#整理项目文件目录结构" class="headerlink" title="整理项目文件目录结构"></a>整理项目文件目录结构</h2><p>加入classes文件夹，里面分为：Main,Home,Message,Discover,Profile.</p>
<p><code>注意：整理完目录结构要记得提交,另外这里整理项目目录时最好创建真实的文件夹,二不是在Xcode中新建Group,这样便于以后管理</code></p>
<h1 id="纯代码方式创建项目"><a href="#纯代码方式创建项目" class="headerlink" title="纯代码方式创建项目"></a>纯代码方式创建项目</h1><p>基本步骤：</p>
<ul>
<li>将MainInterface -&gt; nil</li>
<li>创建Window -&gt; 设置根控制器</li>
<li>创建TFMainTabBarController</li>
<li>添加子控制器<ul>
<li>创建子控制器</li>
<li>设置属性title，tabBar.image/selectImage</li>
<li>包装导航控制器</li>
<li>添加子控制器</li>
</ul>
</li>
</ul>
<p>一般现在公司用storyboard还是比较多的，苹果推出的很多技术都是storyboard相关的。本项目用纯代码来实现是为了在此过程中熟练swift开发。</p>
<p>既然是纯代码方式就要将Main Interface中的main去掉，然后自己在AppDelegate中创建Window。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建Window,设置根控制器，显示window</span></div><div class="line">window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div><div class="line">window?.rootViewController=<span class="type">TFMainTabBarController</span>()</div><div class="line">window?.makeKeyAndVisible()</div></pre></td></tr></table></figure>
<p>创建窗口的跟控制器为：TFMainTabBarController，放在Main文件夹中。在AppDelegate中设置window的跟控制器时使用到TFMainTabBarController时不需要import。</p>
<p>首先要解决默认蓝色的tabBarItem选项的问题</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//解决解决默认蓝色的tabBarItem选项图片的问题,要在TFMainTabBarController中设置tintColor</span></div><div class="line">tabBar.tintColor = <span class="type">UIColor</span>.orange</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//或者在AppDelegate中设置tabBar的全局背景色</span></div><div class="line"><span class="comment">//设置tabBar全局颜色</span></div><div class="line"><span class="type">UITabBar</span>.appearance().tintColor = <span class="type">UIColor</span>.orange</div></pre></td></tr></table></figure>
<p>在TFMainTabBarController中我们要添加最少五个控制器，其中四个是类似的。所以，在此我们可以重载addChildViewController方法（OC中不允许这样写,这种写法类似Java中的方法的重载,函数名称可以相同，参数类型不同或者个数不同），并将其设置为<code>private</code>。将具体的添加子控制器要做的事封装在这个方法中。然后在主控制器中添加这四个相似的子控制器。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 初始化UI</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TFMainTabBarController</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/// 初始化UI界面</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupUI</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">        <span class="comment">//添加tabBarController的子控制器</span></div><div class="line">        addChildViewController(childVc: <span class="type">TFHomeViewController</span>(), title: <span class="string">"首页"</span>, imageName: <span class="string">"tabbar_home"</span>)</div><div class="line">        addChildViewController(childVc: <span class="type">TFMessageViewController</span>(), title: <span class="string">"消息"</span>, imageName: <span class="string">"tabbar_message_center"</span>)</div><div class="line">        addChildViewController(childVc: <span class="type">TFDiscoverViewController</span>(), title: <span class="string">"发现"</span>, imageName: <span class="string">"tabbar_discover"</span>)</div><div class="line">        addChildViewController(childVc: <span class="type">TFProfileViewController</span>(), title: <span class="string">"我"</span>, imageName: <span class="string">"tabbar_message_center"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//该类的私有方法private，在当前文件中可以访问，但是在其他文件中不能访问</span></div><div class="line">    <span class="comment">//swift支持方法的重载，方法名称相同，但是参数不同 --&gt;1.参数的类型不同，2.参数的个数不同</span></div><div class="line">    <span class="comment">//private修饰后在当前文件中可以访问，但是其他文件不可以访问</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addChildViewController</span><span class="params">(childVc : UIViewController,title : String,imageName :String)</span></span> &#123;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//1.设置子控制器的属性</span></div><div class="line">        childVc.title=title</div><div class="line">        childVc.tabBarItem.image = <span class="type">UIImage</span>(named: imageName)</div><div class="line">        childVc.tabBarItem.selectedImage = <span class="type">UIImage</span>(named: imageName + <span class="string">"_highlighted"</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//2.包装导航控制器</span></div><div class="line">        <span class="keyword">let</span> childNacVc = <span class="type">UINavigationController</span>(rootViewController: childVc)</div><div class="line">        </div><div class="line">        <span class="comment">//3.添加到父控制器中</span></div><div class="line">        addChildViewController(childNacVc)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="通过字符串创建对象"><a href="#通过字符串创建对象" class="headerlink" title="通过字符串创建对象"></a>通过字符串创建对象</h2><p>当然也可以传字符串给函数，让去创建子控制器</p>
<p><code>注意:Swift中的类的全称是带有命名空间的，例如：SinaWeiBo.TFMainTabBarController</code></p>
<ul>
<li>获取命名空间nameSpace</li>
<li>根据字符串获取对应的Class</li>
<li>将对应的AnyObject转换成控制器的类型</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//0.1获取命名空间，根据字符串创建控制器</span></div><div class="line"><span class="comment">//获取infoplist文件内容，这里可以强制解包</span></div><div class="line"><span class="keyword">let</span> nameSpace = <span class="type">Bundle</span>.main.infoDictionary!</div><div class="line"><span class="comment">//CFBundleExecutable是命名空间在infoplist中的编码</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> childController = <span class="type">NSClassFromString</span>(nameSpace + <span class="string">"."</span> + <span class="keyword">guard</span> <span class="keyword">let</span> nameSpace = <span class="type">Bundle</span>.main.infoDictionary![<span class="string">"CFBundleExecutable"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span>&#123;</div><div class="line">        </div><div class="line">	<span class="type">TFLog</span>(<span class="string">"没有获取到命名空间"</span>)</div><div class="line">	<span class="keyword">return</span>      </div><div class="line">&#125;</div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = <span class="type">NSClassFromString</span>(nameSpace + <span class="string">"."</span> + <span class="string">"TFHomeViewController"</span>)<span class="keyword">else</span>&#123;</div><div class="line">            </div><div class="line">    <span class="type">TFLog</span>(<span class="string">"根据字符串创建控制器失败"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//0.2将对应的AnyClass转换为控制器类型</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> childVCType = childController <span class="keyword">as</span>? <span class="type">UIViewController</span>.<span class="type">Type</span> <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"没有获取到对应控制器的类型"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"> <span class="comment">//0.3根据控制器类型创建控制器</span></div><div class="line"><span class="keyword">let</span> vc = childVCType.<span class="keyword">init</span>()</div></pre></td></tr></table></figure>
<p><code>注意：想要拿到类的名称创建控制器要加上命名空间</code></p>
<h2 id="通过JSON文件去创建控制器"><a href="#通过JSON文件去创建控制器" class="headerlink" title="通过JSON文件去创建控制器"></a>通过JSON文件去创建控制器</h2><p>上面通过字符串创建控制器看上去很是蛋疼，但是其实还是有用的。我们可以利用这点要根据json(JavaScript Object Notation)文件去创建控制器。</p>
<p>通过上面利用json文件来决定创建几个控制器或者什么样的控制（前提是之前APP中已经有这样的控制器文件），这样就可以实现由服务器来决定APP上显示什么样的控制器。使得APP上显示更加灵活，同时可以通过随时改变json文件来实现软件的改变。</p>
<ul>
<li>获取json文件路径：jsonPath</li>
<li>读取json文件中的内容：按二进制数据方式读取</li>
<li>将Data转成数组</li>
<li>遍历字典获取对应的信息<ul>
<li>获取控制器对应的字符串</li>
<li>获取控制器显示的title</li>
<li>获取控制器显示图标的名称imageName</li>
<li>创建并添加子控制器</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//0.0.1获取json文件的路径</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> jsonPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"MainVCSettings"</span>, ofType: <span class="string">"json"</span>) <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"没能获取到json数据"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//0.0.2读取json文件中的内容：数组-&gt;字典,要按照读取字符串的方法来读取，这里没有throw</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> jsonData = <span class="type">NSData</span>(contentsOfFile: jsonPath) <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"没有获取到json文件中的数据--jsonData"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//0.0.3将NSData类型转换为数组类型,数组以及数组中存放的字典,进行两层校验；</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> anyObject = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: jsonData <span class="keyword">as</span> <span class="type">Data</span>, options: .mutableContainers) <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"jsonData转anyObject失败"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> dictArray = anyObject <span class="keyword">as</span>? [[<span class="type">String</span> :<span class="type">AnyObject</span>]] <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"anyObject转字典数组失败"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历字典</span></div><div class="line"><span class="keyword">for</span> dict <span class="keyword">in</span> dictArray&#123;</div><div class="line"></div><div class="line"><span class="comment">//1.获取控制器对应的字符串</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> vcName = dict[<span class="string">"vcName"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"获取控制器对应的字符串vcName---失败"</span>)</div><div class="line">	<span class="comment">//第一个转不成要继续</span></div><div class="line">	<span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line">                      </div><div class="line"><span class="comment">//2.获取控制器显示的title</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> title = dict[<span class="string">"title"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span>&#123;</div><div class="line">                </div><div class="line">	<span class="type">TFLog</span>(<span class="string">"获取控制器显示的title---失败"</span>)</div><div class="line">	<span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line">            </div><div class="line"><span class="comment">//3.获取控制器显示图标的名称imageName</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> imageName = dict[<span class="string">"imageName"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span>&#123;</div><div class="line">                </div><div class="line">	<span class="type">TFLog</span>(<span class="string">"获取控制器显示图标的名称imageName---失败"</span>)</div><div class="line">	<span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line">            </div><div class="line"><span class="comment">//4.添加子控制器</span></div><div class="line">addChildViewController(childVc: vcName, title: title, imageName: imageName)</div><div class="line"></div><div class="line">	<span class="type">TFLog</span>(<span class="string">"---------------"</span>)</div><div class="line">	<span class="type">TFLog</span>(dict)</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Storyboard方式创建项目"><a href="#Storyboard方式创建项目" class="headerlink" title="Storyboard方式创建项目"></a>Storyboard方式创建项目</h1><p>可以将每一个模块单独分一个Storyboard，不要将很多控制器放在一个Storyboard中；</p>
<p>iOS9后可以使用Storyboard Reference进行解决</p>
<p>选中要单独出来的控制器，Editor -&gt; Refactor Storyboard -&gt; save as就可以产生一个新的Storyboard中，然后进行些设置，然后绑定下控制器就可以。</p>
<p><code>本项目一开始用纯代码实现了搭建整个项目的框架，但是之前没有用过Storyboard Reference，为了练习这种方式所以后面改用了Storyboard的形式搭建整个项目的框架。</code></p>
<h2 id="调整TabBar的Items"><a href="#调整TabBar的Items" class="headerlink" title="调整TabBar的Items"></a>调整TabBar的Items</h2><p>可以在TFMainViewController的viewWillAppear中，如果在viewDidLoad中系统会自动调整回来。</p>
<p>其实这里设置tabBarItem中的选中图片可以直接在storyboard中实现，另外tabBarItem的enable也可以在storyboard中设置。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 懒加载属性</span></div><div class="line">   <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> imageNames = [<span class="string">"tabbar_home"</span>,<span class="string">"tabbar_message_center"</span>,<span class="string">""</span>,<span class="string">"tabbar_discover"</span>,<span class="string">"tabbar_profile"</span>]</div><div class="line">   </div><div class="line">   <span class="comment">//MARK:- 系统回调函数</span></div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">       </div><div class="line">       <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">       <span class="comment">//调整tabBar中的item</span></div><div class="line">       setupTabBarItems()</div><div class="line">   &#125; </div><div class="line">   <span class="comment">/// 调整tabBar中的item</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">setupTabBarItems</span><span class="params">()</span></span>&#123;</div><div class="line">   </div><div class="line">       <span class="comment">//1.遍历所有的item</span></div><div class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;tabBar.items!.<span class="built_in">count</span>&#123;</div><div class="line">           <span class="comment">//2.获取item</span></div><div class="line">           <span class="keyword">let</span> item = tabBar.items![i]</div><div class="line">           </div><div class="line">           <span class="comment">//3.如果下标值为2，则item不可以与用户交互</span></div><div class="line">           <span class="keyword">if</span> i == <span class="number">2</span> &#123;</div><div class="line">               item.isEnabled = <span class="literal">false</span></div><div class="line">               <span class="keyword">continue</span></div><div class="line">           &#125;</div><div class="line">           <span class="comment">//4.设置其他item的选中时候的图片</span></div><div class="line">           item.selectedImage = <span class="type">UIImage</span>(named: <span class="string">"\(imageNames[i])"</span>+<span class="string">"_highlighted"</span>)</div><div class="line">           </div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>调整tabBar一般都是在viewWillAppear中调整，在viewDidLoad中调整会被系统调整回来</code></p>
<h2 id="tabBar中添加发布按钮"><a href="#tabBar中添加发布按钮" class="headerlink" title="tabBar中添加发布按钮"></a>tabBar中添加发布按钮</h2><p>添加tabBar中间的加号按钮可以在viewDidLoad中添加；</p>
<ul>
<li>创建一个按钮（懒加载）</li>
<li>设置属性</li>
<li>设置位置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 设置发布按钮</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupComposeBtn</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//1.将composeBtn添加到tabBar中</span></div><div class="line">        tabBar.addSubview(composeBtn)</div><div class="line">        <span class="comment">//2.设置属性</span></div><div class="line">        composeBtn.setBackgroundImage(<span class="type">UIImage</span>(named: <span class="string">"tabbar_compose_button"</span>), <span class="keyword">for</span>: .normal)</div><div class="line">        composeBtn.setBackgroundImage(<span class="type">UIImage</span>(named: <span class="string">"tabbar_compose_button_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">        composeBtn.setImage(<span class="type">UIImage</span>(named: <span class="string">"tabbar_compose_icon_add"</span>), <span class="keyword">for</span>: .normal)</div><div class="line">        composeBtn.setImage(<span class="type">UIImage</span>(named: <span class="string">"tabbar_compose_icon_add_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">        composeBtn.sizeToFit()</div><div class="line">        <span class="comment">//3.设置位置</span></div><div class="line">        composeBtn.center = <span class="type">CGPoint</span>(x: tabBar.center.x, y: tabBar.bounds.size.height*<span class="number">0.5</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Swift中的事件监听"><a href="#Swift中的事件监听" class="headerlink" title="Swift中的事件监听"></a>Swift中的事件监听</h3><p><code>事件监听的本质是发送消息,但是发送消息是OC的特性，Swift中已经没有发送消息这个特性了</code></p>
<ul>
<li>OC中是将方法包装成@SEL，然后去类中查找方法列表，根据@SEL找到imp指针（这就是函数的指针），最后执行这个方法；</li>
<li>Swift中将一个函数声明为private，那么该函数将不会被添加到方法列表中，因此一般在extension中的函数不要用private修饰；</li>
<li><code>在private修饰前面加上@objc，那么该函数依然会被添加到函数列表中(Swift3中不是这样了)</code></li>
</ul>
<p>Swift中的Selector有三种写法：</p>
<ul>
<li>Selector(“方法名称”)</li>
<li>“方法名称”</li>
<li>Swift3中出现了新的写法：#selector(类名.方法名称)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例如：</span></div><div class="line">selector(<span class="type">TFMainTabBarController</span>.composeBtnClick)</div></pre></td></tr></table></figure>
<h3 id="创建按钮代码的封装"><a href="#创建按钮代码的封装" class="headerlink" title="创建按钮代码的封装"></a>创建按钮代码的封装</h3><p>这里创建按钮的方法以后可能用到，在此我们可以将其进行整理封装在单独的工具类中，以实现对之前类的扩充；</p>
<p>创建按钮的方法可以封装成一个类方法或者一个构造方法以便以后调用；</p>
<ul>
<li>类方法封装的实现：将方法写在extension UIButton中</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift中类方法是以Class开头的方法，类似于OC中的+开头的类方法</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">tf_creatBtn</span>(<span class="title">imageName</span> : <span class="title">String</span> , <span class="title">bgImageName</span> : <span class="title">String</span>) -&gt; <span class="title">UIButton</span> </span>&#123;</div><div class="line">        <span class="comment">//1.创建按钮</span></div><div class="line">        <span class="keyword">let</span> btn = <span class="type">UIButton</span>()</div><div class="line">        <span class="comment">//2.设置按钮的属性</span></div><div class="line">        btn.setImage(<span class="type">UIImage</span>(named : imageName), <span class="keyword">for</span>: .normal)</div><div class="line">        btn.setImage(<span class="type">UIImage</span>(named : imageName + <span class="string">"_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">        btn.setBackgroundImage(<span class="type">UIImage</span>(named : bgImageName), <span class="keyword">for</span>: .normal)</div><div class="line">        btn.setBackgroundImage(<span class="type">UIImage</span>(named : bgImageName + <span class="string">"_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">        btn.sizeToFit()</div><div class="line">        <span class="comment">//返回按钮</span></div><div class="line">        <span class="keyword">return</span> btn</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>构造方法封装的实现：Swift中还是比较推荐使用构造函数实现对象的创建的</li>
</ul>
<p>使用convenience修饰的函数称为便利构造函数，便利构造函数一般用在对系统的类的构造方法进行扩充时使用</p>
<p>便利构造函数的特点：</p>
<ul>
<li>一般写在extension里面</li>
<li>init前面有convenience修饰</li>
<li>在便利构造函数中要明确调用self.init() </li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数实现对象的初始化</span></div><div class="line">    <span class="comment">/// 根据按钮图片和按钮的背景图片实现按钮对象的创建</span></div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(imageName : <span class="type">String</span> , bgImageName : <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</div><div class="line">        setImage(<span class="type">UIImage</span>(named : imageName), <span class="keyword">for</span>: .normal)</div><div class="line">        setImage(<span class="type">UIImage</span>(named : imageName + <span class="string">"_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">        setBackgroundImage(<span class="type">UIImage</span>(named : bgImageName), <span class="keyword">for</span>: .normal)</div><div class="line">        setBackgroundImage(<span class="type">UIImage</span>(named : bgImageName + <span class="string">"_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">        sizeToFit()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="访客视图的逻辑"><a href="#访客视图的逻辑" class="headerlink" title="访客视图的逻辑"></a>访客视图的逻辑</h1><p>定义一个变量isLogin来记录用户的登录状态；</p>
<ul>
<li>isLogin = false -&gt; 展示访客视图</li>
<li>isLogin = ture -&gt; 展示正常的信息</li>
</ul>
<p>因为首页、消息中心、发现、我这四个模块中都存在访客视图且访客视图不一致，都要进行判断是否登录以及显示访客视图，所以应该在将这四个模块的控制器抽取一个父控制器TFBaseViewController，在这个父控制器中实现登录状态的判断以及访客视图的显示；</p>
<p>然后通过Xib实现访客视图的显示；</p>
<h2 id="布局并设置访客视图的信息"><a href="#布局并设置访客视图的信息" class="headerlink" title="布局并设置访客视图的信息"></a>布局并设置访客视图的信息</h2><h3 id="布局访客视图"><a href="#布局访客视图" class="headerlink" title="布局访客视图"></a>布局访客视图</h3><p>首页中的访客视图内容比较多，所以按照访客视图来实现比较合理；</p>
<p><code>快捷键：Command + = 可以使UIImageView与图片等大小，不至于被拉伸变形</code></p>
<p>转盘下面的背景的虚化是通过上面覆盖渐进的图片实现的；然后在Xib中进行合适的布局就可以了；</p>
<h3 id="设置访客视图"><a href="#设置访客视图" class="headerlink" title="设置访客视图"></a>设置访客视图</h3><p>在TFVisitorView中抽取一个函数让其他的几个主要的控制器可以调用这个函数来设置访客视图中的内容</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///设置访客视图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupVisitorViewInfo</span><span class="params">(iconName : String ,tip :String)</span></span>&#123;</div><div class="line">    </div><div class="line">        iconView.image = <span class="type">UIImage</span>(named: iconName)</div><div class="line">        tipsLabel.text = tip</div><div class="line">        rotationView.isHidden = <span class="literal">true</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>另外，首页中的访客视图有转盘需要加动画，也需要通过核心动画来添加动画实现</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///添加rotationView的动画</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addRotationViewAnimation</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//1.创建动画:CABasicAnimation或者CAKeyframeAnimation来实现</span></div><div class="line">        <span class="keyword">let</span> rotationAnimation = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"transform.rotation.z"</span>)</div><div class="line">        <span class="comment">//2.设置动画的属性</span></div><div class="line">        rotationAnimation.fromValue = <span class="number">0</span></div><div class="line">        rotationAnimation.toValue = <span class="type">M_PI</span> * <span class="number">2</span></div><div class="line">        rotationAnimation.repeatCount = <span class="type">MAXFLOAT</span></div><div class="line">        rotationAnimation.duration = <span class="number">5</span></div><div class="line">        rotationAnimation.isRemovedOnCompletion = <span class="literal">false</span></div><div class="line">        <span class="comment">//3.将动画添加到layer中</span></div><div class="line">        rotationView.layer.add(rotationAnimation, forKey: <span class="literal">nil</span>)    </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>注意：CA存在动画所在的view下次重新出现时，动画就会停止的问题要解决</code></p>
<p>解决办法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置动画结束后将动画移除的属性为false</span></div><div class="line">rotationAnimation.isRemovedOnCompletion =<span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="导航栏上左右Item按钮的点击时间处理"><a href="#导航栏上左右Item按钮的点击时间处理" class="headerlink" title="导航栏上左右Item按钮的点击时间处理"></a>导航栏上左右Item按钮的点击时间处理</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///设置导航栏左右的注册、登录按钮</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupNavigationItem</span><span class="params">()</span></span>&#123;</div><div class="line">        navigationItem.leftBarButtonItem = <span class="type">UIBarButtonItem</span>(title: <span class="string">"注册"</span>, style: .plain , target: <span class="keyword">self</span>, action:#selector(<span class="type">TFBaseViewController</span>.registerBtnClick))</div><div class="line">        navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(title: <span class="string">"登录"</span>, style: .plain , target: <span class="keyword">self</span>, action:#selector(<span class="type">TFBaseViewController</span>.loginBtnClick))</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>另外访客视图中的注册、登录按钮的点击不要在TFVisitorView中监听，因为在这里监听比较麻烦，可以在TFBaseViewController中监听比较方便</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//监听访客视图中的注册、登录按钮的点击</span></div><div class="line">visitorView.registerBtn.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">TFBaseViewController</span>.registerBtnClick), <span class="keyword">for</span>: .touchUpInside)</div><div class="line">visitorView.loginBtn.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">TFBaseViewController</span>.loginBtnClick), <span class="keyword">for</span>: .touchUpInside)</div></pre></td></tr></table></figure>
<p>此时导航栏上的item按钮文字的颜色不是我们想要的颜色，可以在appdelegate中统一设置</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置navigationbar全局颜色</span></div><div class="line"><span class="type">UINavigationBar</span>.appearance().tintColor = <span class="type">UIColor</span>.orange</div></pre></td></tr></table></figure>
<h2 id="首页导航栏的设置"><a href="#首页导航栏的设置" class="headerlink" title="首页导航栏的设置"></a>首页导航栏的设置</h2><h3 id="设置左右两个UIBarButtonItem"><a href="#设置左右两个UIBarButtonItem" class="headerlink" title="设置左右两个UIBarButtonItem"></a>设置左右两个UIBarButtonItem</h3><p>这里可以抽取一个UIBarButtonItem的一个便利构造函数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///通过图片名称来创建UIBarButtonItem（方法二）</span></div><div class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(imageName :<span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">let</span> btn = <span class="type">UIButton</span>()</div><div class="line">    btn.setImage(<span class="type">UIImage</span>(named : imageName), <span class="keyword">for</span>: .normal)</div><div class="line">    btn.setImage(<span class="type">UIImage</span>(named : imageName + <span class="string">"_highlighted"</span>), <span class="keyword">for</span>: .highlighted)</div><div class="line">    btn.sizeToFit()</div><div class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(customView : btn)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置中间的titleView"><a href="#设置中间的titleView" class="headerlink" title="设置中间的titleView"></a>设置中间的titleView</h2><p>这里的titleView的图标在右边，所有要自己自定义按钮，对按钮进行布局</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</div><div class="line">    <span class="comment">//要先调用super</span></div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line">    setImage(<span class="type">UIImage</span>(named : <span class="string">"navigationbar_arrow_down"</span>), <span class="keyword">for</span>: .normal)</div><div class="line">    setImage(<span class="type">UIImage</span>(named : <span class="string">"navigationbar_arrow_up"</span>), <span class="keyword">for</span>: .selected)</div><div class="line">    setTitleColor(<span class="type">UIColor</span>.darkGray, <span class="keyword">for</span>: .normal)</div><div class="line">    sizeToFit()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//swift中规定：重写了init(frame: frame)或者init方法，必须重写init?(coder aDecoder: NSCoder)</span></div><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">    <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//swift中可以直接修改对象、结构体中的成员变量的属性的</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.layoutSubviews()</div><div class="line">    titleLabel!.frame.origin.x = <span class="number">0</span></div><div class="line">    imageView!.frame.origin.x = titleLabel!.frame.size.width + <span class="number">10</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义弹出的控制器"><a href="#自定义弹出的控制器" class="headerlink" title="自定义弹出的控制器"></a>自定义弹出的控制器</h2><p>这里要自定义控制器并设置背景图片<br><code>注意：平时present(popoverVC, animated: true, completion: nil)时，会让改控制器下面的东西都移除，要设置控制器的一个属性就不会这样了</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义转场动画</span></div><div class="line">popoverVC.modalPresentationStyle = .custom</div></pre></td></tr></table></figure>
<p>要设置转场动画就要设置转场代理，要遵守协议UIViewControllerTransitioningDelegate</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">popoverVC.transitioningDelegate = <span class="keyword">self</span></div></pre></td></tr></table></figure>
<h3 id="改变弹出View的frame"><a href="#改变弹出View的frame" class="headerlink" title="改变弹出View的frame"></a>改变弹出View的frame</h3><p>这里要自定义UIPresentationController并且重写系统的containerViewWillLayoutSubviews这个方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.containerViewWillLayoutSubviews()</div><div class="line"></div><div class="line">    <span class="comment">//1.设置弹出View的frame</span></div><div class="line">    presentedView?.frame = <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">55</span>, width: <span class="number">180</span> , height: <span class="number">250</span>)</div><div class="line">    <span class="comment">//2.添加HUD</span></div><div class="line">    setupCoverView()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置弹出View的frame:</p>
<p>之前设置PopoverVC的View的frame是在TFPopPresentationController中实现的，但是这样做不合理，应该将其暴露在外面，可以在首页控制器中可以设置，可以将首页中设置的frame传递到TFPopoverAnimator，然后再传递到TFPopPresentationController；</p>
<p>设置的frame流程：<code>TFHomeViewController</code> -&gt; <code>TFPopoverAnimator</code> -&gt; <code>TFPopPresentationController</code></p>
<h3 id="设置HUD"><a href="#设置HUD" class="headerlink" title="设置HUD"></a>设置HUD</h3><p>这里自定义的UIPresentationController控制器的View是加载在containerView上面的，所以在可以把HUD插入到containerView上面并且放在tableView的下面</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///设置蒙版</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">setupCoverView</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">//1.添加HUD</span></div><div class="line">      containerView?.insertSubview(coverView, at: <span class="number">0</span>)</div><div class="line"></div><div class="line">      <span class="comment">//2.设置HUD属性</span></div><div class="line">      coverView.backgroundColor = <span class="type">UIColor</span>(white: <span class="number">0.5</span> , alpha: <span class="number">0.2</span>)</div><div class="line">      coverView.frame = containerView!.bounds</div><div class="line"></div><div class="line">      <span class="comment">//3.添加手势</span></div><div class="line">      <span class="keyword">let</span> tapGes = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(<span class="type">TFPopPresentationController</span>.tapCoverView))</div><div class="line">      coverView.addGestureRecognizer(tapGes)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>然后把点击HUD时手势函数写好</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///点击手势</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tapCoverView</span><span class="params">()</span></span>&#123;</div><div class="line">    presentedViewController.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"tapCoverView--点击"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="转场动画的实现"><a href="#转场动画的实现" class="headerlink" title="转场动画的实现"></a>转场动画的实现</h3><p>转场动画的实现要对实现UIViewControllerTransitioningDelegate协议，这里可以让TFHomeViewController实现相关的协议；这里设置相关的代理，并实现代理方法；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 自定义转场动画代理方法的实现</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TFHomeViewController</span> : <span class="title">UIViewControllerTransitioningDelegate</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//目的：改变frame</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">presentationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController?, source: UIViewController)</span></span> -&gt; <span class="type">UIPresentationController</span>? &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">TFPopPresentationController</span>(presentedViewController: presented, presenting: presenting)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//目的：自定义弹出动画</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</div><div class="line">      isPresented = <span class="literal">true</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">//目的：自定义消失动画</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forDismissed dismissed: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</div><div class="line">      isPresented = <span class="literal">false</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的弹出、消失动画可以符合协议：UIViewControllerAnimatedTransitioning，然后实现相关的协议方法；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 弹出或者消失动画代理方法的实现</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TFHomeViewController</span> : <span class="title">UIViewControllerAnimatedTransitioning</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">TimeInterval</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.5</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//获取转场的上下文:可以通过上下文获取弹出的View和消失的View</span></div><div class="line">    <span class="comment">//UITransitionContextViewKey.from:获取消失的View</span></div><div class="line">    <span class="comment">//UITransitionContextViewKey.to:获取弹出的View</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</div><div class="line">        </div><div class="line">        isPresented ? animationForPresentedView(using: transitionContext) : animationForDismissedView(using: transitionContext)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">///弹出动画</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">animationForPresentedView</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span>&#123;</div><div class="line">        <span class="comment">//1.获取弹出的View</span></div><div class="line">        <span class="keyword">let</span> presentedView = transitionContext.view(forKey: <span class="type">UITransitionContextViewKey</span>.to)!</div><div class="line">        <span class="comment">//2.自定义转场:将弹出的View添加到ContainerView中;</span></div><div class="line">        transitionContext.containerView.addSubview(presentedView)</div><div class="line">        <span class="comment">//3.执行动画</span></div><div class="line">        <span class="comment">//设置锚点</span></div><div class="line">        presentedView.layer.anchorPoint = <span class="type">CGPoint</span>(x: <span class="number">0.5</span>, y: <span class="number">0</span>)</div><div class="line">        presentedView.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.0</span> , y: <span class="number">0.0</span>)</div><div class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="keyword">self</span>.transitionDuration(using: transitionContext), animations: &#123;</div><div class="line">            </div><div class="line">            presentedView.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line">        &#125;) &#123; (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">            <span class="comment">//必须告诉上下文已经完成了动画</span></div><div class="line">            transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">///消失动画</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">animationForDismissedView</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span>&#123;</div><div class="line">    </div><div class="line">        <span class="comment">//1.获取消失的View</span></div><div class="line">        <span class="keyword">let</span> dismissedView = transitionContext.view(forKey: <span class="type">UITransitionContextViewKey</span>.from)!</div><div class="line"></div><div class="line">        <span class="comment">//2.执行动画</span></div><div class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="keyword">self</span>.transitionDuration(using: transitionContext), animations: &#123;</div><div class="line">            </div><div class="line">            dismissedView.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.0</span> , y: <span class="number">0.0001</span>)</div><div class="line">        &#125;) &#123; (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">            dismissedView.removeFromSuperview()</div><div class="line">            <span class="comment">//必须告诉上下文已经完成了动画</span></div><div class="line">            transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义转场动画的封装抽取"><a href="#自定义转场动画的封装抽取" class="headerlink" title="自定义转场动画的封装抽取"></a>自定义转场动画的封装抽取</h3><p>之前关于Popover相关的动画以及代理方法的实现都在TFHomeViewController中加以实现，这样可能导致首页的控制器中的代码量会越来越多，影响以后的维护，为了减少首页控制器中代码量，在此将Popover相关的动画代理方法的实现都抽取出来，新建一个类TFPopoverAnimator，对其相关的代理方法进行封装；</p>
<p>然后在首页中懒加载一个TFPopoverAnimator类型的对象，然后设置popoverVC的代理为这个对象；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">popoverVC.transitioningDelegate = popoverAnimator</div></pre></td></tr></table></figure>
<p>这样就可以使首页控制器中的代码更加简洁明了；</p>
<h3 id="改变titleBtn的状态"><a href="#改变titleBtn的状态" class="headerlink" title="改变titleBtn的状态"></a>改变titleBtn的状态</h3><p>之前改变标题按钮的状态实在首页控制器中进行的，而执行弹出和消失动画是在TFPopoverAnimator中实现的，这样不合理，标题按钮的状态不能根据弹出或者消失改变标题按钮的状态；</p>
<p>现在要实现PopoverVC弹出或者消失动画执行的同时改变标题按钮的状态，这样就要实现消息从TFPopoverAnimator到TFHomeViewController的逆向传递；</p>
<p>所以，这里考虑通过闭包来实现；</p>
<ul>
<li>在TFPopoverAnimator中定义一个闭包属性</li>
<li>在TFPopoverAnimator的弹出或者消失动画的时候调用闭包，传递是否是弹出动画</li>
<li>在TFPopoverAnimator中自定义构造函数让在创建对象时就传入闭包</li>
<li>在TFHomeViewController中懒加载对象时就实现闭包中的动作</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 闭包</span></div><div class="line"><span class="keyword">var</span> presentedCallBack : ((<span class="number">_</span> isPresented : <span class="type">Bool</span>) -&gt; ())?</div><div class="line"></div><div class="line"><span class="comment">//MARK:- 自定义构造函数</span></div><div class="line"><span class="comment">//Attention:如果自定义了一个构造函数，但是没有对父类的构造函数（init）进行重写;那么自定义的构造函数会覆盖默认的构造函数</span></div><div class="line"><span class="keyword">init</span>(presentedCallBack :@escaping ( <span class="number">_</span> isPresented : <span class="type">Bool</span>) -&gt; ()) &#123;</div><div class="line">    <span class="keyword">self</span>.presentedCallBack = presentedCallBack</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动画执行时</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">presentedCallBack!(isPresented)</div></pre></td></tr></table></figure>
<p>首页中创建Popover动画对象</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//两个地方需要用self:1.如果在一个函数中出现了歧义；2.在闭包中使用当前对象的属性和函数</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> popoverAnimator : <span class="type">TFPopoverAnimator</span> = <span class="type">TFPopoverAnimator</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>](isPresented) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.titleBtn.isSelected = isPresented</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意：在闭包中如果使用当前对象的属性或者调用函数也需要在前面加上self</code></p>
<h1 id="集成cocoapods"><a href="#集成cocoapods" class="headerlink" title="集成cocoapods"></a>集成cocoapods</h1><p>后面登录等功能要发送网络请求等，所以在此通过cocoapods来集成第三方框架；</p>
<p>本项目中集成的第三方框架有：</p>
<ul>
<li>AFNetworking</li>
<li>SVProgressHUD</li>
<li>SDWebImage</li>
<li>SnapKit：本框架是Masonry框架团队针对Swift全新开发的一套自动布局框架</li>
</ul>
<p>通过终端进入相应的项目文件夹，然后使用<code>pod init</code>命令来初始化自动生成相关的Podfile文件；</p>
<p>编辑Podfile文件，然后使用<code>pod install</code>命令进行集成第三方库；</p>
<p>当然，如果不希望更新本地的第三方版本，可以使用命令<code>pod install --no-repo-update</code></p>
<p><code>注意：</code></p>
<p>这里最好不要用文本编辑器打开刚创建的Podfile文件，因为可能会出现引号相关问题，一般不容易debug。</p>
<p>最好在终端使用vim进行编辑；</p>
<p><img src="/images/cocoapodsPodfile.png" alt="cocoapodsPodfile"></p>
<p>Swift中使用的是.framework的动态库，Swift不支持静态库以及.a</p>
<p><code>在这里遇到了一个错误</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MacBook-Pro:SinaWeibo taofei$ pod install</div><div class="line">Analyzing dependencies</div><div class="line">Downloading dependencies</div><div class="line">Installing AFNetworking (3.1.0)</div><div class="line">Installing SDWebImage (3.8.2)</div><div class="line">Installing SVProgressHUD (2.1.2)</div><div class="line">Installing SnapKit (3.0.2)</div><div class="line">Generating Pods project</div><div class="line">Abort trap: 6</div></pre></td></tr></table></figure>
<p>stackoverflow上貌似很多人是cocoapods的版本问题，而我在执行完</p>
<p><img src="/images/cocoapodsError.png" alt="cocoapodsError"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods</div></pre></td></tr></table></figure>
<p>后不能执行</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>
<p>然而又报错了</p>
<p><img src="/images/cocoapodsInstallError.png" alt="cocoapodsInstallError"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:  While executing gem ... (Errno::EPERM)</div><div class="line">    Operation not permitted - /usr/bin/xcodeproj</div></pre></td></tr></table></figure>
<p>新报的这个错误使用下面这条命令就可以进行解决</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods --pre</div></pre></td></tr></table></figure>
<p>用他来代替：sudo gem install cocoa pods ，这样就完美解决了。</p>
<p>这次遇到的Abort trap: 6错误果然是因为cocoapods的版本问题引起的，写在后重新安装即可；如果重新安装时出现上面类似的错误，使用上面的命令替换之前的安装命令一般就可以解决了；到此本项目的第三方库管理的任务就已经完成了，以后要是要添加第三方库建议在终端编辑添加。</p>
<p>另外，通过cocoapods集成的第三方和我们的自己写的代码不在一个包里面，所以在使用第三方时要将其导入；</p>
<h1 id="封装AFNetwork"><a href="#封装AFNetwork" class="headerlink" title="封装AFNetwork"></a>封装AFNetwork</h1><h2 id="AFNetwork封装成单例"><a href="#AFNetwork封装成单例" class="headerlink" title="AFNetwork封装成单例"></a>AFNetwork封装成单例</h2><p>一般项目中使用的发送网络请求的类都是在第三方的基础上进行封装的。本项目中用到的网路请求相关的工具类时在AFNetwork基础上进行封装的；</p>
<p>首先，我们在AFHTTPSessionManager基础上来封装一个类：TFNetworkTools。</p>
<p>一般情况下我们会将我们自己封装的网络请求工具类设计成一个单例，下面我们就在Swift中设计一个单例：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AFNetworking</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFNetworkTools</span>: <span class="title">AFHTTPSessionManager</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//let是线程安全的</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shareInstance : <span class="type">TFNetworkTools</span> = <span class="type">TFNetworkTools</span>()</div><div class="line">    <span class="comment">//这样就可以了，Swift中写单例就是这么简单、方便</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>iOS开发中单例的两种情况：</p>
<ul>
<li>通过shareInstance拿到的永远都是一个单例；例如：NSUserdefault.standarUserDefaults() </li>
<li>不管三七二十一，永远只有一个实例；</li>
</ul>
<p>我们设计的就是第一种。</p>
<h2 id="AFNetwork封装request请求"><a href="#AFNetwork封装request请求" class="headerlink" title="AFNetwork封装request请求"></a>AFNetwork封装request请求</h2><h3 id="配置网络请求参数"><a href="#配置网络请求参数" class="headerlink" title="配置网络请求参数"></a>配置网络请求参数</h3><p>在测试封装的网络请求时，出现了错误：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">App</span> <span class="type">Transport</span> <span class="type">Security</span> has blocked a cleartext <span class="type">HTTP</span> (http:<span class="comment">//) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.</span></div><div class="line"><span class="comment">//发送网络请求失败</span></div></pre></td></tr></table></figure>
<p>我们可以在Info.plist中添加App Transport Security Settings，再添加Allow Arbitrary Loads，然后将默认的NO改成YES就可以了。</p>
<h4 id="改写网络请求单例"><a href="#改写网络请求单例" class="headerlink" title="改写网络请求单例"></a>改写网络请求单例</h4><p>如果我们需要测试用httpbin的话，那么最好对上面封装的单例进行改变；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFNetworkTools</span>: <span class="title">AFHTTPSessionManager</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//let是线程安全的</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shareInstance : <span class="type">TFNetworkTools</span> = &#123;</div><div class="line">        <span class="keyword">let</span> tools = <span class="type">TFNetworkTools</span>()</div><div class="line">        tools.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/html"</span>)</div><div class="line">        <span class="keyword">return</span> tools</div><div class="line">    &#125;()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="封装请求方法"><a href="#封装请求方法" class="headerlink" title="封装请求方法"></a>封装请求方法</h3><p>网络请求一般有GET和POST两种，我们最好定义枚举类型来区分这两种类型；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义枚举类型</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TFRequestType</span> : <span class="title">String</span></span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">GET</span> = <span class="string">"GET"</span></div><div class="line">    <span class="keyword">case</span> <span class="type">POST</span> = <span class="string">"POST"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后根据传过来的参数看来执行封装后的GET或者POST方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 封装请求方法</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TFNetworkTools</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tf_getRequest</span><span class="params">(methodType : TFRequestType, URLString : String,parameters :[String : Any?])</span></span>&#123;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> methodType == .<span class="type">GET</span> &#123;</div><div class="line">            <span class="keyword">get</span>(<span class="type">URLString</span>, parameters: parameters, progress: <span class="literal">nil</span>, success: &#123; (task : <span class="type">URLSessionDataTask</span>, result :<span class="type">Any</span>?) <span class="keyword">in</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"发送网络请求成功~"</span>)</div><div class="line">                <span class="built_in">print</span>(result <span class="keyword">as</span> <span class="type">Any</span>)</div><div class="line">            &#125;) &#123; (task : <span class="type">URLSessionDataTask</span>?, error : <span class="type">Error</span>) <span class="keyword">in</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"发送网络请求失败"</span>)</div><div class="line">                <span class="built_in">print</span>(error)</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> methodType == .<span class="type">POST</span>&#123;</div><div class="line">            post(<span class="type">URLString</span>, parameters: parameters, progress: <span class="literal">nil</span>, success: &#123; (task : <span class="type">URLSessionDataTask</span>, result : <span class="type">Any</span>?) <span class="keyword">in</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"发送网络请求成功~"</span>)</div><div class="line">                <span class="built_in">print</span>(result <span class="keyword">as</span> <span class="type">Any</span>)</div><div class="line">            &#125;) &#123; (task : <span class="type">URLSessionDataTask</span>?, error : <span class="type">Error</span>) <span class="keyword">in</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"发送网络请求失败"</span>)</div><div class="line">                <span class="built_in">print</span>(error)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>网络请求：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试网络请求</span></div><div class="line">        <span class="type">TFNetworkTools</span>.shareInstance.tf_getRequest(methodType: .<span class="type">POST</span>, <span class="type">URLString</span>:  <span class="string">"http://httpbin.org/post"</span>, parameters: [<span class="string">"name"</span> : <span class="string">"taofei"</span> ,<span class="string">"age"</span> : <span class="number">18</span>])</div></pre></td></tr></table></figure>
<h3 id="封装网络请求回调"><a href="#封装网络请求回调" class="headerlink" title="封装网络请求回调"></a>封装网络请求回调</h3><p>之前获得的数据的打印都在工具类中进行，并没有在真正调用网络请求时使用；所以我们要在自己封装的请求方法中增加一个finished的闭包，将网络请求的结果或者错误传回来；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///发送GET或者POST网络请求的封装</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tf_request</span><span class="params">(methodType : TFRequestType, URLString : String,parameters :[String : Any?],finished :@escaping <span class="params">(<span class="number">_</span> reslut :Any? ,<span class="number">_</span> error : Error?)</span></span></span>-&gt;())&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//1.定义请求成功的回调</span></div><div class="line">    <span class="keyword">let</span> successCallBack = &#123; (task : <span class="type">URLSessionDataTask</span>, result :<span class="type">Any</span>?) <span class="keyword">in</span></div><div class="line">        finished(result,<span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2.定义请求失败的回调</span></div><div class="line">    <span class="keyword">let</span> failureCallBack = &#123; (task : <span class="type">URLSessionDataTask</span>?, error : <span class="type">Error</span>) <span class="keyword">in</span></div><div class="line">        finished(<span class="literal">nil</span>, error)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3.发送网络请求</span></div><div class="line">    <span class="keyword">if</span> methodType == .<span class="type">GET</span> &#123;<span class="comment">//GET请求</span></div><div class="line">        <span class="keyword">get</span>(<span class="type">URLString</span>, parameters: parameters, progress: <span class="literal">nil</span>, success: successCallBack, failure: failureCallBack)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> methodType == .<span class="type">POST</span>&#123;<span class="comment">//POST请求</span></div><div class="line">        post(<span class="type">URLString</span>, parameters: parameters, progress: <span class="literal">nil</span>, success: successCallBack, failure: failureCallBack)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="授权登录的实现"><a href="#授权登录的实现" class="headerlink" title="授权登录的实现"></a>授权登录的实现</h1><p>因为并非新浪微博的官方开发人员，本项目中要想实现登录要使用新浪提供的OAuth授权，大致步骤如下：</p>
<ul>
<li>成为新浪开发者</li>
<li>在新浪开放平台创建一个应用程序<ul>
<li>获取AppKey</li>
<li>获取AppSecret</li>
<li>获取回调地址</li>
</ul>
</li>
<li>开始授权<ul>
<li>加载新浪的网页(让用户登录)</li>
<li>获取code（可以用来换取AccessToken）</li>
<li>获取AccessToken</li>
</ul>
</li>
<li>开始请求数据</li>
</ul>
<h2 id="在新浪开发者中心创建应用"><a href="#在新浪开发者中心创建应用" class="headerlink" title="在新浪开发者中心创建应用"></a>在新浪开发者中心创建应用</h2><p>在新浪开发者中心登录我们自己的新浪微博账号，成为开发者后创建移动应用，获取AppKey和AppSecret；</p>
<p>本项目的Appkey：407405889，AppSecret：e718655baa69710c7456074d89fbda40，然后需要的回调地址需要我们自己去填写，找到应用信息，再在高级信息中填写就可以了，本项目的回调地址是本博客的地址。下面我们就要去获取让用户登录的新浪微博的登录网页，在文档-&gt;OAuth2.0授权认证，这里要获取AccessToken；点击请求用户授权Token，因为可以使用GET请求，所以我们可以在浏览器地址栏输入相应地址进行测试。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.weibo.com/oauth2/authorize?client_id=407405889&amp;redirect_uri=http://taofei.me</div></pre></td></tr></table></figure>
<p>这样就可以来到我们的授权登录网页。</p>
<p><img src="/images/OAuthLogin.png" alt="授权登录网页"></p>
<p>然后后进行授权，授权成功后就可以跳转到我们的回调地址，注意这时的浏览器地址栏的地址就发生了变化，在博客地址后面增加了code=dc3fecaa1a70b064eb779953ad558708，此时的code就是我们用来换取AccessToken的；</p>
<p><img src="/images/OAUTHing.png" alt="进行授权"></p>
<p><img src="/images/OAuthLoginCallBack.png" alt="授权完成后的回调"></p>
<h2 id="授权登录"><a href="#授权登录" class="headerlink" title="授权登录"></a>授权登录</h2><p>因为登录界面里面只需要加载一个网页，所以这里我们可以利用Xib快速创建一个授权登录的控制器，通过代码设置下导航栏的item和标题，然后监听下item的点击事件就可以了；</p>
<h3 id="加载登录页面和执行js代码"><a href="#加载登录页面和执行js代码" class="headerlink" title="加载登录页面和执行js代码"></a>加载登录页面和执行js代码</h3><h4 id="加载登录页面"><a href="#加载登录页面" class="headerlink" title="加载登录页面"></a>加载登录页面</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///加载授权登录页面</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadOAuthWebView</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//1.获取登录页面的URLString</span></div><div class="line">    <span class="keyword">let</span> urlString = <span class="string">"https://api.weibo.com/oauth2/authorize?client_id=\(app_key)&amp;redirect_uri=\(redirect_uri)"</span></div><div class="line">    <span class="type">TFLog</span>(urlString)</div><div class="line">    <span class="comment">//2.创建对应的NSURL</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: urlString)<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3.创建NSURLRequest对象</span></div><div class="line">    <span class="keyword">let</span> request = <span class="type">NSURLRequest</span>(url: url <span class="keyword">as</span> <span class="type">URL</span>)</div><div class="line"></div><div class="line">    <span class="comment">//4.加载request对象</span></div><div class="line">    <span class="type">OAuthLoginWebView</span>.loadRequest(request <span class="keyword">as</span> <span class="type">URLRequest</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在整个项目中常用的或者可能用到的不变的量我们最好单独写在一个文件中，这样我们就能像之前在OC中使用宏定义一样，而且Swift中在单独一个文件中的常量的定义使用起来更加方便；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 授权登录中的常量</span></div><div class="line"><span class="keyword">let</span> app_key = <span class="string">"407405889"</span></div><div class="line"><span class="keyword">let</span> app_secret = <span class="string">"e718655baa69710c7456074d89fbda40"</span></div><div class="line"><span class="keyword">let</span> redirect_uri = <span class="string">"http://taofei.me"</span></div></pre></td></tr></table></figure>
<h4 id="在Swift中执行JS代码"><a href="#在Swift中执行JS代码" class="headerlink" title="在Swift中执行JS代码"></a>在Swift中执行JS代码</h4><p>webView在加载过程中可能在屏幕上面显示空白的信息，应该在开始进行加载webView的同时就提示用户正在加载页面。要想实现此功能应该设置webView的代理，并且实现其代理的方法。其中，设置代理可以在Xib中直接设置就可以了，代理方法的实现我们可以在控制器中增加一个extension，然后在里面实现webView的代理方法。</p>
<p>另外填充功能要想实现必须改变我们刚刚加载的网页里面的内容，此时我们就要利用JS来实现了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///填充</span></div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">fillItemClick</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//1.书写JavaScript代码</span></div><div class="line">        <span class="keyword">let</span> jsCode = <span class="string">"document.getElementById('userId').value='745838164@qq.com';document.getElementById('passwd').value=''"</span></div><div class="line">        <span class="comment">//2.执行JavaScript代码</span></div><div class="line">        <span class="type">OAuthLoginWebView</span>.stringByEvaluatingJavaScript(from: jsCode)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中jsCode里面的字符串就是要指向的js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'userId'</span>).value=<span class="string">'745838164@qq.com'</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'passwd'</span>).value=<span class="string">''</span></div></pre></td></tr></table></figure>
<h3 id="获取授权的code"><a href="#获取授权的code" class="headerlink" title="获取授权的code"></a>获取授权的code</h3><p>我们要获取的授权code可以在回调的网页的地址栏中找到，我们要拿到回调后跳转的那个网页。其实，webView加载每一个网页都会调用shouldStartLoadxxx这个函数，我们在这里通过URLRequest获取url，然后判断下其中是否包含“code=”，如果包含说明该URL中有code，我们对这个URL进行字符串截取就可以了获得我们想要的code了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///当准备加载某一个页面时会执行该方法，其返回值时Bool类型；true,继续加载，false,不会继续加载</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="comment">//1.获取加载网页的URL</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url = request.url <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.获取url中的字符串</span></div><div class="line">    <span class="keyword">let</span> urlString = url.absoluteString</div><div class="line">    <span class="comment">//3.判断该字符串中是否包含code</span></div><div class="line">    <span class="keyword">guard</span> urlString.<span class="built_in">contains</span>(<span class="string">"code="</span>) <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//4.将code截取出来</span></div><div class="line">    <span class="keyword">let</span> code = urlString.components(separatedBy: <span class="string">"code="</span>).last!</div><div class="line">    <span class="built_in">print</span>(urlString)</div><div class="line">    <span class="built_in">print</span>(code)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取AccessToken"><a href="#获取AccessToken" class="headerlink" title="获取AccessToken"></a>获取AccessToken</h3><p>因为本项目中绝大多数网络请求都要使用AccessToken，我们可以将获取AccessToken的函数封装到TFNetworkTools这个网络请求的工具类中，以便以后调用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 请求AccessToken</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TFNetworkTools</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getAccessToken</span><span class="params">(code : String,finished :@escaping <span class="params">(<span class="number">_</span> result : [String : Any]?, <span class="number">_</span> error : Error?)</span></span></span>-&gt;())&#123;</div><div class="line">        <span class="comment">//1.获取请求的URL</span></div><div class="line">        <span class="keyword">let</span> urlString = <span class="string">"https://api.weibo.com/oauth2/access_token"</span></div><div class="line">        </div><div class="line">        <span class="comment">//2.获取请求的参数</span></div><div class="line">        <span class="keyword">let</span> params = [<span class="string">"client_id"</span>:app_key , <span class="string">"client_secret"</span>:app_secret ,<span class="string">"grant_type"</span>:<span class="string">"authorization_code"</span> , <span class="string">"redirect_uri"</span>:redirect_uri, <span class="string">"code"</span>:code]</div><div class="line">        </div><div class="line">        <span class="comment">//3.发送请求</span></div><div class="line">        tf_request(methodType: .<span class="type">POST</span>, <span class="type">URLString</span>: urlString, parameters: params) &#123; (result, error) <span class="keyword">in</span></div><div class="line">            finished(result <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">Any</span>], error)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建TFUSerAccount类"><a href="#创建TFUSerAccount类" class="headerlink" title="创建TFUSerAccount类"></a>创建TFUSerAccount类</h3><p> 上面已经能够获取到AccessToken相关的值，我们在此创建TFUSerAccount来记录获取到的相关信息。</p>
<ul>
<li>expires_in：access_token的生命周期，单位是秒数。</li>
<li>remind_in：access_token的生命周期（该参数即将废弃，开发者请使用expires_in）。</li>
<li>access_token：用户授权的唯一票据，用于调用微博的开放接口，同时也是第三方应用验证微博用户登录的唯一票据，第三方应用应该用该票据和自己应用内的用户建立唯一影射关系，来识别登录状态，不能使用本返回值里的UID字段来做登录识别。</li>
<li>uid：授权用户的UID，本字段只是为了方便开发者，减少一次user/show接口调用而返回的，第三方应用不能用此字段作为用户登录状态的识别，只有access_token才是用户授权的唯一票据。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 自定义构造函数</span></div><div class="line"><span class="keyword">init</span>(dict : [<span class="type">String</span> : <span class="type">Any</span>]) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    setValuesForKeys(dict)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MARK:- 重写函数</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forUndefinedKey key: String)</span></span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//MARK:- 重写description</span></div><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span>&#123;</div><div class="line">    <span class="keyword">return</span> dictionaryWithValues(forKeys: [<span class="string">"access_token"</span>,<span class="string">"expires_in"</span>,<span class="string">"remind_in"</span>,<span class="string">"uid"</span>]).description</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="过期日期处理"><a href="#过期日期处理" class="headerlink" title="过期日期处理"></a>过期日期处理</h4><p>之前获得的过期日期是以秒的形式显示的，不够直观，可以在TFUSerAccount中添加一个Date类型的属性随着expires_in的变化而变化。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expires_in : <span class="type">TimeInterval</span> = <span class="number">0.0</span> &#123;</div><div class="line">    <span class="keyword">didSet</span>&#123;</div><div class="line">        expires_date = <span class="type">Date</span>(timeIntervalSinceNow: expires_in)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="请求用户信息"><a href="#请求用户信息" class="headerlink" title="请求用户信息"></a>请求用户信息</h2><p>当用户获取到access_token和uid就可以用这两个参数来获取更多的用户常用信息。在获取这两个参数后，我们下面就可以进入展示用户昵称和头像的动画的那个界面了。所以，在此我们应该获取到用户相关的昵称和头像。</p>
<p>为了减少TFOAuthViewController中的代码以及以后方便复用，我们可以将具体发送网络请求的代码抽取放到TFNetworkTools中在TFOAuthViewController中将请求到的数据进行处理即可；</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///请求用户信息</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadUserInfo</span><span class="params">(account : TFUSerAccount)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//1.获取access_token</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> access_token = account.access_token <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.获取uid</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> uid = account.uid <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3.发送网络请求</span></div><div class="line">    <span class="type">TFNetworkTools</span>.shareInstance.loadUserInfo(access_token: access_token, uid: uid) &#123; (result, error) <span class="keyword">in</span></div><div class="line">        <span class="comment">//1.错误校验</span></div><div class="line">        <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="type">TFLog</span>(<span class="string">"获取用户信息网络请求错误."</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//2.用户信息字典的校验</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> userInfoDict = result <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//3.从字典中取出昵称和头像地址</span></div><div class="line">        account.screen_name = userInfoDict[<span class="string">"screen_name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        account.avatar_large = userInfoDict[<span class="string">"avatar_large"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此我们已经能够获取到相关的用户信息了，在后面我们还会经常用到这些信息。我们需要将这些信息保存起来。本项目中我们暂时将其归档保存起来。后面用到的是否为已经登录状态等可以专门封装一个视图模型TFUserAccountViewModel，并设计成单例。在获取到用户信息的时候要重新给TFUserAccountViewModel中的单例进行重新赋值。不然，在后面拿到的单例里面没有想要的内容。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">TFUserAccountViewModel</span>.shareInstance.isLogin</div></pre></td></tr></table></figure>
<h1 id="欢迎界面"><a href="#欢迎界面" class="headerlink" title="欢迎界面"></a>欢迎界面</h1><p>欢迎页面比较简单，相对来说也是比较固定的。所以我们就在Xib中进行布局了。另外，欢迎界面的头像和昵称这些信息都在之前获取到了。</p>
<p>但是进入欢迎界面可能有两种情况：</p>
<ul>
<li>没有登录成功，在OAuth授权登录成功后就直接退出登录界面跳转到欢迎界面；</li>
<li>之前登录过，保存过用户的登录信息且没有过期。</li>
</ul>
<p>所以，程序启动后可能有两种初始界面，一种是游客界面，一种是直接进入欢迎界面。这样之前启动默认的MainStoryboard就要修改为在AppDelegate中进行判断然后选择进行加入的。设置默认的控制器。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> defaultViewController :<span class="type">UIViewController</span>? &#123;</div><div class="line">    <span class="keyword">let</span> isLogin = <span class="type">TFUserAccountViewModel</span>.shareInstance.isLogin</div><div class="line">    <span class="keyword">return</span> isLogin ? <span class="type">TFWelcomeViewController</span>() : <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateInitialViewController()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>欢迎界面还要设置相关的动画</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 系统回调函数</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="comment">//0.设置头像</span></div><div class="line">    <span class="keyword">let</span> <span class="type">ProfileAvatarURLString</span> = <span class="type">TFUserAccountViewModel</span>.shareInstance.account?.avatar_large</div><div class="line">    <span class="comment">//??:如果前面的可选类型有值，将其解包，如果为nil，就使用？？后面的值</span></div><div class="line">    <span class="keyword">let</span> url =  <span class="type">URL</span>(string: <span class="type">ProfileAvatarURLString</span> ?? <span class="string">""</span>)</div><div class="line">    avatarView.sd_setImage(with: url, placeholderImage: <span class="type">UIImage</span>(named: <span class="string">"avatar_default_big"</span>))</div><div class="line">    <span class="comment">//1.改变约束的值</span></div><div class="line">    avatarViewBottomConstant.constant = <span class="type">UIScreen</span>.main.bounds.size.height - <span class="number">200</span></div><div class="line">    <span class="comment">//2.执行动画</span></div><div class="line">    <span class="type">UIView</span>.animate(withDuration: <span class="number">1.5</span>, delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">5.0</span>, options: [], animations: &#123;</div><div class="line">        <span class="keyword">self</span>.view.layoutIfNeeded()</div><div class="line">    &#125;) &#123; (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">        <span class="type">UIApplication</span>.shared.keyWindow?.rootViewController = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateInitialViewController()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><h2 id="首页json数据的请求"><a href="#首页json数据的请求" class="headerlink" title="首页json数据的请求"></a>首页json数据的请求</h2><p>到此我们可以完成登录，然后跳转到登录后的首页。为了获取首页中的数据，我们就要开始发请求了。相关请求地址详情请见新浪微博官方文档。</p>
<p>我们可以通过GET请求获取到首页的json数据，这里我常用的一个分析json数据的网站：<a href="http://www.kjson.com/" target="_blank" rel="external">http://www.kjson.com/</a></p>
<p>首页json数据的请求封装在网络请求的工具类中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///加载首页微博信息请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadStatues</span><span class="params">(finished : @escaping <span class="params">( <span class="number">_</span> result : [[String :Any]]?, <span class="number">_</span> error : Error?)</span></span></span>-&gt;())&#123;</div><div class="line">    <span class="comment">//1.获取请求的URLString</span></div><div class="line">    <span class="keyword">let</span> urlString = <span class="string">"https://api.weibo.com/2/statuses/home_timeline.json"</span></div><div class="line">    <span class="comment">//2.获取请求参数</span></div><div class="line">    <span class="keyword">let</span> params = [<span class="string">"access_token"</span> : (<span class="type">TFUserAccountViewModel</span>.shareInstance.account?.access_token)!];</div><div class="line">    <span class="comment">//3.发送网络请求</span></div><div class="line">    tf_request(methodType: .<span class="type">GET</span>, <span class="type">URLString</span>: urlString, parameters: params) &#123; (result, error) <span class="keyword">in</span></div><div class="line">        <span class="comment">//1.获取字典的数据</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> resultDict = result <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">Any</span>] <span class="keyword">else</span>&#123;</div><div class="line">            finished(<span class="literal">nil</span>, error)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//2.将数组数据回调给外面的控制器</span></div><div class="line">        finished(resultDict[<span class="string">"statuses"</span>] <span class="keyword">as</span>? [[<span class="type">String</span> : <span class="type">Any</span>]], error)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="字典转模型"><a href="#字典转模型" class="headerlink" title="字典转模型"></a>字典转模型</h2><p>在定义好模型后，要自定义模型的构造函数，使用KVC，然后重写setValue(_ value: Any?, forUndefinedKey key: String)方法。然后在首页获取到微博状态字典数组后进行遍历，将遍历到的字典转化为模型实例对象，然后加到微博的数组中，再刷新表格。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadStatues</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="type">TFNetworkTools</span>.shareInstance.loadStatues &#123; (result, error) <span class="keyword">in</span></div><div class="line">        <span class="comment">//1.错误校验</span></div><div class="line">        <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="type">TFLog</span>(error)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//2.获取可选类型中的数据</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> resultArray = result <span class="keyword">else</span>&#123;</div><div class="line">            <span class="type">TFLog</span>(<span class="string">"没有获取到首页中的微博数组"</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//3.遍历微博对应的字典</span></div><div class="line">        <span class="keyword">for</span> statuesDict <span class="keyword">in</span> resultArray&#123;</div><div class="line">            <span class="keyword">let</span> status = <span class="type">TFStatus</span>(dict: statuesDict)</div><div class="line">            <span class="keyword">self</span>.statusesArray.append(status)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//4.刷新表格</span></div><div class="line">        <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意</code>：首页中的数据源代理方法numberOfSections方法必须实现，不然不能正常显示数据。</p>
<h2 id="微博来源处理"><a href="#微博来源处理" class="headerlink" title="微博来源处理"></a>微博来源处理</h2><p>服务器返回的数据带有HTML标签，但是我们显示在首页的内容中不是这样的，在此我们需要对服务器返回的数据进行截串。我们在模型的微博来源属性中进行监听，然后处理相关的问题。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source : <span class="type">String</span>?&#123;           <span class="comment">//微博来源</span></div><div class="line">    <span class="keyword">didSet</span>&#123;</div><div class="line">        <span class="comment">//1.空值校验</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> source = source, source != <span class="string">""</span> <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//2.对来源的字符串进行处理</span></div><div class="line">        <span class="keyword">let</span> startIndex = (source <span class="keyword">as</span> <span class="type">NSString</span>).range(of: <span class="string">"&gt;"</span>).location + <span class="number">1</span></div><div class="line">        <span class="keyword">let</span> length = (source <span class="keyword">as</span> <span class="type">NSString</span>).range(of: <span class="string">"&lt;/"</span>).location - startIndex</div><div class="line">        source_text = (source <span class="keyword">as</span> <span class="type">NSString</span>).substring(with: <span class="type">NSRange</span>(location: startIndex, length: length))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="微博时间处理"><a href="#微博时间处理" class="headerlink" title="微博时间处理"></a>微博时间处理</h2><p>时间显示规律：</p>
<ul>
<li>1分钟内：刚刚</li>
<li>1小时内：xx分钟前</li>
<li>1天内：xx小时前</li>
<li>昨天：昨天 xx:xx</li>
<li>一年内：xx-xx xx:xx</li>
<li>一年后：xxxx-xx-xx xx:xx</li>
</ul>
<p><img src="/images/sourceAndTime.png" alt="来源时间处理"></p>
<p>由于时间处理的代码较多且经常用到，在此我们就将其抽取到一个工具类中，并写成类方法，方便以后调用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createDateString</span><span class="params">(<span class="number">_</span> createAtStr : String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="comment">// 1.创建时间格式化对象</span></div><div class="line">    <span class="keyword">let</span> fmt = <span class="type">DateFormatter</span>()</div><div class="line">    fmt.dateFormat = <span class="string">"EEE MM dd HH:mm:ss Z yyyy"</span></div><div class="line">    fmt.locale = <span class="type">Locale</span>(identifier: <span class="string">"en"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 2.将字符串时间,转成NSDate类型</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> createDate = fmt.date(from: createAtStr) <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 3.创建当前时间</span></div><div class="line">    <span class="keyword">let</span> nowDate = <span class="type">Date</span>()</div><div class="line"></div><div class="line">    <span class="comment">// 4.计算创建时间和当前时间的时间差</span></div><div class="line">    <span class="keyword">let</span> interval = <span class="type">Int</span>(nowDate.timeIntervalSince(createDate))</div><div class="line"></div><div class="line">    <span class="comment">// 5.对时间间隔处理</span></div><div class="line">    <span class="comment">// 5.1.显示刚刚</span></div><div class="line">    <span class="keyword">if</span> interval &lt; <span class="number">60</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"刚刚"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5.2.59分钟前</span></div><div class="line">    <span class="keyword">if</span> interval &lt; <span class="number">60</span> * <span class="number">60</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(interval / 60)分钟前"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5.3.11小时前</span></div><div class="line">    <span class="keyword">if</span> interval &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(interval / (60 * 60))小时前"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5.4.创建日历对象</span></div><div class="line">    <span class="keyword">let</span> calendar = <span class="type">Calendar</span>.current</div><div class="line"></div><div class="line">    <span class="comment">// 5.5.处理昨天数据: 昨天 08:38</span></div><div class="line">    <span class="keyword">if</span> calendar.isDateInYesterday(createDate) &#123;</div><div class="line">        fmt.dateFormat = <span class="string">"昨天 HH:mm"</span></div><div class="line">        <span class="keyword">let</span> timeStr = fmt.string(from: createDate)</div><div class="line">        <span class="keyword">return</span> timeStr</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5.6.处理一年之内: 03-22 12:22</span></div><div class="line">    <span class="keyword">let</span> cmps = (calendar <span class="keyword">as</span> <span class="type">NSCalendar</span>).components(.year, from: createDate, to: nowDate, options: [])</div><div class="line">    <span class="keyword">if</span> cmps.year! &lt; <span class="number">1</span> &#123;</div><div class="line">        fmt.dateFormat = <span class="string">"MM-dd HH:mm"</span></div><div class="line">        <span class="keyword">let</span> timeStr = fmt.string(from: createDate)</div><div class="line">        <span class="keyword">return</span> timeStr</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5.7.超过一年: 2015-06-28 13:45</span></div><div class="line">    fmt.dateFormat = <span class="string">"yyyy-MM-dd HH:mm"</span></div><div class="line">    <span class="keyword">let</span> timeStr = fmt.string(from: createDate)</div><div class="line">    <span class="keyword">return</span> timeStr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="微博发布者的用户信息"><a href="#微博发布者的用户信息" class="headerlink" title="微博发布者的用户信息"></a>微博发布者的用户信息</h2><p> 每一条微博的信息中都有微博的发布者，所以我们在封装的TFStatus中应该增加一个用户属性，增加这个用户属性需要单独封装一个TFUser的类。在创建TFStatus对象的时候要主动调用TFUser的init函数进行字典转模型。</p>
<h3 id="用户数据处理"><a href="#用户数据处理" class="headerlink" title="用户数据处理"></a>用户数据处理</h3><p>请求得到的部分用户数据不能直接显示，在此要进行适当的处理，这样就要监听TFUser属性的变化。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> verified_type :<span class="type">Int</span> = -<span class="number">1</span>&#123;</div><div class="line">    <span class="keyword">didSet</span>&#123;</div><div class="line">        <span class="keyword">switch</span> verified_type &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            verifiedImage = <span class="type">UIImage</span>(named: <span class="string">"avatar_vip"</span>)</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>:</div><div class="line">            verifiedImage = <span class="type">UIImage</span>(named: <span class="string">"avatar_enterprise_vip"</span>)</div><div class="line">        <span class="keyword">case</span> <span class="number">220</span>:</div><div class="line">            verifiedImage = <span class="type">UIImage</span>(named: <span class="string">"avatar_grassroot"</span>)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            verifiedImage = <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;           <span class="comment">//用户认证类型</span></div><div class="line"><span class="keyword">var</span> mbrank : <span class="type">Int</span> = <span class="number">0</span> &#123;</div><div class="line">    <span class="keyword">didSet</span>&#123;</div><div class="line">        <span class="keyword">if</span> mbrank &gt; <span class="number">0</span> &amp;&amp; mbrank &lt;= <span class="number">6</span>&#123;</div><div class="line">            vipImage = <span class="type">UIImage</span>(named: <span class="string">"common_icon_membership_level\(mbrank)"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="微博视图模型封装"><a href="#微博视图模型封装" class="headerlink" title="微博视图模型封装"></a>微博视图模型封装</h3><p>前面的微博模型和用户模型中的代码看起来比较乱。在此我们可以对之前的模型进行封装，将其封装成视图模型。将 MVC 架构调整之 MVVM。</p>
<ul>
<li>MVVM 设计模式的一个很重要的目的就是将 Controller 瘦身；</li>
<li>一个控制器可以引用多个视图模型；</li>
<li>在工作中如果遇到量级非常重的控制器，可以针对实际的业务，将一组业务逻辑相关的代码抽取到一个独立的视图模型中处理；</li>
</ul>
<p>这里我们可以将TFStatus中要进行处理的各种数据的处理抽取并封装到一个新的视图模型TFStatusViewModel中，在创建视图模型控制器的初始化方法中对相应的数据进行处理，并且以属性的形式保留TFStatus的对象，以便以后使用不需处理的数据。</p>
<h2 id="首页中的Cell"><a href="#首页中的Cell" class="headerlink" title="首页中的Cell"></a>首页中的Cell</h2><p>关于cell的布局，完全可以在Storyboard中进行，图像的圆形完全可以使用Storyboard中的KVC进行实现。</p>
<h3 id="设置cell中的值"><a href="#设置cell中的值" class="headerlink" title="设置cell中的值"></a>设置cell中的值</h3><p>给Storyboard中相应的cell创建一个cell并绑定进行管理。给这个cell一个TFStatusViewModel类型的属性，然后监听属性的改变，一旦属性的值发生改变我们就要重新设置cell视图中的数据。如果发现cell中设置的值不容易取得，可以将获取这些值的代码放到TFStatusViewModel中进行处理，然后cell中可以拿到后直接使用。在首页的控制器中保存TFStatusViewModel的数组，然后在tableView的数据源代理方法中设置cell对应的TFStatusViewModel类型的属性就可以实现cell视图的内容的设置。</p>
<h3 id="cell底部工具条"><a href="#cell底部工具条" class="headerlink" title="cell底部工具条"></a>cell底部工具条</h3><p>底部工具条中包含三个按钮几条分割线，直接在Storyboard中封装下放进去就可以。这里想要说的一点是不同的微博的内容不一样多，显示的高度也不一样，可以设置自动计算cell的高度。但是，除布局上的约束外还要设置tableView的两个参数。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置tableView</span></div><div class="line">tableView.rowHeight = <span class="type">UITableViewAutomaticDimension</span></div><div class="line">tableView.estimatedRowHeight = <span class="number">200</span></div></pre></td></tr></table></figure>
<h2 id="微博配图"><a href="#微博配图" class="headerlink" title="微博配图"></a>微博配图</h2><h3 id="获取配图数据"><a href="#获取配图数据" class="headerlink" title="获取配图数据"></a>获取配图数据</h3><p>首先要获得微博配图的数据，然后对数据进行处理。所以，在TFStatus中添加属性pic_urls，然后在TFStatusViewModel中添加属性picURLs，将pic_urls进行处理后得到的数据放到picURLs中，这样我们以后就可以直接拿到配图的URL地址的数组了。</p>
<h3 id="添加配图View"><a href="#添加配图View" class="headerlink" title="添加配图View"></a>添加配图View</h3><p>添加配图要先删除之前内容label和底部工具条的约束，然后加入一个UICollectionView，这里随便设置个宽度和高度，具体宽高值需要在cell中根据配图的张数进行计算得到。</p>
<p><img src="/images/addPicView.png" alt="添加配图View"></p>
<h3 id="获取配图数据-1"><a href="#获取配图数据-1" class="headerlink" title="获取配图数据"></a>获取配图数据</h3><p>之前我们在cell中添加的picView的数据源和代理方法的实现是有一定代码量的，为了减少cell中的代码，可以单独的创建一个类TFPicCollectionView来管理cell中的配图。现在就要将UICollectionView的数据源和代理设置成自己。在storyboard中进行这样的设置是不行的，我们需要在代码中进行设置。</p>
<p><code>TFPicCollectionView的awakeFromNib方法中设置数据源代理为自己</code></p>
<p>然后在实现TFPicCollectionView中实现其数据代理方法，其中cell需要进行自定义，但是这个自定义的cell中代码量比较少，所以将这个cell的自定义放在collectionView中进行。给其加上一个图片URL的属性并对其进行监听与设置，然后将TFPicCollectionViewCell于storyboard中的cell进行绑定。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MARK:- 自定义cell</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFPicCollectionViewCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</div><div class="line">  <span class="comment">//MARK:- 定义模型属性</span></div><div class="line">  <span class="keyword">var</span> picURL : <span class="type">URL</span>?&#123;</div><div class="line">      <span class="keyword">didSet</span>&#123;</div><div class="line">          <span class="keyword">guard</span> <span class="keyword">let</span> picURL = picURL  <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">return</span></div><div class="line">          &#125;</div><div class="line">          iconView.sd_setImage(with: picURL, placeholderImage: <span class="type">UIImage</span>(named : <span class="string">"empty_picture"</span>))</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//MARK:- 控件的属性</span></div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> iconView: <span class="type">UIImageView</span>!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/PicCollectionViewPic.png" alt="获得并显示配图"></p>
<h3 id="图片的缓存"><a href="#图片的缓存" class="headerlink" title="图片的缓存"></a>图片的缓存</h3><p>在一张配图的情况下显示要实现高度一定，按宽高比进行放缩，就要先拿到要显示的图片，这里就需要做图片缓存了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///缓存图片</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheImage</span><span class="params">(viewModels :[TFStatusViewModel])</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//0.创建group</span></div><div class="line">    <span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</div><div class="line"></div><div class="line">    <span class="comment">//1.缓存图片</span></div><div class="line">    <span class="keyword">for</span> viewModel <span class="keyword">in</span> viewModels &#123;</div><div class="line">        <span class="keyword">for</span> picURL <span class="keyword">in</span> viewModel.picURLs &#123;</div><div class="line">            group.enter()</div><div class="line">            <span class="type">SDWebImageManager</span>.shared().downloadImage(with: picURL, options: [], progress: <span class="literal">nil</span>, completed: &#123; (<span class="number">_</span>, <span class="number">_</span>, <span class="number">_</span>, <span class="number">_</span>, <span class="number">_</span>) <span class="keyword">in</span></div><div class="line">                <span class="comment">//到此下载了一张图片</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"下载了一张图片"</span>)</div><div class="line">                group.leave()</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    group.notify(queue: .global()) &#123; </div><div class="line">        <span class="comment">//2.刷新表格</span></div><div class="line">        <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实，这样做还是很奇葩的，后面会进行代码重构。</p>
<h3 id="单张图片的显示"><a href="#单张图片的显示" class="headerlink" title="单张图片的显示"></a>单张图片的显示</h3><p>单张配图时</p>
<p>未完待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;声明：本文为博主原创，如需转载请注明出处。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本项目使用swift3完成。&lt;/p&gt;
&lt;p&gt;写在项目之前：&lt;/p&gt;
&lt;p&gt;Swift中自定义LOG:在Debug环境下打印内容，但是在Release环境下不显示打印&lt;/p&gt;
&lt;ul&gt;

    
    </summary>
    
      <category term="swift" scheme="http://Donkey-Tao.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift学习笔记</title>
    <link href="http://Donkey-Tao.github.io/2016/03/16/2016-03-16-Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://Donkey-Tao.github.io/2016/03/16/2016-03-16-Swift学习笔记/</id>
    <published>2016-03-16T14:29:39.000Z</published>
    <updated>2017-06-22T05:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>申明:本篇博文内容属原创,如需转载请注明出处.</code></p>
<h2 id="Swift介绍"><a href="#Swift介绍" class="headerlink" title="Swift介绍"></a>Swift介绍</h2><ul>
<li>历史<ul>
<li>2014年苹果在WWDC上发布；10年开始，一年后完成基本框架，14年6月发布；</li>
<li>作者：Chris Lattner；</li>
<li>领导过Xcode,Instruments等编译器；LLVM项目发起人与作者之一；Clang编译器的作者;</li>
</ul>
</li>
</ul>
<ul>
<li>特点：<ul>
<li>有Objective-C,JavaScript,C#,Python的影子；</li>
<li>提供了类似Java的命名空间(namespace)，泛型(generic),运算对象重载(operator overloading)</li>
</ul>
</li>
<li>资源网站<ul>
<li>The Swift Programming Language</li>
</ul>
</li>
</ul>
<h2 id="初体验之Playground"><a href="#初体验之Playground" class="headerlink" title="初体验之Playground"></a>初体验之Playground</h2><p>Playground是从Xcode6开始出现的；且只支持swift代码，OC代码会报错</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.swift中如何导入框架</span></div><div class="line"><span class="comment">// #import &lt;UIKit/UIKit.h&gt;</span></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 2.如何定义标识符</span></div><div class="line"><span class="comment">// int a =20 ;</span></div><div class="line"><span class="comment">// swift中定义标识符：必须告诉编译器是常量还是变量</span></div><div class="line"><span class="comment">// let修饰常量,定义之后不可以再修改</span></div><div class="line"><span class="comment">// var修饰变量,定义之后可以修改</span></div><div class="line"><span class="comment">// let/var 标识符的名称 : 标识符的数据类型 = 值</span></div><div class="line"><span class="keyword">let</span> a : <span class="type">Int</span> = <span class="number">20</span> ;</div><div class="line"><span class="comment">//a = 30;</span></div><div class="line"><span class="keyword">var</span> b : <span class="type">Double</span> = <span class="number">1.44</span></div><div class="line">b = <span class="number">2.44</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 3.语句结束</span></div><div class="line"><span class="comment">//如果一行中只有一条语句，那么该语句结束后，可以不加分号，可以省略</span></div><div class="line"><span class="comment">//如果一行中有多条语句，那么需要分号分割</span></div><div class="line"></div><div class="line"><span class="comment">// 4.打印内容</span></div><div class="line"><span class="comment">// NSLog(@"%d",a);</span></div><div class="line"><span class="comment">// 学习Python;</span></div><div class="line"><span class="built_in">print</span>(a);</div></pre></td></tr></table></figure>
<p><code>关于常量和变量的使用注意:</code></p>
<ul>
<li>在真是使用过程中，建议先定义常量，如果需要修改再修改为变量，这样可以使程序更加安全；</li>
<li>常量的本质是它保存的内容地址不能修改，但是可以通过指针获取对象，拿到的内存地址对其属性进行修改；</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常量的使用注意</span></div><div class="line"><span class="keyword">let</span> m :<span class="type">Int</span> = <span class="number">10</span></div><div class="line"><span class="comment">//创建常量对象;OC创建对象：[[UIView alloc]init]</span></div><div class="line"><span class="comment">//swift中创建对象: UIView()</span></div><div class="line"><span class="keyword">let</span> view : <span class="type">UIView</span> = <span class="type">UIView</span>()</div><div class="line"><span class="comment">//let view : UIView = UIView()</span></div><div class="line">view.backgroundColor = <span class="type">UIColor</span>.red<span class="comment">//Xcode8.2.1后修改的</span></div><div class="line">view.frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">0</span>, height: <span class="number">0</span>)<span class="comment">//Xcode8.2.1后修改的 </span></div><div class="line">view.alpha = <span class="number">0.5</span></div><div class="line">view.isHidden = <span class="literal">true</span> <span class="comment">//Bool类型与BOOL不同，Bool: true/false ，BOOL : YES/NO</span></div></pre></td></tr></table></figure>
<h2 id="Swift中的数据类型"><a href="#Swift中的数据类型" class="headerlink" title="Swift中的数据类型"></a>Swift中的数据类型</h2><ul>
<li>整型：<ul>
<li>有符号<ul>
<li>Int8:有符号8位整型……</li>
<li>Int:和平台相关（默认相当于OC中的NSInteger）</li>
</ul>
</li>
<li>无符号<ul>
<li>UInt8:无符号8位整型……</li>
<li>UInt:和平台相关（常用，相当于OC中的NSUInteger）</li>
</ul>
</li>
</ul>
</li>
<li><p>浮点型</p>
<ul>
<li>Float:32位浮点型</li>
<li>Double:64位浮点型（默认）</li>
</ul>
<h3 id="Swift中的类型推到"><a href="#Swift中的类型推到" class="headerlink" title="Swift中的类型推到"></a>Swift中的类型推到</h3></li>
<li><p>swift是一种强类型语言</p>
</li>
<li>swift中任何一个标识符都有明确的类型</li>
<li>注意：<ul>
<li>如果定义一个标识符时有直接进行赋值，那么标识符后面的类型可以省略。</li>
<li>因为Swift中有类型推到，可以根据赋值推到出改标识符的类型</li>
<li>可以通过<code>option</code>+<code>鼠标左键</code>来查看变量的数据类型</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据类型,类型推到</span></div><div class="line"><span class="keyword">let</span> tf = <span class="number">10</span></div><div class="line"><span class="keyword">let</span> taofei  = <span class="number">2.44</span></div><div class="line"><span class="keyword">let</span> donkey = taofei</div><div class="line"><span class="keyword">let</span> <span class="type">DonkeyView</span> = <span class="type">UIView</span>()</div><div class="line"><span class="keyword">let</span> <span class="type">DonkeyButton</span> = <span class="type">UIButton</span>()</div><div class="line"></div><div class="line"><span class="keyword">var</span> feifei :<span class="type">Int</span></div><div class="line">feifei=<span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="Swift中的基本计算"><a href="#Swift中的基本计算" class="headerlink" title="Swift中的基本计算"></a>Swift中的基本计算</h2><p>Swift中进行基本运算时必须保证类型一致，否则会出错</p>
<ul>
<li>相同类型之间才能进行基本运算</li>
<li>swift中没有隐式类型转换</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//swift中的基本运算</span></div><div class="line"><span class="comment">//将整型转换为浮点型:Double(标识符)</span></div><div class="line"><span class="keyword">let</span> tt = <span class="number">20</span></div><div class="line"><span class="keyword">let</span> ff = <span class="number">3.14</span></div><div class="line"><span class="keyword">let</span> temptt=<span class="type">Double</span>(tt)</div><div class="line"><span class="keyword">let</span> result = temptt+ff</div><div class="line"></div><div class="line"><span class="comment">//将浮点型转换为整型:Int(标识符)</span></div><div class="line"><span class="keyword">let</span> tempff=<span class="type">Int</span>(ff)</div><div class="line"><span class="keyword">let</span> result2=tempff+tt</div></pre></td></tr></table></figure>
<h2 id="逻辑分支"><a href="#逻辑分支" class="headerlink" title="逻辑分支"></a>逻辑分支</h2><h3 id="if-else-if分支的使用"><a href="#if-else-if分支的使用" class="headerlink" title="if-else-if分支的使用"></a>if-else-if分支的使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. if 后面的（）可以省略</span></div><div class="line"><span class="comment">//2. 判断句不再有非0/nil即真,判断句必须有明确的真假(Bool)</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> logic = <span class="number">10</span></div><div class="line"><span class="keyword">if</span> logic &gt; <span class="number">0</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"logic大于0"</span>,logic)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"logic小于0"</span>,logic)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//swift中的else if 的用法</span></div><div class="line"><span class="keyword">let</span> score = <span class="number">92</span></div><div class="line"><span class="keyword">if</span> score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"不合理的分数"</span>)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> score &lt; <span class="number">60</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"不及格"</span>)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> score &lt; <span class="number">80</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"及格"</span>)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> score &lt; <span class="number">90</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"良好"</span>)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> score &lt;= <span class="number">100</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"不错哦"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三目运算的使用"><a href="#三目运算的使用" class="headerlink" title="三目运算的使用"></a>三目运算的使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sister = <span class="number">20</span></div><div class="line"><span class="keyword">let</span> brother = <span class="number">22</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">max</span> = <span class="number">0</span></div><div class="line"><span class="comment">//if-else实现</span></div><div class="line"><span class="keyword">if</span> sister &gt; brother&#123;</div><div class="line">    <span class="built_in">max</span> = sister</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">max</span> = brother</div><div class="line">&#125;</div><div class="line"><span class="comment">//三目运算符实现</span></div><div class="line"><span class="keyword">let</span> maxer = sister &gt; brother ? sister : brother</div></pre></td></tr></table></figure>
<h3 id="Swift中特有的guard的使用"><a href="#Swift中特有的guard的使用" class="headerlink" title="Swift中特有的guard的使用"></a>Swift中特有的guard的使用</h3><p>guard是swift2.0才新增的语法；它是为了提高程序的可读性；</p>
<p>guard语句必须带有else语句</p>
<ul>
<li>当条件表达式为true的时候跳过else语句中的内容，执行语句组中的内容；</li>
<li>当条件表达式为false的时候执行else语句中的内容，跳转语句一般是return，break，continue和throw；</li>
</ul>
<p><code>注意：guard必须用在函数里面</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//guard的使用</span></div><div class="line"><span class="comment">/* </span></div><div class="line"> guard 条件表达式 else &#123;</div><div class="line"> //执行的语句</div><div class="line"> break</div><div class="line"> &#125;</div><div class="line"> //语句组</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span></div><div class="line"></div><div class="line"><span class="comment">//if-else实现</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">online1</span><span class="params">(age :Int)</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"可以留下来上网"</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"回家找妈妈"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//guard实现</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">online2</span><span class="params">(age :Int)</span></span> -&gt;<span class="type">Void</span>&#123;</div><div class="line">    <span class="keyword">guard</span> age &gt;= <span class="number">18</span> <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"回家找妈妈吧"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"留下来吧"</span>)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">online1(age: age)<span class="comment">//if-else实现</span></div><div class="line">online2(age: age)<span class="comment">//guard实现</span></div><div class="line"></div><div class="line"><span class="comment">//guard可以解决if-else复杂情况下的嵌套问题，可以避免多重嵌套</span></div></pre></td></tr></table></figure>
<h3 id="Switch的使用"><a href="#Switch的使用" class="headerlink" title="Switch的使用"></a>Switch的使用</h3><p>Swift中的Switch功能被大大的增强了；</p>
<h4 id="1-switch的基本使用"><a href="#1-switch的基本使用" class="headerlink" title="1.switch的基本使用"></a>1.switch的基本使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 0:男 1：女</span></div><div class="line"><span class="keyword">let</span> gender = <span class="number">0</span></div><div class="line"><span class="comment">//1&gt; switch后面的()可以省略</span></div><div class="line"><span class="comment">//2&gt; case语句结束后，break也可以省略,不会出现case穿透</span></div><div class="line"><span class="keyword">switch</span> gender&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"男"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"女"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"其他"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Switch的基本使用的补充"><a href="#2-Switch的基本使用的补充" class="headerlink" title="2. Switch的基本使用的补充"></a>2. Switch的基本使用的补充</h4><ul>
<li>如果系统某一个case中产生case穿透，可以在case结束后跟上fallthough</li>
<li>case后面可以判断多个条件，多个条件以逗号分割；case 0,1</li>
</ul>
<h4 id="3-Swift中switch的特殊用法"><a href="#3-Swift中switch的特殊用法" class="headerlink" title="3.Swift中switch的特殊用法"></a>3.Swift中switch的特殊用法</h4><ul>
<li>3.1 switch可以判断浮点型</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="number">3.14</span></div><div class="line"><span class="keyword">switch</span> t&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">3.14</span> :</div><div class="line">    <span class="built_in">print</span>(<span class="string">"是圆周率"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"不是圆周率"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>3.2 switch可以判断字符创</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> operater1 = <span class="number">20</span></div><div class="line"><span class="keyword">let</span> operater2 = <span class="number">30</span></div><div class="line"><span class="keyword">let</span> operation = <span class="string">"+"</span></div><div class="line"><span class="keyword">var</span> resultOfOperation = <span class="number">0</span></div><div class="line"><span class="keyword">switch</span> operation &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line">    resultOfOperation = operater1 + operater2</div><div class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">    resultOfOperation = operater1 - operater2</div><div class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">    resultOfOperation = operater1 * operater2</div><div class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">    resultOfOperation = operater1 / operater2</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"非法操作符"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>3.3 switch可以判断区间</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//swift中的switch可以判断的区间</span></div><div class="line"><span class="comment">//开区间：0..&lt;20 0-19</span></div><div class="line"><span class="comment">//闭区间：0...20 0-20</span></div><div class="line"><span class="keyword">let</span> scoreT = <span class="number">88</span></div><div class="line"><span class="keyword">switch</span> scoreT &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>..&lt;<span class="number">60</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"不及格"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">60</span>..&lt;<span class="number">80</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"及格"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">80</span>..&lt;<span class="number">90</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"良好"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">90</span>...<span class="number">100</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"优秀"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"不合理的分数"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="循环的使用"><a href="#循环的使用" class="headerlink" title="循环的使用"></a>循环的使用</h3><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>for后面的小括号可以省略,for-in</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//for in循环</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>  ..&lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">//省略变量的情况</span></div><div class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">9</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Hello world"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>在Swift中如果一个标识符不需要使用，可以使用下划线 _ 来代替</code></p>
<h4 id="while-和-repeat-while循环"><a href="#while-和-repeat-while循环" class="headerlink" title="while 和 repeat while循环"></a>while 和 repeat while循环</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//swift中的写法</span></div><div class="line"><span class="keyword">var</span> randomNumeber1 = <span class="number">10</span></div><div class="line"><span class="keyword">while</span> randomNumeber1 &gt; <span class="number">0</span> &#123;</div><div class="line">    <span class="built_in">print</span>(randomNumeber1)</div><div class="line">    randomNumeber1 -= <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">repeat</span> &#123;</div><div class="line">    randomNumeber1 += <span class="number">1</span></div><div class="line">    <span class="built_in">print</span>(randomNumeber1)</div><div class="line">&#125;<span class="keyword">while</span> randomNumeber1&lt;<span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>OC中的字符串类型是NSString类型，Swift中是String</p>
<p>OC中字符串@””,Swift中字符串””</p>
<p>String和NSString之间可以无缝转换</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">"Donkey-Tao is taofei"</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> str.characters &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>字符串的拼接</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str1 = <span class="string">"Donkey-Tao"</span></div><div class="line"><span class="keyword">let</span> str2 = <span class="string">"taofei"</span></div><div class="line"><span class="keyword">let</span> str3 = str1 + str2</div></pre></td></tr></table></figure>
<ul>
<li>字符串和其他标识符之间的拼接</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">"taofei"</span></div><div class="line"><span class="keyword">let</span> ageOfTaofei = <span class="number">18</span></div><div class="line"><span class="keyword">let</span> height = <span class="number">1.88</span></div><div class="line"><span class="keyword">let</span> info = <span class="string">"my name is \(name) ,my age is \(ageOfTaofei),my height is \(height)"</span></div></pre></td></tr></table></figure>
<ul>
<li>拼接字符串时，字符串的格式化</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">min</span> = <span class="number">2</span></div><div class="line"><span class="keyword">let</span> second = <span class="number">18</span></div><div class="line"><span class="keyword">let</span> timeSting =  <span class="type">String</span>(format:<span class="string">"%02d:%02d"</span>,arguments:[<span class="built_in">min</span>,second])</div><div class="line"><span class="comment">//OC的数组，字典中不能放基本数据类型，swift中可以</span></div></pre></td></tr></table></figure>
<ul>
<li>字符串的截取</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> urlString = <span class="string">"http://taofei.me"</span></div><div class="line"><span class="comment">//let header = urlString.substring(to: 6)//这里比较麻烦</span></div><div class="line"><span class="comment">//可以将String转化为NSString</span></div><div class="line"><span class="keyword">let</span> header = (urlString <span class="keyword">as</span> <span class="type">NSString</span>).substring(to: <span class="number">4</span>)</div><div class="line"><span class="comment">//let centet = (urlString as NSString).subsringWithRange(NSMakeRange(8, 13))//这个函数有点问题</span></div><div class="line"><span class="keyword">let</span> footer = (urlString <span class="keyword">as</span> <span class="type">NSString</span>).substring(from: <span class="number">14</span>)</div></pre></td></tr></table></figure>
<h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><h3 id="定义数组-数组是一个泛型集合"><a href="#定义数组-数组是一个泛型集合" class="headerlink" title="定义数组(数组是一个泛型集合)"></a>定义数组(数组是一个泛型集合)</h3><ul>
<li>1&gt; 定义不可变数组:使用let修饰标识定义出来的数组就是不可变数组</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numberArray = [<span class="number">10</span>,<span class="number">221</span>,<span class="number">90</span>,<span class="number">12</span>]</div><div class="line"><span class="keyword">let</span> nameArray = [<span class="string">"taofei"</span>,<span class="string">"Donkey-Tao"</span>]</div></pre></td></tr></table></figure>
<ul>
<li>2&gt; 定义可变数组:使用var修饰标识符定义出来的数组就是可变数组</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var arrayM = Array&lt;String&gt;()</span></div><div class="line"><span class="keyword">var</span> arrayM = <span class="type">String</span></div></pre></td></tr></table></figure>
<h3 id="对可变数组的基本操作"><a href="#对可变数组的基本操作" class="headerlink" title="对可变数组的基本操作"></a>对可变数组的基本操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arrayM.append(<span class="string">"taofei"</span>)</div><div class="line">arrayM.append(<span class="string">"Donkey-Tao"</span>)</div><div class="line">arrayM.append(<span class="string">"taofei.me"</span>)</div><div class="line">arrayM.remove(at: <span class="number">0</span>)</div><div class="line">arrayM</div><div class="line">arrayM[<span class="number">0</span>] = <span class="string">"taofei.Donkey-Tao"</span></div><div class="line">arrayM[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<h3 id="数组的遍历-三种遍历方式"><a href="#数组的遍历-三种遍历方式" class="headerlink" title="数组的遍历:三种遍历方式"></a>数组的遍历:三种遍历方式</h3><ul>
<li>1.根据下标</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;arrayM.<span class="built_in">count</span> &#123;</div><div class="line">    <span class="built_in">print</span>(arrayM[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>2.直接遍历</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> arrayM &#123;</div><div class="line">    <span class="built_in">print</span>(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>3.遍历前两个元素</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">2</span> &#123;</div><div class="line">    <span class="built_in">print</span>(arrayM[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> arrayM[<span class="number">0</span>..&lt;<span class="number">2</span>] &#123;</div><div class="line">    <span class="built_in">print</span>(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数组的合并-相同类型才可以相加合并"><a href="#数组的合并-相同类型才可以相加合并" class="headerlink" title="数组的合并:相同类型才可以相加合并"></a>数组的合并:相同类型才可以相加合并</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> resultArray = nameArray + arrayM <span class="comment">//不同类型的数组不能相加合并</span></div></pre></td></tr></table></figure>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>swift中字典也是泛型的集合</p>
<h3 id="定义字典"><a href="#定义字典" class="headerlink" title="定义字典"></a>定义字典</h3><ul>
<li>定义不可变字典:使用let修饰</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dict : [<span class="type">String</span> : <span class="type">Any</span>] = [<span class="string">"name"</span> : <span class="string">"taofei"</span>,<span class="string">"age"</span> : <span class="number">18</span>]<span class="comment">//系统会判断时数组还是字典</span></div></pre></td></tr></table></figure>
<ul>
<li>定义可变字典:使用var修饰</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var dictM = Dictionary&lt;String , Any&gt;()</span></div><div class="line"><span class="keyword">var</span> dictM=[<span class="type">String</span> : <span class="type">AnyObject</span>]()</div></pre></td></tr></table></figure>
<h3 id="对可变字典的基本操作"><a href="#对可变字典的基本操作" class="headerlink" title="对可变字典的基本操作"></a>对可变字典的基本操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dictM[<span class="string">"info"</span>] = <span class="string">"Donkey-Tao"</span> <span class="keyword">as</span> <span class="type">AnyObject</span>?</div><div class="line">dictM[<span class="string">"name"</span>] = <span class="string">"taofei"</span> <span class="keyword">as</span> <span class="type">AnyObject</span>?</div><div class="line">dictM[<span class="string">"age"</span>] = <span class="number">18</span> <span class="keyword">as</span> <span class="type">AnyObject</span>?</div><div class="line">dictM</div><div class="line">dictM.removeValue(forKey: <span class="string">"name"</span>)</div><div class="line">dictM</div><div class="line"><span class="comment">//如果字典中有了对应的key进行修改,如果没有添加对应的key/value</span></div><div class="line">dictM[<span class="string">"info"</span>] = <span class="string">"taofei"</span> <span class="keyword">as</span> <span class="type">AnyObject</span>?</div><div class="line">dictM</div></pre></td></tr></table></figure>
<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//遍历字典中所有的key</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dictM.keys &#123;</div><div class="line">    <span class="built_in">print</span>(key)</div><div class="line">&#125;</div><div class="line"><span class="comment">//遍历字典中所有的value</span></div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dictM.values &#123;</div><div class="line">    <span class="built_in">print</span>(value)</div><div class="line">&#125;</div><div class="line"><span class="comment">//遍历字典中所有的key,value</span></div><div class="line"><span class="keyword">for</span> (key , value) <span class="keyword">in</span> dictM &#123;</div><div class="line">    <span class="built_in">print</span>(key)</div><div class="line">    <span class="built_in">print</span>(value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h3><p><code>即使类型一致也不能相加进行合并</code></p>
<p>要想实现字典合并可以将字典遍历出来一个一个加到一个可变字典中</p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul>
<li>元组是Swift中<code>特有</code>的,OC中没有相应的数据类型</li>
<li>它也是一种数据结构,在数学中应用广泛</li>
<li>类似数组或者字典</li>
<li>可以用来定义一组数据</li>
</ul>
<h3 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h3><ul>
<li>使用数组定义一组数据</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array=[<span class="string">"taofei"</span>,<span class="number">18</span>,<span class="number">1.88</span>] <span class="keyword">as</span> [<span class="type">Any</span>]</div><div class="line">array[<span class="number">0</span>]</div><div class="line">array[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<ul>
<li>使用字典定义一组数据</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dictOfInfo = [<span class="string">"name"</span> : <span class="string">"taofei"</span> ,<span class="string">"age"</span> :<span class="number">18</span>] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>]</div><div class="line">dictOfInfo[<span class="string">"name"</span>]</div></pre></td></tr></table></figure>
<ul>
<li><p>使用元组:(一般用于作为方法的返回值,可以返回多个参数)</p>
</li>
<li><p>一般写法</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> infoYuanzu = (<span class="string">"name"</span> ,<span class="number">18</span> ,<span class="number">1.88</span> )</div><div class="line">infoYuanzu.<span class="number">0</span></div><div class="line">infoYuanzu.<span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>可以给元组的每一个元素取一个别名</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> infoYuanzu2 = (name : <span class="string">"taofei"</span>,<span class="number">18</span>,<span class="number">1.85</span>)</div><div class="line">infoYuanzu2.name</div></pre></td></tr></table></figure>
<ul>
<li>元组中元素的别名,就是元组的名称</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> (name_yuanzu,age_yuanzu,height_yuanzu) = (<span class="string">"taofei"</span>,<span class="number">18</span>,<span class="number">1.85</span>)</div></pre></td></tr></table></figure>
<p>​</p>
<h2 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h2><h3 id="可选类型的介绍"><a href="#可选类型的介绍" class="headerlink" title="可选类型的介绍"></a>可选类型的介绍</h3><p><code>注意</code>:可选类型是swift中较难理解得一个知识点</p>
<ul>
<li>在OC中,如果一个变量暂时不使用,可以赋值为0(基本数据类型)或者赋值为nil(对象类型)</li>
<li>在swift中,nil也是一种特殊的类型,因为和真实类型不匹配是不能赋值的(swift是强类型语言)</li>
</ul>
<h3 id="可选类型定义"><a href="#可选类型定义" class="headerlink" title="可选类型定义"></a>可选类型定义</h3><ul>
<li>常规方式:不常用</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> optionalName :<span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="literal">nil</span></div></pre></td></tr></table></figure>
<ul>
<li>语法糖:常用</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> optionalInfo : <span class="type">String</span>? = <span class="literal">nil</span></div></pre></td></tr></table></figure>
<h3 id="给可选类型赋值"><a href="#给可选类型赋值" class="headerlink" title="给可选类型赋值"></a>给可选类型赋值</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">optionalInfo = <span class="string">"taofei"</span></div></pre></td></tr></table></figure>
<h3 id="取出可选类型中的值"><a href="#取出可选类型中的值" class="headerlink" title="取出可选类型中的值"></a>取出可选类型中的值</h3><p><code>可选类型  + ! :强制解包</code></p>
<p><code>注意:强制解包是非常危险的操作,如果可选类型为nil,强制解包系统会崩溃</code></p>
<p><code>建议:在强制解包前,先判断可选类型,判断是否为nil</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> optionalInfo != <span class="literal">nil</span>&#123;</div><div class="line"><span class="built_in">print</span>(optionalInfo!)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可选绑定"><a href="#可选绑定" class="headerlink" title="可选绑定"></a>可选绑定</h3><p>可以实现不需每次使用都要强制解包</p>
<ul>
<li>写法一:不常用</li>
</ul>
<p>1.判断optionalInfo是否有值,如果没有值,直接不执行{}<br>2.如果optionalInfo有值,系统会自动将name进行解包,并且将解包后的结果赋值给tempInfo</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> tempInfo = optionalInfo &#123;</div><div class="line"><span class="built_in">print</span>(tempInfo)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>写法二:常用</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> optionalInfo = optionalInfo&#123;</div><div class="line"><span class="built_in">print</span>(optionalInfo)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可选类型的应用场景"><a href="#可选类型的应用场景" class="headerlink" title="可选类型的应用场景"></a>可选类型的应用场景</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 通过一个字符串创建NSURL对象,如果有中文是创建不出来url的</span></div><div class="line"><span class="keyword">let</span> urlOptional : <span class="type">NSURL</span>? = <span class="type">NSURL</span>(string: <span class="string">"http://taofei.me"</span>)<span class="comment">//后面返回的是NSURL的可选类型</span></div><div class="line"></div><div class="line"><span class="comment">//根据url创建 </span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> urlOptional = urlOptional &#123;</div><div class="line"><span class="keyword">let</span> request = <span class="type">NSURLRequest</span>(url: urlOptional <span class="keyword">as</span> <span class="type">URL</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>相当于OC中的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> -&gt; 返回值类型 &#123;</div><div class="line">代码块</div><div class="line"><span class="keyword">return</span> 返回值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>常见函数</p>
<ul>
<li>没有参数,没有返回值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">about</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;<span class="comment">//这里的Void可以省略</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"taofei.me"</span>)</div><div class="line">&#125;</div><div class="line">about()</div></pre></td></tr></table></figure>
<ul>
<li>没有参数,有返回值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMessage</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"学海无涯,回头是岸"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>有参数,没有返回值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">callPhone</span><span class="params">(phoneNum : String)</span></span> &#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"打电话给我:\(phoneNum)"</span>)</div><div class="line">&#125;</div><div class="line">callPhone(phoneNum: <span class="string">"18788858283"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>有参数,有返回值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(num1 : Int , num2 : Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line"><span class="keyword">return</span> num1+num2</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(sum(num1: <span class="number">20</span>, num2: <span class="number">30</span>))</div></pre></td></tr></table></figure>
<p><code>函数的使用注意:</code></p>
<ul>
<li><p>内部参数与外部参数:在函数内部能够看到的参数就是内部参数,在函数外部可以看到的参数名称,默认从第二个参数开始既是内部参数也是外部参数,默认第一个参数只是内部参数,如果希望第一个也是外部参数,在标识符前面添加一个别名:在Xcode8.1.2已经不是这样了</p>
</li>
<li><p>函数设置默认参数</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeCoffee</span><span class="params">(coffeeName : String = <span class="string">"雀巢"</span>)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line"><span class="keyword">return</span><span class="string">"制作了一杯\(coffeeName)咖啡"</span></div><div class="line">&#125;</div><div class="line">makeCoffee(coffeeName: <span class="string">"拿铁"</span>)</div><div class="line">makeCoffee(coffeeName: <span class="string">"卡布奇诺"</span>)</div><div class="line">makeCoffee(coffeeName: <span class="string">"猫屎"</span>)</div><div class="line"></div><div class="line">makeCoffee(coffeeName: <span class="string">"随便"</span>)</div><div class="line">makeCoffee()<span class="comment">//默认参数</span></div></pre></td></tr></table></figure>
<ul>
<li>可变参数(参数的个数可变)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumMulti</span><span class="params">(num : Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"><span class="keyword">var</span> result = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> num &#123;</div><div class="line">result += n</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line">sumMulti(num: <span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>)</div><div class="line"><span class="built_in">print</span>(sumMulti(num: <span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>))</div></pre></td></tr></table></figure>
<ul>
<li>函数参数的地址传递</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> number1 = <span class="number">20</span></div><div class="line"><span class="keyword">var</span> number2 = <span class="number">30</span></div><div class="line"></div><div class="line"><span class="comment">//默认情况下,swift函数中的参数传递也是值传递</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapNum</span><span class="params">( m :<span class="keyword">inout</span> Int , n :<span class="keyword">inout</span> Int)</span></span>&#123;</div><div class="line"><span class="keyword">let</span> tempNum = m;</div><div class="line">m = n</div><div class="line">n = tempNum</div><div class="line">&#125;</div><div class="line">swapNum(m: &amp;number1, n: &amp;number2)</div><div class="line"><span class="built_in">print</span>(<span class="string">"m=\(number1),number2=\(number2)"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>函数的嵌套使用(为程序的可读性,不要用)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"demo"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"test"</span>)</div><div class="line">&#125;</div><div class="line">test()<span class="comment">//此时不会打印demo,因为只是在函数中定义了,并没有调用</span></div></pre></td></tr></table></figure>
<h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><ul>
<li>构造函数类似于OC中的初始化方法:init方法</li>
<li>默认情况下创建一个类时,必然会调用一个构造函数</li>
<li>即使是没有编写构造函数编译器也会提供一个默认的构造函数</li>
<li>如果是继承自NSObject,可以对父类的构造函数进行重写</li>
</ul>
<h4 id="构造函数的使用"><a href="#构造函数的使用" class="headerlink" title="构造函数的使用"></a>构造函数的使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TFPerson</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name : <span class="type">String</span>?</div><div class="line"><span class="keyword">var</span> age : <span class="type">Int</span> = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line"><span class="comment">//在构造函数中,如果没有明确调用super.init(),那么系统会帮助调用</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"TFPerson init"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//自定义构造函数</span></div><div class="line"><span class="keyword">init</span>(name :<span class="type">String</span> ,age : <span class="type">Int</span>)&#123;</div><div class="line"><span class="keyword">self</span>.name = name</div><div class="line"><span class="keyword">self</span>.age = age</div><div class="line">&#125;</div><div class="line"><span class="comment">//构造函数,通过一个字典初始化一个对象</span></div><div class="line"><span class="keyword">init</span>(dict : [<span class="type">String</span> : <span class="type">AnyObject</span>])&#123;</div><div class="line"><span class="comment">//dict["name"]是AnyObject?,要转成String?</span></div><div class="line"><span class="comment">//as? 最终转成的类型是一个可选类型</span></div><div class="line">name = dict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line"><span class="comment">//as! 最终转成的类型是一个确定的类型</span></div><div class="line">age = dict[<span class="string">"age"</span>] <span class="keyword">as</span>! <span class="type">Int</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> tempAge = dict[<span class="string">"age"</span>] <span class="keyword">as</span>? <span class="type">Int</span>&#123;</div><div class="line">age = tempAge</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//一般通过KVC实现</span></div><div class="line"><span class="keyword">init</span>(dictionary : [<span class="type">String</span> :<span class="type">AnyObject</span>])&#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()<span class="comment">//系统帮助自动调用是在最后调用</span></div><div class="line">    setValuesForKeys(dictionary)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forUndefinedKey key: String)</span></span> &#123;        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有相应的属性"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> taofei0610 = <span class="type">TFPerson</span>()</div><div class="line"><span class="keyword">let</span> taofei0512 = <span class="type">TFPerson</span>(name: <span class="string">"TAOFEI"</span>, age: <span class="number">18</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"name=\(taofei0512.name),age=\(taofei0512.age)"</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> taofei0513 = <span class="type">TFPerson</span>(dict: [<span class="string">"name"</span> : <span class="string">"Donkey"</span> <span class="keyword">as</span> <span class="type">AnyObject</span> ,<span class="string">"age"</span> :<span class="number">18</span> <span class="keyword">as</span> <span class="type">AnyObject</span> ,<span class="string">"height"</span> : <span class="number">1.85</span> <span class="keyword">as</span> <span class="type">AnyObject</span>])</div></pre></td></tr></table></figure>
<h4 id="类的属性监听器"><a href="#类的属性监听器" class="headerlink" title="类的属性监听器"></a>类的属性监听器</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//属性监听器</span></div><div class="line"><span class="keyword">var</span> name : <span class="type">String</span>? &#123;</div><div class="line"><span class="comment">//属性即将改变时进行监听</span></div><div class="line"><span class="keyword">willSet</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"newValue=\(newValue)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//属性已经改变时进行监听,常用</span></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"oldValue=\(oldValue)"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>监听类创建对象后对象的属性改变</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包和OC中的block非常相似</p>
<ul>
<li>OC中的block是一个匿名的函数</li>
<li>Swift中的闭包是一个特殊的函数</li>
<li>block和闭包都是经常用于回调</li>
</ul>
<p><code>注意:闭包和block一样,第一次使用时可能不习惯他的语法,可以先按照固定的格式去写,使用简单的闭包,随着学习的深入慢慢灵活应用</code></p>
<h3 id="block的用法回顾"><a href="#block的用法回顾" class="headerlink" title="block的用法回顾"></a>block的用法回顾</h3><p>block一般用于回调,用于网络请求(异步请求)的回调比较多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@inerface HttpTool : NSObject</div><div class="line">//函数里面请求到的数据以block的形式回调出来,需要block参数</div><div class="line">//这里的block没有返回值,(^)表示block类型,block需要参数</div><div class="line">-(void)loadData:(void (^)(NSString *jsonData))callback;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation HttpTool</div><div class="line">-(void)loadData:(void (^)(NSString *jsonData))callback&#123;</div><div class="line">    dispatch_async(dispatch_get_global_queue(0,0)^&#123;</div><div class="line">        NSLog(@&quot;发送网络请求:%@&quot;,[NSThread currentThread]);</div><div class="line">        dispatch_sync(dispatch_get_main_queue(),^&#123;</div><div class="line">            NSLog(@&quot;拿到数据并且进行回调:%@&quot;,[NSThread currentThread]);</div><div class="line">            callback(@&quot;json数据&quot;);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="闭包的使用"><a href="#闭包的使用" class="headerlink" title="闭包的使用"></a>闭包的使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//闭包类型:(参数列表)-&gt;(返回值类型),这里的callback是函数名称</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(callback : <span class="params">(jsondata : String )</span></span></span> -&gt; ())&#123;</div><div class="line">dispatch_async(dispatch_get_global_queue(<span class="number">0</span>,<span class="number">0</span>)&#123;()-&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"发送网络请求\([NSThread currentThread])"</span>);</div><div class="line">    dispatch_sync(dispatch_get_main_queue(),&#123;()-&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"拿到数据并且进行回调\([NSThread currentThread])"</span>);</div><div class="line">        callback(jsondata : <span class="string">"json数据"</span>);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="闭包循环引用的解决"><a href="#闭包循环引用的解决" class="headerlink" title="闭包循环引用的解决"></a>闭包循环引用的解决</h3><p>swift中deinit函数相当于OC中的dealloc方法,当对象被销毁时被调用</p>
<ul>
<li>解决循环引用的方式一:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">weak</span> <span class="keyword">var</span> weakself = <span class="keyword">self</span></div><div class="line">tool.loadData&#123;(jsondata)-&gt;() <span class="keyword">in</span></div><div class="line">    weakself?view.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意:nil的内存地址就是0x0</code></p>
<p>weakself?:</p>
<p>如果前面的可选类型没有值,后面所有的代码都不会执行</p>
<p>如果前面的可选类型有值,系统会自动将weakself解包</p>
<ul>
<li>解决循环引用的方式二:<code>推荐</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tool.loadData&#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (jsondata)-&gt;() <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?view.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>解决循环引用的方式三:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tool.loadData&#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] (jsondata)-&gt;() <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">&#125;</div><div class="line"><span class="comment">//这样写比较危险,这里的self如果为空就会崩溃</span></div><div class="line"><span class="comment">//unowned相当于OC中的__unsafe_unretained</span></div></pre></td></tr></table></figure>
<p><code>注意:</code></p>
<p>__weak修饰的弱引用,如果指向的对象销毁,那么指针会立马指向nil(0x0)</p>
<p>__unsafe_unretained修饰的弱引用,如果指向的对象销毁,那么指针依然指向之前的内存地址,很容易产生”野指针”,坏内存访问</p>
<h3 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h3><p>如果闭包作为方法的最后一个参数,那么闭包可以将()省略掉</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通写法闭包</span></div><div class="line">tool.loadData(&#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (jsondata)-&gt;() <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?view.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//尾随闭包写法一:</span></div><div class="line">tool.loadData&#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (jsondata)-&gt;() <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?view.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">&#125;</div><div class="line"><span class="comment">//尾随闭包写法二:</span></div><div class="line">tool.loadData()&#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (jsondata)-&gt;() <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?view.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Swift中的tableView"><a href="#Swift中的tableView" class="headerlink" title="Swift中的tableView"></a>Swift中的tableView</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> :<span class="title">UIViewController</span></span>&#123;</div><div class="line"><span class="comment">// MARK:- 懒加载tableView</span></div><div class="line"><span class="comment">/// tableView的属性</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> tableView : <span class="type">UITableView</span> = <span class="type">UITableView</span>()&#123;</div><div class="line"><span class="comment">// MARK:- 系统回调的函数</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line"><span class="comment">//初始化界面</span></div><div class="line">setupUI()</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK:- 设置UI界面相关</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span></span>&#123;</div><div class="line"><span class="comment">/// 设置UI界面 </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupUI</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//0.将tableView添加到控制器的View中</span></div><div class="line">view.addSubView(tableView)</div><div class="line"><span class="comment">//1.设置tableView的frame</span></div><div class="line">tableView.frame = view.bounds</div><div class="line"><span class="comment">//2.设置数据源</span></div><div class="line">tableView.dataSource = <span class="keyword">self</span></div><div class="line"><span class="comment">//3.设置代理</span></div><div class="line">tableView.delegate = <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//extension类似于OC中的category,也是只能扩充方法,不能扩充属性</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span> :<span class="title">UITableViewDataSource</span>,<span class="title">UITbaleViewDelegate</span></span>&#123;</div><div class="line"><span class="comment">// MARK:- 数据源和代理方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView : UITableView ,numberOfRowsInSection section :Int)</span></span>-&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">20</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView:UITabelView ,cellForRowAtIndexPath indexPath: NSIndexPath -&gt; UITableViewCell&#123;</span></span></div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Swift中的注释:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK:- 懒加载</span></div><div class="line"><span class="comment">/// tableView的属性</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;申明:本篇博文内容属原创,如需转载请注明出处.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Swift介绍&quot;&gt;&lt;a href=&quot;#Swift介绍&quot; class=&quot;headerlink&quot; title=&quot;Swift介绍&quot;&gt;&lt;/a&gt;Swift介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="swift" scheme="http://Donkey-Tao.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>TFLog:自定义Log</title>
    <link href="http://Donkey-Tao.github.io/2016/03/12/2016-03-12-TFLog:%E8%87%AA%E5%AE%9A%E4%B9%89Log/"/>
    <id>http://Donkey-Tao.github.io/2016/03/12/2016-03-12-TFLog:自定义Log/</id>
    <published>2016-03-12T13:57:23.000Z</published>
    <updated>2017-01-25T07:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>申明:本篇博文内容属原创,如需转载请注明出处.</code></p>
<p>自定义Log的目的是使调试的语句在debug环境下打印,在release环境下不打印;</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.获取打印所在的文件</span></div><div class="line"><span class="keyword">let</span> file = (#file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</div><div class="line"><span class="comment">//2.获取打印所在的方法</span></div><div class="line"><span class="keyword">let</span> funcName = #function</div><div class="line"><span class="comment">//3.获取打印所在行数</span></div><div class="line"><span class="keyword">let</span> lineNumber = #function</div><div class="line">        </div><div class="line"><span class="comment">//封装成一个方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TFLog</span>&lt;T&gt;<span class="params">(message : T,file : String = #file , funcName : String = 			#function ,lineNum : Int =  #line)</span></span>&#123;</div><div class="line">	<span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</div><div class="line">	<span class="built_in">print</span>(<span class="string">"\(fileName):[\(funcName)](\(lineNum))--\(message)"</span>)</div><div class="line">&#125;</div><div class="line"><span class="type">TFLog</span>(message: <span class="string">"TAOFEI"</span>)</div><div class="line"></div><div class="line"><span class="comment">//方法可以不打印</span></div><div class="line"><span class="comment">//封装成一个方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TFLog</span>&lt;T&gt;<span class="params">(message : T,file : String = #file , funcName : String = #function ,lineNum : Int =  #line)</span></span>&#123;</div><div class="line">	<span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</div><div class="line">	<span class="built_in">print</span>(<span class="string">"\(fileName):(\(lineNum))--\(message)"</span>)</div><div class="line">&#125;</div><div class="line"><span class="type">TFLog</span>(message: <span class="string">"TAOFEI"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//注意:这里的#file,#function,#function之前版本是__FILE__,__FUNCTION__,__LINE__.另外这里的T是一个动态类型</span></div></pre></td></tr></table></figure>
<p>这个函数在整个项目中都要用到,这里就要封装成全局函数</p>
<p>任意找一个文件,在这个文件中写中,只要不写在对象函数中就可以,一般新建一个专门的文件在写类似这些功能的函数 ;</p>
<p>Swift中没有宏定义,解决办法:</p>
<p>项目 -&gt;Build Setting -&gt; Swift compiler - Custom Flags (这里搜swift flag) -&gt; 在Other Swift Flags中的Debug中添加 -D DEBUG,然后在封装的代码中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装成一个方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TFLog</span>&lt;T&gt;<span class="params">(message : T,file : String = #file , funcName : String = #function ,lineNum : Int =  #line)</span></span>&#123;</div><div class="line">	#<span class="keyword">if</span> <span class="type">DEBUG</span></div><div class="line">	<span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</div><div class="line">	<span class="built_in">print</span>(<span class="string">"\(fileName):(\(lineNum))--\(message)"</span>)</div><div class="line">	#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;申明:本篇博文内容属原创,如需转载请注明出处.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;自定义Log的目的是使调试的语句在debug环境下打印,在release环境下不打印;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="swift,Log" scheme="http://Donkey-Tao.github.io/categories/swift-Log/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift中的异常处理</title>
    <link href="http://Donkey-Tao.github.io/2016/03/11/2016-03-11-Swift%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>http://Donkey-Tao.github.io/2016/03/11/2016-03-11-Swift中的异常/</id>
    <published>2016-03-11T14:00:39.000Z</published>
    <updated>2017-01-31T02:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>swift中的异常:如果在调用系统某一方法时，该方法最后有throws，说明该方法可能会抛出异常，我们需要对异常进行处理。</p>
<h2 id="swift中提供了三种处理一样的方法"><a href="#swift中提供了三种处理一样的方法" class="headerlink" title="swift中提供了三种处理一样的方法"></a>swift中提供了三种处理一样的方法</h2><ul>
<li>try方式，程序员手动处理异常。（开发中 不常用）</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">	<span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: <span class="type">Data</span>, options: .mutableContainers)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">	<span class="comment">//系统提供临时常量error</span></div><div class="line">	<span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式在开发中用的不多。</p>
<ul>
<li>try? 方式 系统帮助我们处理异常，如果该方法出现了异常，则该方法返回nil；如果没有异常则放回对应的对象。要进行安全校验。<code>常用方式</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> anyObject = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: jsonData <span class="keyword">as</span> <span class="type">Data</span>, options: .mutableContainers) <span class="keyword">else</span>&#123;</div><div class="line">	<span class="type">TFLog</span>(<span class="string">"jsonData转anyObject失败"</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>tyr!方法 直接告诉系统，该方法没有异常。如果该方法出现了异常，那么程序会报错崩溃。（非常危险，不推荐使用）</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> anyObject = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.jsonObject(with: jsonData <span class="keyword">as</span> <span class="type">Data</span>, options: .mutableContainers)</div></pre></td></tr></table></figure>
<h2 id="异常的练习：正则表达式"><a href="#异常的练习：正则表达式" class="headerlink" title="异常的练习：正则表达式"></a>异常的练习：正则表达式</h2><ul>
<li>创建正则表达式的规则</li>
<li>创建正则表达式对象</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.创建正则表达式的规则</span></div><div class="line"><span class="keyword">let</span> pattern = <span class="string">"abc"</span></div><div class="line"></div><div class="line"><span class="comment">//2.创建正则表达式对象</span></div><div class="line"><span class="comment">//方式一：try</span></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">	<span class="keyword">let</span> regex = <span class="type">NSRegularExpression</span>(pattern :pattern, options : .<span class="type">CaseInsensitive</span>)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">	<span class="built_in">print</span>(error)</div><div class="line">&#125;</div><div class="line"><span class="comment">//方式二：try？</span></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">	<span class="keyword">let</span> regex = <span class="keyword">try</span>? <span class="type">NSRegularExpression</span>(pattern :pattern, options : .<span class="type">CaseInsensitive</span>)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">	<span class="built_in">print</span>(error)</div><div class="line">&#125;</div><div class="line"><span class="comment">//方式三：try!</span></div><div class="line"><span class="keyword">let</span> regex = <span class="keyword">try</span>! <span class="type">NSRegularExpression</span>(pattern :pattern, options : .<span class="type">CaseInsensitive</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swift中的异常:如果在调用系统某一方法时，该方法最后有throws，说明该方法可能会抛出异常，我们需要对异常进行处理。&lt;/p&gt;
&lt;h2 id=&quot;swift中提供了三种处理一样的方法&quot;&gt;&lt;a href=&quot;#swift中提供了三种处理一样的方法&quot; class=&quot;header
    
    </summary>
    
      <category term="swift" scheme="http://Donkey-Tao.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Nonnull区域设置(Audited Regions)</title>
    <link href="http://Donkey-Tao.github.io/2015/10/23/2015-10-23-Nonnull%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE(Audited%20Regions)/"/>
    <id>http://Donkey-Tao.github.io/2015/10/23/2015-10-23-Nonnull区域设置(Audited Regions)/</id>
    <published>2015-10-23T14:48:39.000Z</published>
    <updated>2017-03-23T15:02:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nonnull区域设置(Audited Regions)</p>
<p>如果需要每个属性或每个方法都去指定nonnull和nullable，是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏：NS_ASSUME_NONNULL_BEGIN和NS_ASSUME_NONNULL_END。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define NS_ASSUME_NONNULL_BEGIN _Pragma(&quot;clang assume_nonnull begin&quot;)</div><div class="line">#define NS_ASSUME_NONNULL_END   _Pragma(&quot;clang assume_nonnull end&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NS_ASSUME_NONNULL_BEGIN</div><div class="line">@interface TestNullabilityClass () </div><div class="line"> </div><div class="line">@property (nonatomic, copy) NSArray * items; </div><div class="line">- (id)itemWithName:(nullable NSString *)name; </div><div class="line"> </div><div class="line">@end </div><div class="line">NS_ASSUME_NONNULL_END</div></pre></td></tr></table></figure>
<p>在上面的代码中，items属性默认是nonnull的，itemWithName:方法的返回值也是nonnull，而参数是指定为nullable的。</p>
<p>不过，为了安全起见，苹果还制定了几条规则：</p>
<ul>
<li>typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。</li>
<li>复杂的指针类型(如id <em>)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”__nullable id </em> __nonnull”。</li>
<li>我们经常使用的NSError **通常是被假定为一个指向nullable NSError对象的nullable指针。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nonnull区域设置(Audited Regions)&lt;/p&gt;
&lt;p&gt;如果需要每个属性或每个方法都去指定nonnull和nullable，是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏：NS_ASSUME_NONNULL_BEGIN和NS_ASSUME_N
    
    </summary>
    
      <category term="源码阅读,原创,AFNetworking" scheme="http://Donkey-Tao.github.io/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%8E%9F%E5%88%9B-AFNetworking/"/>
    
    
  </entry>
  
  <entry>
    <title>OC项目：模仿百思不得姐项目开发总结</title>
    <link href="http://Donkey-Tao.github.io/2015/03/12/2015-03-12-%E6%A8%A1%E4%BB%BF%E7%99%BE%E6%80%9D%E4%B8%8D%E5%BE%97%E5%A7%90%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://Donkey-Tao.github.io/2015/03/12/2015-03-12-模仿百思不得姐项目开发总结/</id>
    <published>2015-03-12T14:48:39.000Z</published>
    <updated>2016-10-28T08:06:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模仿百思不得姐项目-开发总结"><a href="#模仿百思不得姐项目-开发总结" class="headerlink" title="模仿百思不得姐项目 开发总结"></a>模仿百思不得姐项目 开发总结</h1><p><code>申明:本篇博文内容属原创,如需转载请注明出处.</code></p>
<p>练手项目，由于手贱将电脑版本升级为macOS Sierra导致之前的Mou不能用，清理垃圾文件时不能识别.md结尾的文件，误删了之前的博客与笔记。</p>
<p><code>本篇博文不是完整版，待完成.....囧。</code></p>
<p><img src="/images/CloneAndPuash.png" alt="BaiSiDemo2015"></p>
<hr>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>首先做要准备好项目所需的资源.<br>项目资源与工具:<br>1.IPA文件:图片,图标,声音等资源<br>找到IPA包,用Zip解压,查看包里面的内容就可以找到自己想要的文件(例如:IPA中会有 tabBar,Navigation…)<br>2.利用Charles拦截API接口<br>3.利用Reveal分析UI</p>
<p>首先基本配置,然后搭建基本的骨架<br>项目的实现使用代码+xib实现</p>
<p>TFTabBarController -&gt; 4个子控制器</p>
<hr>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>图片,启动图片,软件名称,目录结构<br>项目目录结构的整理:<br>1.资源文件放到Supporting Files里面<br>2.把图标放到AppIcon.<br>3.设置启动图片删除Launch Screen File中的初始设置,设置Launch images source-&gt;Migrate-&gt;Launchimages,然后将图片放入其中即可.暂时不适用,也可以删除Launchscreen.xib文件.<br>4.改变软件的显示名称,info.plist-&gt; Bundle name -&gt;改成产品名称即:百思不得姐<br>5.整个项目采用代码+xib的形式实现.不适用storyboard,所以可以删除main interface中的main.storyboard的配置,此时没有程序启动时没有可以加载的storyboard,要自己在appdelege中自己创建窗口,设置窗口的根控制器,然后显示窗口即可.</p>
<hr>
<h3 id="配置tabBar-自定义TFTabBarController"><a href="#配置tabBar-自定义TFTabBarController" class="headerlink" title="配置tabBar,自定义TFTabBarController"></a>配置tabBar,自定义TFTabBarController</h3><ul>
<li>UITabBarController设置为根窗口的根控制器,要向UITabBarController中添加子控制器,添加四个字控制器.设置子控制器的tabBarItem.title和tabBarItem.image.</li>
<li>这个项目中UITabBarController不能实现需求,所以在此我们要自定义自己的UITabBarController:TFTabBarController,将添加子控制器等操作封装到自定义的TFTabBarController里面.改变图片的rendering mode,保证图片不会被默认的渲染.设置tabBarItem的文字属性:NSForegroundColorAttributeName.</li>
<li>设置tabBarItem,<code>appearance</code>的使用(后面带有UI_APPEARANCE_SELECTOR的方法都可以通过appearance对象来统一设置).设置UITabBarItem的appearance,通过appearance统一设置所有UITabBarItem的文字属性</li>
<li>tabBarItem的设置要在initialize中设置.</li>
<li>TFTabBarController中添加子控制器的方法的重构,即初始化子控制器方法的封装.</li>
<li>4个子控制器外层包装一个导航控制器</li>
</ul>
<h3 id="自定义tabBar"><a href="#自定义tabBar" class="headerlink" title="自定义tabBar"></a>自定义tabBar</h3><p>按钮当前背景图片的尺寸currentBackgroundImage<br>设置中间按钮的位置要自定义TFTabBar,在TFTabBar的layoutSubviews中设置位置.此时更换tabBar时遇到只读时可以使用KVC实现.<br>在initWithFrame方法中添加中间的按钮,layoutSubviews中设置子控件的位置.</p>
<h3 id="设置导航栏"><a href="#设置导航栏" class="headerlink" title="设置导航栏"></a>设置导航栏</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">self</span>.title=<span class="string">@"我的关注"</span>;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">self</span>.navigationItem.title=<span class="string">@"我的关注"</span>;</div><div class="line"><span class="keyword">self</span>.tabBarItem.title=<span class="string">@"我的关注"</span>;</div></pre></td></tr></table></figure>
<hr>
<h3 id="创建UIBarButtonItem的分类"><a href="#创建UIBarButtonItem的分类" class="headerlink" title="创建UIBarButtonItem的分类"></a>创建UIBarButtonItem的分类</h3><p>写个类方法快速返回一个对象,封装UIBarButtonItem的创建.</p>
<h3 id="导航栏左边的返回按钮的统一设置"><a href="#导航栏左边的返回按钮的统一设置" class="headerlink" title="导航栏左边的返回按钮的统一设置"></a>导航栏左边的返回按钮的统一设置</h3><p>自定义导航控制器,拦截导航控制器的push方法.自定义导航控制器:TFNavigationController,重写pushViewController方法(调用super),在此方法中设置返回按钮的样式. 在这个方法中拦截所有push进来的控制器,push进入其他控制器时隐藏tabBar.[UINavigationBar appearance]方法的调用要放在initialize方法中.</p>
<h3 id="关注模块"><a href="#关注模块" class="headerlink" title="关注模块"></a>关注模块</h3><p>采用XIB的方式实现.设置Xib的file’s owner.</p>
<h4 id="推荐关注的实现"><a href="#推荐关注的实现" class="headerlink" title="推荐关注的实现"></a>推荐关注的实现</h4><p>用到SVProgressHUD,AFNetworking,SDWebImage<br>TFRecommandViewController用两个tableView实现,<br>自定义cell的setSelected方法要自己控制,出现什么样的结果可以在此方法中实现.左边的tableView显示推荐关注的内容的分类,右边的tableView显示左边tableView选中的tableView中的具体的cell分类的内容.<br>其中要解决的三个问题:<br>1.点击左边的cell重复发送请求,请求右边tableView的数据,造成用户流量的浪费.</p>
<ul>
<li>如果右边曾经没有数据发送请求,如果有数据刷新表格直接显示.一个类别对应一个数据,在类别数据模型中加入一个可变的数组,用懒加载.解决问题1,把分类的右边的用户数据加到类别模型的数据中这样问题就很容易解决.<br>2.网络慢的情况的解决.<br>赶紧刷新右边表格数据(如果没有数据,刷新出的表格会是空的),以免显示旧的数据给用户造成假象<br>3.只能显示1页数据<br>添加网络请求参数,在底部添加一个footerView,此时回出现表格公用footerView的情况,要来回切换状态.<br>设置header,footer,以及header,footer中的方法实现网络数据的请求.下一页数据的请求要多下一页参数,这个数据要存在类别的数据模型中.这个项目的服务器返回的数据有问题,</li>
<li>每次刷新右边的数据时都控制右边的footer的显示或者隐藏</li>
<li>在block中控制刷新控件是否结束刷新状态</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**这个类别对应的用户数据*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)   <span class="built_in">NSMutableArray</span> *users;</div></pre></td></tr></table></figure>
<p>不同的网路请求进入block中时会出现很多复杂的情况,处理办法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//处理不需要的请求,不是最后一次请求</span></div><div class="line"><span class="keyword">if</span>(_params!=params) <span class="keyword">return</span>;</div></pre></td></tr></table></figure>
<p><code>特别注意退出控制器之前,要阻止请求回来,AFN发送的请求要用请求管理者(所有的请求都是他来管理)[]self.manager.operationQueue cancelAllOperations]</code></p>
<p>####分页的两种实现方法<br>1.传页码<br>2.传ID(最后面的ID)</p>
<h3 id="磨刀不误砍材工"><a href="#磨刀不误砍材工" class="headerlink" title="磨刀不误砍材工"></a>磨刀不误砍材工</h3><p>1.该项目的类前缀:TF<br>2.项目目录的整理:采用MVC模式<br>3.PCH文件,项目名称,分类的导入</p>
<ul>
<li>Prefix header -&gt; 设置路径</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模仿百思不得姐项目-开发总结&quot;&gt;&lt;a href=&quot;#模仿百思不得姐项目-开发总结&quot; class=&quot;headerlink&quot; title=&quot;模仿百思不得姐项目 开发总结&quot;&gt;&lt;/a&gt;模仿百思不得姐项目 开发总结&lt;/h1&gt;&lt;p&gt;&lt;code&gt;申明:本篇博文内容属原创,如需转
    
    </summary>
    
      <category term="iOS,原创" scheme="http://Donkey-Tao.github.io/categories/iOS-%E5%8E%9F%E5%88%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>OC中内存管理的总结</title>
    <link href="http://Donkey-Tao.github.io/2014/04/11/2014-04-11-OC%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://Donkey-Tao.github.io/2014/04/11/2014-04-11-OC中内存管理的总结/</id>
    <published>2014-04-11T15:57:48.000Z</published>
    <updated>2016-10-20T21:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OC中内存管理的总结"><a href="#OC中内存管理的总结" class="headerlink" title="OC中内存管理的总结"></a>OC中内存管理的总结</h3><p>想必用过iPhone,Android的很多用户都会感觉iPhone在使用过程中相对比较流畅,想必一般的Android手机基本不会出现卡顿的现象,让用户有很好的用户体验.究其原因当然有很多,在此我简单总结下iOS开发中的关于内存管理的一些知识,就当开发过程中的学习笔记咯.</p>
<hr>
<h4 id="OC中内存管理的本质"><a href="#OC中内存管理的本质" class="headerlink" title="OC中内存管理的本质"></a>OC中内存管理的本质</h4><p>iOS开发中,OC中的内存管理实际上主要指的是对OC对象的占用内存的管理.<br>那么问题来了,为什么要管理OC对象的内存呢?这就要涉及OC程序中的内存划分,这里要考虑内存的堆内存部分与栈内存部分.<br>栈内存部分中的内存是用系统管理的的,而堆内存部分的内存是要自己管理(干预)的,OC的对象都是存放在堆内存中.所以需要我们自己管理.<br>OC对象是占用堆内存的.什么时候分配内存,什么时候回收内存是我们要考虑的问题.<br>而OC对象内存的分配与回收的实际上可以等价于OC对象自动引用计数的管理.通过对OC对象的自动引用计数的加减实现对象内存的分配与回收.当一个OC对象的自动引用计数变为0,此时这个对象就会被系统回收.所以,我们要实现对OC对象的内存管理就是要实现对OC对象的自动引用计数的控制.</p>
<hr>
<h4 id="在MRC时代"><a href="#在MRC时代" class="headerlink" title="在MRC时代"></a>在MRC时代</h4><h5 id="内存管理的管理范围"><a href="#内存管理的管理范围" class="headerlink" title="内存管理的管理范围"></a>内存管理的管理范围</h5><ul>
<li>任何继承了NSObject的对象(OC对象存放于堆里面)</li>
<li>对其他非对象类型无效(int,char,float,double,struct,enum等),因为非OC对象一般放在栈里面(栈内存会被系统自动回收)</li>
</ul>
<hr>
<h5 id="系统是如何判断什么时候需要回收一个对象所占用的内存"><a href="#系统是如何判断什么时候需要回收一个对象所占用的内存" class="headerlink" title="系统是如何判断什么时候需要回收一个对象所占用的内存?"></a>系统是如何判断什么时候需要回收一个对象所占用的内存?</h5><p>根据对象的引用计数器.那么什么是引用计数呢?每个OC对象都有自己的引用计数器,它是一个整数,从字面上, 可以理解为”对象被引用的次数”,也可以理解为: 它表示有多少人正在用这个对象.每个OC对象内部都有4个字节的存储空间来存放引用计数器.<br>简单来说, 可以理解为: 引用计数器表示有多少人正在使用这个对象.当没有任何人使用这个对象时, 系统才会回收这个对象, 也就是说当对象的引用计数器为0时,  对象占用的内存就会被系统回收;如果对象的计数器不为0，那么在整个程序运行过程，它占用的内存就不可能被回收(除非整个程序已经退出).<br>任何一个对象, 刚生下来的时候, 引用计数器都为1,当使用alloc、new或者copy创建一个对象时，对象的引用计数器默认就是1.</p>
<hr>
<h5 id="引用计数器的操作"><a href="#引用计数器的操作" class="headerlink" title="引用计数器的操作"></a>引用计数器的操作</h5><p>要想管理对象占用的内存, 就得学会操作对象的引用计数器<br>引用计数器的常见操作:</p>
<ul>
<li>给对象发送一条retain消息, 可以使引用计数器值+1（retain方法返回对象本身)</li>
<li>给对象发送一条release消息, 可以使引用计数器值-1</li>
<li>给对象发送retainCount消息, 可以获得当前的引用计数器值<br>需要注意的是: release并不代表销毁\回收对象, 仅仅是计数器-1</li>
</ul>
<hr>
<h5 id="dealloc方法"><a href="#dealloc方法" class="headerlink" title="dealloc方法"></a>dealloc方法</h5><p>那么怎样验证一个OC对象是否被销毁了呢?<br>当一个对象的引用计数器值为0时,这个对象即将被销毁，其占用的内存被系统回收,系统会自动给对象发送一条dealloc消息.(因此, 从dealloc方法有没有被调用, 就可以判断出对象是否被销毁)</p>
<hr>
<h5 id="dealloc方法的重写"><a href="#dealloc方法的重写" class="headerlink" title="dealloc方法的重写"></a>dealloc方法的重写</h5><ul>
<li>一般会重写dealloc方法, 在这里释放相关资源, dealloc就是对象的遗言</li>
<li>一旦重写了dealloc方法, 就必须调用[super dealloc],并且放在最后面调用</li>
<li>使用注意:不能直接调用dealloc方法,一旦对象被回收了, 它占用的内存就不再可用, 坚持使用会导致程序崩溃（野指针错误） </li>
</ul>
<hr>
<h5 id="野指针-空指针"><a href="#野指针-空指针" class="headerlink" title="野指针/空指针"></a>野指针/空指针</h5><ul>
<li>僵尸对象:已经被销毁的对象(不能再使用的对象)</li>
<li>野指针:指向僵尸对象(不可用内存)的指针,给野指针发消息会报EXC_BAD_ACCESS错误.</li>
<li>空指针:没有指向存储空间的指针(里面存的是nil, 也就是0),给空指针发消息是没有任何反应的</li>
<li>为了避免野指针错误的常见办法,在对象被销毁之后, 将指向对象的指针变为空指针</li>
</ul>
<hr>
<h5 id="关闭ARC功能"><a href="#关闭ARC功能" class="headerlink" title="关闭ARC功能"></a>关闭ARC功能</h5><p>Xcode4.2开始出现ARC,要回到MRC来自己管理对象的内存问题时要关闭项目ARC功能.<br>关闭ARC步骤如下: Build Settings -&gt;Automatic Reference Counting(search)-&gt; No</p>
<h5 id="开启僵尸对象监控"><a href="#开启僵尸对象监控" class="headerlink" title="开启僵尸对象监控"></a>开启僵尸对象监控</h5><p>监听僵尸对象-&gt;默认不监听-&gt; Edit schemes-&gt;diagnostics-&gt;enable zombie objects</p>
<hr>
<h5 id="内存管理原则"><a href="#内存管理原则" class="headerlink" title="内存管理原则"></a>内存管理原则</h5><p>苹果官方规定的内存管理原则:</p>
<ul>
<li>谁创建谁release : 如果你通过alloc、new或[mutable]copy来创建一个对象，那么你必须调用release或autorelease</li>
<li>谁retain谁release :只要你调用了retain，就必须调用一次release</li>
<li>总结一下就是:有加就有减,曾经让对象的计数器+1，就必须在最后让对象计数器-1.</li>
</ul>
<hr>
<h5 id="set方法的内存管理"><a href="#set方法的内存管理" class="headerlink" title="set方法的内存管理"></a>set方法的内存管理</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setHouse:(House *)house&#123;</div><div class="line">  <span class="keyword">if</span> (house != _house)&#123;</div><div class="line">    <span class="comment">// 对当前正在使用的房子（旧房子）做一次release        </span></div><div class="line">    [_house release];                </div><div class="line">    <span class="comment">// 对新房子做一次retain操作        	  </span></div><div class="line">    _house = [house <span class="keyword">retain</span>];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="dealloc方法的内存管理"><a href="#dealloc方法的内存管理" class="headerlink" title="dealloc方法的内存管理"></a>dealloc方法的内存管理</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)dealloc&#123;    </div><div class="line">  <span class="comment">// 当人不在了，代表不用房子了    	</span></div><div class="line">  <span class="comment">// 对房子做一次release操作    </span></div><div class="line">  [_house release];     </div><div class="line">  [<span class="keyword">super</span> dealloc];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h5 id="property参数"><a href="#property参数" class="headerlink" title="@property参数"></a>@property参数</h5><h6 id="控制set方法的内存管理"><a href="#控制set方法的内存管理" class="headerlink" title="控制set方法的内存管理:"></a>控制set方法的内存管理:</h6><ul>
<li>retain ： release旧值，retain新值（用于OC对象）</li>
<li>assign ： 直接赋值，不做任何内存管理(默认，用于非OC对象类型)</li>
<li>copy   ： release旧值，copy新值(一般用于NSString *)</li>
</ul>
<h6 id="控制需不需生成set方法"><a href="#控制需不需生成set方法" class="headerlink" title="控制需不需生成set方法:"></a>控制需不需生成set方法:</h6><ul>
<li>readwrite:同时生成set方法和get方法(默认)</li>
<li>readonly:只会生成get方法</li>
</ul>
<h6 id="多线程管理"><a href="#多线程管理" class="headerlink" title="多线程管理:"></a>多线程管理:</h6><ul>
<li>atomic:性能低(默认)</li>
<li>nonatomic:性能高</li>
</ul>
<h6 id="控制set方法和get方法的名称"><a href="#控制set方法和get方法的名称" class="headerlink" title="控制set方法和get方法的名称:"></a>控制set方法和get方法的名称:</h6><ul>
<li>setter ： 设置set方法的名称，一定有个冒号:</li>
<li>getter ： 设置get方法的名称</li>
</ul>
<hr>
<h5 id="class"><a href="#class" class="headerlink" title="@class"></a>@class</h5><p>作用:可以简单地引用一个类.仅仅是告诉编译器有这样一个类,而不真正包含这个类中的所有的内容<br>具体使用:在.h文件中使用@class引用一个类,在.m文件中使用#import包含这个类的.h文件</p>
<hr>
<h5 id="class和-import"><a href="#class和-import" class="headerlink" title="@class和#import"></a>@class和#import</h5><p>作用上的区别:import会包含引用类的所有信息(内容),包括引用类的变量和方法,@class仅仅是告诉编译器有这么一个类,具体这个类里有什么信息,完全不知<br>效率上的区别:如果有上百个头文件都#import了同一个文件,或者这些文件依次被#import,那么一旦最开始的头文件稍有改动,后面引用到这个文件的所有类都需要重新编译一遍,编译效率非常低.相对来讲,使用@class方式就不会出现这种问题了<br>@class可以解决循环依赖的问题</p>
<hr>
<h5 id="循环retian"><a href="#循环retian" class="headerlink" title="循环retian"></a>循环retian</h5><p>循环retain的场景:比如A对象retain了B对象，B对象retain了A对象<br>循环retain的弊端:这样会导致A对象和B对象永远无法释放<br>循环retain的解决方案:当两端互相引用时，应该一端用retain、一端用assign</p>
<hr>
<h5 id="autorelease"><a href="#autorelease" class="headerlink" title="autorelease"></a>autorelease</h5><h6 id="autorelease方法的基本作用"><a href="#autorelease方法的基本作用" class="headerlink" title="autorelease方法的基本作用:"></a>autorelease方法的基本作用:</h6><ul>
<li>给对象发送一条autorelease消息, 会将对象放到一个自动释放池中</li>
<li>当自动释放池被销毁时，会对池子里面的所有对象做一次release操作</li>
<li>会返回对象本身</li>
<li>调用完autorelease方法后，对象的计数器不变</li>
</ul>
<h6 id="autorelease的好处"><a href="#autorelease的好处" class="headerlink" title="autorelease的好处:"></a>autorelease的好处:</h6><ul>
<li>不用再关心对象释放的时间</li>
<li>不用再关心什么时候调用release</li>
</ul>
<h6 id="autorelease的使用注意"><a href="#autorelease的使用注意" class="headerlink" title="autorelease的使用注意:"></a>autorelease的使用注意:</h6><ul>
<li>占用内存较大的对象不要随便使用autorelease</li>
<li>占用内存较小的对象使用autorelease，没有太大影响</li>
</ul>
<hr>
<h5 id="自动释放池"><a href="#自动释放池" class="headerlink" title="自动释放池"></a>自动释放池</h5><p>在iOS程序运行过程中,会创建无数个池子.这些池子都是以栈结构存在（先进后出).当一个对象调用autorelease方法时,会将这个对象放到栈顶的释放池</p>
<h5 id="autorelease的应用场合"><a href="#autorelease的应用场合" class="headerlink" title="autorelease的应用场合"></a>autorelease的应用场合</h5><p>一般可以为类添加一个快速创建对象的类方法<br>一般来说,除了alloc、new或copy之外的方法创建的对象都被声明了autorelease,不需要再release</p>
<hr>
<h4 id="在ARC时代"><a href="#在ARC时代" class="headerlink" title="在ARC时代"></a>在ARC时代</h4><p>ARC: Automatic Reference Counting(自动引用计数),Xcode4.2开始出现<br>从iOS 5.0开始ARC<br>ARC是编译器特性,而不是运行时特性<br>ARC不是像Java中的垃圾回收,有着本质的区别<br>ARC的优点<br>基本上可以避免内存泄漏,有时更快<br>默认情况下都是强指针,ARC中没有任何强指针指向时就会被销毁<br>ARC跟计数器关系不大,<br><strong>weak,弱指针指向对象被释放,弱指针会自动变成空指针而不是野指针
</strong>strong,默认情况下所有指针都是强指针,要注意循环引用的问题<br>@property中多strong,weak两个参数</p>
<hr>
<h5 id="MRC项目转ARC项目"><a href="#MRC项目转ARC项目" class="headerlink" title="MRC项目转ARC项目"></a>MRC项目转ARC项目</h5><p>Xcode –&gt; Edit –&gt; Refactor –&gt;Convert to Objective-C ARC… –&gt;Convert to Automatic Reference Counting  –&gt;next<br>以前MRC中的retain全部变为strong,release在ARC中全部消失<br>关闭ARC Build Settings -&gt;search(Automatic Reference Counting)-&gt;No</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;OC中内存管理的总结&quot;&gt;&lt;a href=&quot;#OC中内存管理的总结&quot; class=&quot;headerlink&quot; title=&quot;OC中内存管理的总结&quot;&gt;&lt;/a&gt;OC中内存管理的总结&lt;/h3&gt;&lt;p&gt;想必用过iPhone,Android的很多用户都会感觉iPhone在使用过程
    
    </summary>
    
      <category term="iOS" scheme="http://Donkey-Tao.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Block和Protocol</title>
    <link href="http://Donkey-Tao.github.io/2014/01/01/2014-01-01-Block%E5%92%8CProtocol/"/>
    <id>http://Donkey-Tao.github.io/2014/01/01/2014-01-01-Block和Protocol/</id>
    <published>2014-01-01T01:13:32.000Z</published>
    <updated>2017-01-31T08:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="block的基本使用"><a href="#block的基本使用" class="headerlink" title="block的基本使用"></a>block的基本使用</h2><p>什么是block?<br>Block是iOS中比较特殊的<code>数据类型</code>.Block是苹果官方特别推荐使用的数据类型,应用场景比较广泛.</p>
<p>应用场景:</p>
<ul>
<li>动画</li>
<li>多线程</li>
<li>集合遍历</li>
<li>网络请求回调</li>
</ul>
<p>Block的作用:<br><code>用来保存一段代码</code>,可以在恰当的时间再取出来调用.<br>功能与函数或者方法比较类似.</p>
<p>函数与Block的区别:<br>函数不能在程序运行的过程中定义代码,函数是一开始的时候就已经写死的.block也是用来保存代码.<br>Block保存代码:把代码放到大括号中,在大括号的左大括号前面加上一个<code>^</code>标志是一个Block(这^的目的是说明后面的代码段要交给block存储),在大括号的右边大括号后面加上分号表示这个数据类型定义结束.以上这些相当于int a=10;中的数值10;<br>定义简单的Block变量(block跟函数很像,有返回值,有参数):<br>没有返回值时在前面写void,把变量名括起来,前面加个^,这样就代表block类型的变量名.logDonkeyTao是这个block的变量名,logDonkeyTao的变量中就存储了大括号中的代码.</p>
<ul>
<li>void:代表是返回值类型</li>
<li>(^logDonkeyTao):代表block的变量名</li>
<li>():代表block的参数<br>block跟函数很像,只是在前面加一个^,然后在外面加一对括号.</li>
</ul>
<p>block的调用:logDonkeyTao();</p>
<p>区别:block可以在函数里面定义也可以在外面定义,更加灵活.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="keyword">void</span> (^logDonkeyTao)()^&#123;</div><div class="line"></div><div class="line">		TFLog(<span class="string">@"------------"</span>);</div><div class="line"></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"Donkey-Tao"</span>);</div><div class="line"></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"------------"</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个block,存储一段代码,这段代码的功能是可以打印任意行数的*</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">void</span> (^logDonkeyTao)(<span class="keyword">int</span>)=^(<span class="keyword">int</span> numberOfLines)&#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numberOfLines;i++)&#123;</div><div class="line"></div><div class="line">		TFLog(<span class="string">@"------------"</span>);</div><div class="line"></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"Donkey-Tao"</span>);</div><div class="line"></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"------------"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用block:</p>
<p>定义一个block计算两个整数的和<br>先写block:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//定义有返回值有参数的block</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> (^sumBlock)(<span class="keyword">int</span>,<span class="keyword">int</span>)=^(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> num1+num2;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c=sumBlock(<span class="number">10</span>,<span class="number">9</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span>(^doubleBlock)(<span class="keyword">int</span>);</div><div class="line"></div><div class="line">doubleBlock=^(<span class="keyword">int</span> num)&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">2</span>*num;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> d=doubleBlock(<span class="number">18</span>);</div></pre></td></tr></table></figure>
<h2 id="block和typedef"><a href="#block和typedef" class="headerlink" title="block和typedef"></a>block和typedef</h2><p>typedef exisiting new;<br>typedef int Myint;</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//定义一个block来计算2个整数的差</span></div><div class="line"><span class="keyword">int</span> (^minusBlock)(<span class="keyword">int</span>,<span class="keyword">int</span>)=^(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> num1-num2;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义一个block来计算2个整数的积</span></div><div class="line"><span class="keyword">int</span> (^multiBlock)(<span class="keyword">int</span>,<span class="keyword">int</span>)=^(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> num1*num2;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//定义一个叫做MyBlock的数据类型,它存储的代码必须返回int,必须接受2个int类型的参数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>(^MyBlock)(<span class="keyword">int</span>,<span class="keyword">int</span>);</div><div class="line"></div><div class="line">MyBlock minusBlock=^(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> num1-num2;  </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="03-Block03-使用场景"><a href="#03-Block03-使用场景" class="headerlink" title="03-Block03-使用场景"></a>03-Block03-使用场景</h2><p>严谨:调用block之前一定要判断block是否为空</p>
<h2 id="04-Block04-使用注意"><a href="#04-Block04-使用注意" class="headerlink" title="04-Block04-使用注意"></a>04-Block04-使用注意</h2><p>1.默认情况下,block里面是能够访问外面的内容的,block里面不能修改外面的数值.<br>2.要想修改外面的值,__block int b=10;这样就可以修改外面的变量的值.</p>
<h2 id="05-Protocol01-基本使用"><a href="#05-Protocol01-基本使用" class="headerlink" title="05-Protocol01-基本使用"></a>05-Protocol01-基本使用</h2><p>protocol翻译过来就是”协议”,协议文件中只有方法的声明.可以把多个类共有的方法抽取出来,用一个协议来表示.一个类可以遵循多份协议.一个协议也可以遵守协议.</p>
<p>协议与父类不同,使用协议可以少一个类,使用继承时多一个</p>
<p>protocol的作用:</p>
<ul>
<li>用来声明一些方法</li>
</ul>
<p>protocol的其他使用,</p>
<p>协议中的关键字</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;block的基本使用&quot;&gt;&lt;a href=&quot;#block的基本使用&quot; class=&quot;headerlink&quot; title=&quot;block的基本使用&quot;&gt;&lt;/a&gt;block的基本使用&lt;/h2&gt;&lt;p&gt;什么是block?&lt;br&gt;Block是iOS中比较特殊的&lt;code&gt;数据类型
    
    </summary>
    
      <category term="iOS" scheme="http://Donkey-Tao.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>读鸟哥Linux私房菜笔记</title>
    <link href="http://Donkey-Tao.github.io/2013/10/16/2013-10-16-%E8%AF%BB%E9%B8%9F%E5%93%A5Linux%E7%A7%81%E6%88%BF%E8%8F%9C/"/>
    <id>http://Donkey-Tao.github.io/2013/10/16/2013-10-16-读鸟哥Linux私房菜/</id>
    <published>2013-10-16T14:29:39.000Z</published>
    <updated>2017-01-30T02:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读鸟哥Linux私房菜笔记"><a href="#读鸟哥Linux私房菜笔记" class="headerlink" title="读鸟哥Linux私房菜笔记"></a>读鸟哥Linux私房菜笔记</h1><h2 id="Linux的简介"><a href="#Linux的简介" class="headerlink" title="Linux的简介"></a>Linux的简介</h2><h3 id="什么是Linux？"><a href="#什么是Linux？" class="headerlink" title="什么是Linux？"></a>什么是Linux？</h3><p>核心(Kernel)是<code>操作系统最底层</code>的东西，他管理所有硬件资源的工作状态，每个操作系统都有自己的核心。</p>
<p>Windows是针对x86架构的硬件设计的，所以只能在x86的个人计算机上运行，Linux由于是Open Source的操作系统，所以他可以被修改成适合在各种机器上面运行的，这也就是说Linux具有可移植性；</p>
<h3 id="Kernel要管理的事项"><a href="#Kernel要管理的事项" class="headerlink" title="Kernel要管理的事项"></a>Kernel要管理的事项</h3><ul>
<li>系统呼叫接口(System call interface):方便developer与Kernel的交流；</li>
<li>进程管理(Process control):多任务时Kernel要对让CPU资源得到合理的分配；</li>
<li>内存管理(Memory management):Kernel实现对运行内存的管理；</li>
<li>文件管理(File system management):Kernel要对文件进行管理;</li>
</ul>
<h3 id="Linux的发展历程"><a href="#Linux的发展历程" class="headerlink" title="Linux的发展历程"></a>Linux的发展历程</h3><p>Linux之前，Unix的历史（语言:Assembler-&gt;B-&gt;C）(Open source)</p>
<p>Unix：BSD(Berkeley),FreeBSD,System V(AT&amp;T),AIX(IBM),DEC(HP)</p>
<p>Minix-Unix Like：完成过程中完全没有看Unix核心源码</p>
<p>兼容分时系统( Compatible Time-Sharing System, CTSS )(MIT)(1960)    </p>
<p>操作系统的发展历程：</p>
<p>Multics(Bell,MIT,GE)(1965-1969) -&gt;File server system(Ken Thompson)(1969,Assembler)(1969) -&gt;Unics(Ken Thompson)(1969) -&gt; Unix(Dennis Ritchie)(1973) -&gt;BSD:Berkeley Software Distribution(Berkeley)(Bill Joy)(1977) -&gt;FreeBSD(X86) -&gt;1979 Version -&gt;Minix:Unix Like(Andrew Tanenbaum)(1984) -&gt;GNU Plan(Richard Mathew Stallman)(1984)(Compiler GNU C:gcc) -&gt;FSF(Free Software Foundation)(Richard Mathew Stallman) -&gt;GCC And GNU C Library -&gt;GPL(General Public License)(Copyleft)(1985) -&gt;X Window System(1984) -&gt;XFree86(X Window +Free + x86)(1988) -&gt;Linux(Linus Torvalds)(1994,Verion 1.0)</p>
<h3 id="Linux-Distribution"><a href="#Linux-Distribution" class="headerlink" title="Linux Distribution"></a>Linux Distribution</h3><p>Linux Distribution : Red Hat,Fedora,Mandriva,<code>Debian</code>,Novell SuSE,Slackware,Linpus,Gentoo,Ubuntu,<code>Centos</code></p>
<p>Linux Distribution = Kernel + Kernel Tools + Free Software + Documentations +可以完整安装的程序</p>
<p>POSIX是一种标准规范，</p>
<h3 id="Linux产生以及发展过程中产生的神器"><a href="#Linux产生以及发展过程中产生的神器" class="headerlink" title="Linux产生以及发展过程中产生的神器"></a>Linux产生以及发展过程中产生的神器</h3><p>编译器:Emac(Editor)-&gt;GNU C:gcc(Compiler) </p>
<p>GNU开发的几个重要软件：</p>
<ul>
<li>Emacs</li>
<li>GNU C (GCC)</li>
<li>GNU C Library (glibc)</li>
<li>Bash shell</li>
</ul>
<p>这些软件都是跑在有专利的Unix系统上的，GNU:GNU’s Not Unix</p>
<h3 id="Free-software"><a href="#Free-software" class="headerlink" title="Free software"></a>Free software</h3><p>目前软件:Free software,Freeware,Shareware</p>
<p>自由软件是Open source的，但是Open source的软件不一定就是自由软件；</p>
<h2 id="如何学习Linux"><a href="#如何学习Linux" class="headerlink" title="如何学习Linux"></a>如何学习Linux</h2><h3 id="Linux的应用"><a href="#Linux的应用" class="headerlink" title="Linux的应用"></a>Linux的应用</h3><ul>
<li>网络服务器：www,Mail Server,FTP Server ,etc.</li>
<li>工作站计算机：不提供Internet服务</li>
<li>桌面型计算机：上网浏览，文书处理，办公，收发电子邮件</li>
</ul>
<h3 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h3><p>作为CSer当然要玩一玩Command Line咯；</p>
<p>各硬件装置在Linux下的代号</p>
<ul>
<li>IDE 硬盘机 /dev/hd[a-d]</li>
<li>SCSI 硬盘机 /dev/sd[a-p]</li>
<li>USB 随身碟 /dev/sd[a-p]与SCSI硬盘一样</li>
<li>CDROM /dev/cdrom</li>
<li>软盘机 /dev/fd[0-1]</li>
<li>打印机 /dev/lp[0-2]</li>
<li>鼠标 /dev/mouse</li>
</ul>
<p>相关缩写：</p>
<ul>
<li>NAT: Network Address Translation </li>
<li>SAMBA: </li>
<li>DHCP: Dynamic Host Configuration Protocol</li>
</ul>
<hr>
<p>未完，待续~</p>
<p>​<br>​<br>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读鸟哥Linux私房菜笔记&quot;&gt;&lt;a href=&quot;#读鸟哥Linux私房菜笔记&quot; class=&quot;headerlink&quot; title=&quot;读鸟哥Linux私房菜笔记&quot;&gt;&lt;/a&gt;读鸟哥Linux私房菜笔记&lt;/h1&gt;&lt;h2 id=&quot;Linux的简介&quot;&gt;&lt;a href=&quot;#L
    
    </summary>
    
      <category term="读书" scheme="http://Donkey-Tao.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>算法：最短路径</title>
    <link href="http://Donkey-Tao.github.io/2013/03/05/2013-03-05-%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <id>http://Donkey-Tao.github.io/2013/03/05/2013-03-05-算法：最短路径/</id>
    <published>2013-03-05T00:45:21.000Z</published>
    <updated>2017-01-31T08:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>声明:本文为博主原创,如需转载请注明出处.</code></p>
<p><code>本文中的算法用C语言进行了实现。</code></p>
<p>简介：</p>
<p>最短路径问题：给你n个点，m条无向边，每条边都有长度d和花费p，给你起点s终点t，要求输出起点到终点的最短距离及其花费，如果最短距离有多条路线，则输出花费最少的。</p>
<p>要求：</p>
<p>输入：输入n,m，点的编号是1~n,然后是m行，每行4个数 a,b,d,p，表示a和b之间有一条边，且其长度为d，花费为p。最后一行是两个数 s,t;起点s，终点。n和m为0时输入结束。</p>
<p>源代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> max 65536</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> distance;</div><div class="line">	<span class="keyword">int</span> cost;</div><div class="line">&#125;EDG;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="keyword">int</span> e;</div><div class="line">	<span class="keyword">int</span> vexs[MAX_VERTEX_NUM];</div><div class="line">	EDG edges[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</div><div class="line">&#125;MGraph;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shortpat_FLOYED</span><span class="params">(MGraph *mg)</span></span>;</div><div class="line"><span class="function">MGraph *<span class="title">creat_MGraph</span><span class="params">()</span></span>;<span class="comment">//建立邻接矩阵</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> m,n;</div><div class="line">	MGraph *mg;</div><div class="line">	mg=creat_MGraph();<span class="comment">//建立邻接矩阵</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入要求的两个顶点的序号："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</div><div class="line">	shortpat_FLOYED(mg);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"顶点%d与顶点%d的最短路径的距离：%d花费为：%d\n"</span>,m,n,mg-&gt;edges[m][n].distance,mg-&gt;edges[m][n].cost);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"程序结束\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shortpat_FLOYED</span><span class="params">(MGraph *mg)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j,k;</div><div class="line">	<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=mg-&gt;n;k++)</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)</div><div class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mg-&gt;n;j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(mg-&gt;edges[i][k].distance+mg-&gt;edges[k][j].distance&lt;mg-&gt;edges[i][j].distance)</div><div class="line">				&#123;</div><div class="line">					mg-&gt;edges[i][j].distance=mg-&gt;edges[i][k].distance+mg-&gt;edges[k][j].distance;</div><div class="line">					mg-&gt;edges[i][j].cost=mg-&gt;edges[i][k].cost+mg-&gt;edges[k][j].cost;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(mg-&gt;edges[i][k].distance+mg-&gt;edges[k][j].distance==mg-&gt;edges[i][j].distance)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(mg-&gt;edges[i][k].cost+mg-&gt;edges[k][j].cost&lt;mg-&gt;edges[i][j].cost)</div><div class="line">						</div><div class="line">						mg-&gt;edges[i][j].cost=mg-&gt;edges[i][k].cost+mg-&gt;edges[k][j].cost;</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> </div><div class="line">					;<span class="comment">//空语句</span></div><div class="line">			&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">MGraph *<span class="title">creat_MGraph</span><span class="params">()</span><span class="comment">//建立邻接矩阵</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j,k,n,e,d,c;</div><div class="line">	MGraph *mg=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MGraph));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入顶点的个数："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入边的条数："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e);</div><div class="line">	mg-&gt;n=n;</div><div class="line">	mg-&gt;e=e;</div><div class="line">	getchar();</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">		&#123;</div><div class="line">			mg-&gt;edges[i][j].distance=max;<span class="comment">//初始化邻接矩阵表示的所有边</span></div><div class="line">			mg-&gt;edges[i][j].cost=max;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"请输入边的信息:\n"</span>);</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=e;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;j,&amp;k,&amp;d,&amp;c);</div><div class="line">			mg-&gt;edges[j][k].distance=d;</div><div class="line">			mg-&gt;edges[j][k].cost=c;</div><div class="line">			mg-&gt;edges[k][j].distance=d;</div><div class="line">			mg-&gt;edges[k][j].cost=c;<span class="comment">//标记存在的边</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> mg;<span class="comment">//返回邻接矩阵的首地址</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;声明:本文为博主原创,如需转载请注明出处.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;本文中的算法用C语言进行了实现。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;p&gt;最短路径问题：给你n个点，m条无向边，每条边都有长度d和花费p，给你起点s终点t，要求输出起点
    
    </summary>
    
      <category term="算法" scheme="http://Donkey-Tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>算法：欧拉回路</title>
    <link href="http://Donkey-Tao.github.io/2013/02/26/2013-02-26-%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    <id>http://Donkey-Tao.github.io/2013/02/26/2013-02-26-欧拉回路/</id>
    <published>2013-02-26T15:00:39.000Z</published>
    <updated>2017-01-31T08:16:13.000Z</updated>
    
    <content type="html"><![CDATA[<p> <code>声明:本文为博主原创,如需转载请注明出处.</code></p>
<p><code>本文中的算法用C语言进行了实现。</code></p>
<p>简介：</p>
<p>欧拉回路是指不令笔离开纸面，可画过图中每条边仅一次，且可以回到起点的一条回路。现给定一个图，问是否存在欧拉回路？</p>
<p>要求：输入：测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是节点数N ( 1 &lt; N &lt; 1000 )和边数M；随后的M行对应M条边，每行给出一对正整数，分别是该条边直接连通的两个节点的编号（节点从1到N编号）。当N为0时输入结束。 输出：每个测试用例的输出占一行，若欧拉回路存在则输出1，否则输出0。</p>
<h2 id="问题分析和任务定义"><a href="#问题分析和任务定义" class="headerlink" title="问题分析和任务定义"></a>问题分析和任务定义</h2><p>题目要求判断一个给定的图中是否存在欧拉回路。由欧拉图的定义，当一个图存在欧拉回路时，该图称为欧拉图。题目问是否存在欧拉回路即等价于问给定的图是否为欧拉图。所以，证明给定图是欧拉图就说明该图存在欧拉回路，否则不存在欧拉回路。根据高等教育出版社出版屈婉玲、耿素云、张立昂主编的《离散数学》P.296定理15.1可知：无向图G是欧拉图当且仅当G是连通图且没有奇度顶点。要证明一个给定的图是否为欧拉图，证明给定的图是连通图且没有奇度顶点即可。所以，解决题目中的问题就转化为证明给定图是否是连通图且没有奇度顶点。</p>
<p>首先要确定一给定的图是否为连通图。这里我们可以通过图的深度优先搜索遍历确定。从任意顶点出发，如果能深度优先遍历到所有的顶点就说明图中所有的顶点都是连图的即为连通图。</p>
<p>然后再确定给定的图是否没有奇度顶点。我们可以以邻接矩阵的形式存储给定的图，对邻接矩阵的每行分别行进行扫描，记录每个顶点的度数，当每行扫描完后判断该顶点的度数是否为奇数，存在奇度顶点直接结束扫描，说明存在奇度顶点，给定图不是欧拉图。即不存在欧拉回路。否则继续扫描，当扫描完所有的行没有发现奇度顶点，即说明给定图没有奇度顶点。</p>
<p>当上述两个问题都确定以后根据定理，当且仅当给定图为连通图且没有奇度顶点时给定的图为欧拉图。由此可确定，给定的图是否存在欧拉回路。</p>
<h2 id="数据结构的选择与概要设计"><a href="#数据结构的选择与概要设计" class="headerlink" title="数据结构的选择与概要设计"></a>数据结构的选择与概要设计</h2><h3 id="数据结构的选择"><a href="#数据结构的选择" class="headerlink" title="数据结构的选择"></a>数据结构的选择</h3><p>图在我们所学的数据结构与算法课程中有四种存储方式：邻接矩阵、邻接表、十字链表和邻接多重表。本问题比较简单，选用邻接矩阵或邻接矩阵就足够了。在本课程设计中需要判断是否有奇度顶点和是否为连通图，用用邻接表和邻接矩阵在时间繁杂度没有什么大的差别，在空间复杂度上，因为本题是无向图，如果如果用邻接表，储存一条边要储存两次，存储指针比int型的空间消耗大，在图不是很大的情况下，邻接矩阵的空间复杂度要小。同时选用邻接矩阵很容易得到图中个顶点的度数。因为顶点只要求编号这一信息，所以就没有用结构体存储顶点信息，图用邻接矩阵要用结构体存储。结构体定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n;<span class="comment">//顶点个数</span></div><div class="line">	<span class="keyword">int</span> e;<span class="comment">//边的条数</span></div><div class="line">	<span class="keyword">int</span> vexs[MAX_VERTEX_NUM];<span class="comment">//一维数组储存顶点</span></div><div class="line">	<span class="keyword">int</span> edges[MAX_VERTEX_NUM][MAX_VERTEX_NUM];<span class="comment">//二维数组储存边</span></div><div class="line">&#125;MGraph;<span class="comment">//图</span></div></pre></td></tr></table></figure>
<h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><p>首先将图转换为邻接矩阵存储起来，然后邻接矩阵的每一行进行搜索得图中到每个顶点的度数，如果有奇度顶点，输出：不存在欧拉回路，即可结束程序。否则继续判断给定的图是否为连通图，如果是连通图输出：存在欧拉回路；否则输出：不存在欧拉回路。结束程序。</p>
<h3 id="详细设计和编码"><a href="#详细设计和编码" class="headerlink" title="详细设计和编码"></a>详细设计和编码</h3><h4 id="将图转化为邻接矩阵存储"><a href="#将图转化为邻接矩阵存储" class="headerlink" title="将图转化为邻接矩阵存储"></a>将图转化为邻接矩阵存储</h4><p>先输入图中顶点个个数和边的条数，对所有可能存在的边初始化为0，再依次输入边的信息，即如果顶点1,2存在相连的边，输入1 2 （1,2为自动给顶点分配的编码）。将边1,2的信息改为1。用函数 MGraph<br>*creat_MGraph();完成，返回邻接矩阵的首地址即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function">MGraph *<span class="title">creat_MGraph</span><span class="params">()</span><span class="comment">//建立邻接矩阵</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j,k,n,e;</div><div class="line">	MGraph *mg=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MGraph));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入顶点的个数："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入边的条数："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e);</div><div class="line">	mg-&gt;n=n;</div><div class="line">	mg-&gt;e=e;</div><div class="line">	getchar();</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">			mg-&gt;edges[i][j]=<span class="number">0</span>;<span class="comment">//初始化邻接矩阵表示的所有边</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"请输入边的信息:\n"</span>);</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=e;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</div><div class="line">			mg-&gt;edges[j][k]=<span class="number">1</span>;mg-&gt;edges[k][j]=<span class="number">1</span>;<span class="comment">//标记存在的边</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> mg;<span class="comment">//返回邻接矩阵的首地址</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="搜索有没有奇度顶点"><a href="#搜索有没有奇度顶点" class="headerlink" title="搜索有没有奇度顶点"></a>搜索有没有奇度顶点</h4><p>对邻接矩阵的每一行进行搜索，用num记录顶点的度数（每次对新的顶点记录前都将num置为0）。为了排除顶点自身环对判断的影响，当遇到边的两顶点相同，忽略不计，这样不会对结果产生影响。如果搜索到奇度顶点则结束int Euleriancycle(MGraph *mg);函数，返回0，搜索完成且没有发现奇度顶点则返回1.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euleriancycle</span><span class="params">(MGraph *mg)</span><span class="comment">//判断是否存在欧拉回路</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j,num;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)<span class="comment">//从第一个顶点开始，判断顶点的度数</span></div><div class="line">	&#123;</div><div class="line">		num=<span class="number">0</span>;<span class="comment">//初始化每个顶点的度数为0</span></div><div class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mg-&gt;n;j++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>((mg-&gt;edges[i][j]!=<span class="number">0</span>)&amp;&amp;(i!=j))<span class="comment">//如果顶点i到j的边存在度数加1</span></div><div class="line">				num=num+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">1</span>)<span class="comment">//如果有哪个顶点的度数为奇数，直接退出循环，返回0</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;	</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//当所有的顶点都判断完成还没有退出本函数说明所有顶点度数均为偶数，返回1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断给定的图是否为连通图"><a href="#判断给定的图是否为连通图" class="headerlink" title="判断给定的图是否为连通图"></a>判断给定的图是否为连通图</h4><p>本程序的深度优先遍历是一个递归的过程。其中visited[MAX_VERTEX_NUM]是一个辅助的全局变量，初始值均为0.表示该顶点没有被访问。访问后用1表示。在深度优先搜索时。我们需要调用dfs_trave()函数。在dfs_trave()中，针对每个没有被访问过的顶点调用dfs()函数，它是一个递归函数，完成从该顶点开始的深度优先搜索。如果图是一个连通图，那么完成对visited数组的初始化后，在dfs_trave()中只需调用dfs()函数一次即可完成对图的遍历。当图不是一个连通图时，则在dfs_trave()中需要针对每个连通分量分别调用dfs()函数。根据dfs()函数被调用的次数就可以判断给定的图是否为连通图。如果dfs()函数被调用一次则给定的图是连通图，否则不是连通图。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">dfs_trave</span><span class="params">(MGraph *mg)</span><span class="comment">//深度优先搜索遍历</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,m=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)<span class="comment">//将辅助变量全部初始化为0，表明顶点没有被访问过</span></div><div class="line">		visited[i]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)</div><div class="line">		<span class="keyword">if</span>(visited[i]==<span class="number">0</span>)<span class="comment">//对没有访问过的顶点，调用深度优先搜索函数</span></div><div class="line">		&#123;</div><div class="line">			dfs(mg,i);<span class="comment">//深度优先搜索</span></div><div class="line">			m=m+<span class="number">1</span>;<span class="comment">//如果是非连通图，要调用1次以上，m用来记录调用dfs函数的次数</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> m;<span class="comment">//返回调用dfs函数的次数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(MGraph *mg,<span class="keyword">int</span> i)</span><span class="comment">//深度优先搜索</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	visited[i]=<span class="number">1</span>;<span class="comment">//访问该顶点</span></div><div class="line">	<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mg-&gt;n;j++)</div><div class="line">		<span class="keyword">if</span>((visited[j]==<span class="number">0</span>)&amp;&amp;(mg-&gt;edges[i][j]==<span class="number">1</span>))<span class="comment">//当顶点没有被访问过并且两顶点存在边</span></div><div class="line">			dfs(mg,j);<span class="comment">//对该顶点深度优先搜索</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="根据上述2-3可知"><a href="#根据上述2-3可知" class="headerlink" title="根据上述2,3可知"></a>根据上述2,3可知</h4><p>必须为连通图且没有奇度顶点才是欧拉图即存在欧拉回路</p>
<h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/FlowChartOfEulerianPath.png" alt="欧拉回路流程图"></p>
<h2 id="调试过程中遇到的问题"><a href="#调试过程中遇到的问题" class="headerlink" title="调试过程中遇到的问题"></a>调试过程中遇到的问题</h2><p>本次实验中也遇到了一些小问题，通过在适当的位置加一些printf语句即可确定出现问题的语句大概的位置。加以分析、修改即可。</p>
<p>在本次课程设计的第三组数据的测试时出现了不存在欧拉图的错误结果，仔细分析可知，在（2,2）邻接矩阵的对角线上，所以该点的度数在计算的时候就少1度。所以，在if((mg-&gt;edges[i][j]!=0)&amp;&amp;(i!=j))//如果顶点i到j的边存在度数加1 的判断中增加了一个判断，当该点存在环，则在度数的计数时忽略不计，这样不会印象该点度数奇偶性的变化。这样就很好的解决了，存在环对判断结果的印象的问题。</p>
<p>通过本次课程设计让我更加深刻的体会到调试程序需要平心静气，仔细分析、研究。要有一个严谨的态度，这样才能高效率的写出优质的代码。</p>
<h2 id="测试结果与分析"><a href="#测试结果与分析" class="headerlink" title="测试结果与分析"></a>测试结果与分析</h2><h3 id="测试数据的选择"><a href="#测试数据的选择" class="headerlink" title="测试数据的选择"></a>测试数据的选择</h3><p>在测试中考虑到多种情况使用了多组数据，分别根据是否为连通图、是否没有奇度顶点设计了一下四组数据。第一组数据为连通图且没有奇度顶点，第二组数据为连通图且有奇度顶点，第三组数据为连通图、没有奇度顶点且有环，第四组数据为非连通图且有奇度顶点，第五组数据为非连通图且没有奇度顶点。</p>
<p>每组数据进行多次测试。</p>
<h4 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h4><p>测试数据1：</p>
<p>3</p>
<p>3</p>
<p>1 2</p>
<p>1 3</p>
<p>2 3</p>
<p>测试结果：</p>
<p><img src="/images/EulerianPathTest1.png" alt="测试结果1"></p>
<p>结果分析：测试数据表示一个3个顶点，3条边的图，顶点两两相连，存在欧拉回路。测试结果正确。</p>
<p><img src="/images/EulerianPathAnanysis1.png" alt="结果分析1"></p>
<h4 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h4><p>测试数据2：</p>
<p>3</p>
<p>3</p>
<p>3 2</p>
<p>1 2</p>
<p>2 3</p>
<p>测试结果：</p>
<p><img src="/images/EulerianPathTest2.png" alt="测试结果2"></p>
<p>结果分析：测试数据表示一个3个顶点，3条边的图，1,、2相连，2、3相连，不存在欧拉回路。测试结果正确。</p>
<p><img src="/images/EulerianPathAnanysis2.png" alt="结果分析2"></p>
<h4 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h4><p>测试数据:3：</p>
<p>4</p>
<p>5</p>
<p>1 2</p>
<p>1 3</p>
<p>2 4</p>
<p>3 4</p>
<p>2 2</p>
<p>测试结果：</p>
<p><img src="/images/EulerianPathTest3.png" alt="测试结果3"></p>
<p>结果分析：测试数据表示一个4个顶点，5条边的图，1、2相连，1、3相连,2、4相连,3、4相连，2、2相连。存在欧拉回路。测试结果正确。</p>
<p><img src="/images/EulerianPathAnanysis3.png" alt="结果分析3"></p>
<h4 id="测试4"><a href="#测试4" class="headerlink" title="测试4"></a>测试4</h4><p>测试数据4：</p>
<p>5</p>
<p>4</p>
<p>1 2</p>
<p>3 4 </p>
<p>4 5</p>
<p>3 5</p>
<p>测试结果：</p>
<p><img src="/images/EulerianPathTest4.png" alt="测试结果4"></p>
<p>结果分析：测试数据表示一个5个顶点，4条边的图，1、2相连，3、4相连,4、5相连,3、5相连。不存在欧拉回路。测试结果正确。</p>
<p><img src="/images/EulerianPathAnanysis4.png" alt="结果分析4"></p>
<h4 id="测试5"><a href="#测试5" class="headerlink" title="测试5"></a>测试5</h4><p>测试数据5：</p>
<p>6</p>
<p>6</p>
<p>1 2 </p>
<p>1 3</p>
<p>2 3</p>
<p>4 5</p>
<p>4 6</p>
<p>5 6</p>
<p>测试结果：</p>
<p><img src="/images/EulerianPathTest5.png" alt="测试结果5"></p>
<p>结果分析：测试数据表示一个6个顶点，6条边的图，1、2相连，1、3相连,2、3相连,4、5相连，4、6相连，5、6相连。不存在欧拉回路。测试结果正确。</p>
<p><img src="/images/EulerianPathAnanysis5.png" alt="结果分析5"></p>
<h3 id="测试结果总结"><a href="#测试结果总结" class="headerlink" title="测试结果总结"></a>测试结果总结</h3><p>通过对多种情况设计了多组数据多次测试如上，结果都得到了真确的结论。说明程序符合题目的要求，达到了实验的目的。</p>
<h2 id="用户使用说明"><a href="#用户使用说明" class="headerlink" title="用户使用说明"></a>用户使用说明</h2><p>首先本程序中的所有顶点编号为1-N的整数。(0&lt;N&lt;1000)</p>
<p>先输入图顶点的个数要求为一个正整数n，然后输入图所有边的条数要求为正整数e，再图边数行整形数，每行两个数（用空格相隔）表示一条边所连接的两个顶点编号。输出结果即为题目的解。</p>
<h2 id="附录源代码"><a href="#附录源代码" class="headerlink" title="附录源代码"></a>附录源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 1000<span class="comment">//顶点的最大个数</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n;<span class="comment">//顶点个数</span></div><div class="line">	<span class="keyword">int</span> e;<span class="comment">//边的条数</span></div><div class="line">	<span class="keyword">int</span> vexs[MAX_VERTEX_NUM];<span class="comment">//一维数组储存顶点</span></div><div class="line">	<span class="keyword">int</span> edges[MAX_VERTEX_NUM][MAX_VERTEX_NUM];<span class="comment">//二维数组储存边</span></div><div class="line">&#125;MGraph;<span class="comment">//图</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> visited[MAX_VERTEX_NUM];<span class="comment">//全局变量。在对顶点进行深度优先搜索遍历时的辅助变量数组</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euleriancycle</span><span class="params">(MGraph *mg)</span></span>;<span class="comment">//判断顶点的度数是否全为偶数，有奇数时输出0，全为偶数时输出1</span></div><div class="line"><span class="function">MGraph *<span class="title">creat_MGraph</span><span class="params">()</span></span>;<span class="comment">//将图转化为邻接矩阵储存起来，返回邻接矩阵的首地址</span></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">dfs_trave</span><span class="params">(MGraph *mg)</span></span>;<span class="comment">//深度优先搜索遍历</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(MGraph *mg,<span class="keyword">int</span> i)</span></span>;<span class="comment">//深度优先搜索</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> num,m;<span class="comment">//num用来接收顶点度数判断的结果，m用来接收图是否为连通图的结果</span></div><div class="line">	MGraph *mg;</div><div class="line">	mg=creat_MGraph();<span class="comment">//建立邻接矩阵</span></div><div class="line">	num=Euleriancycle(mg);<span class="comment">//判断顶点的度数是否全为偶数。全为偶数时num=1；否则num=0</span></div><div class="line">	<span class="keyword">if</span>(num!=<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"不存在欧拉图！\n"</span>);</div><div class="line">	getchar();</div><div class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	m=dfs_trave(mg);<span class="comment">//判断图是否为连通图</span></div><div class="line">	<span class="keyword">if</span>(m!=<span class="number">1</span>)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"不存在欧拉图！\n"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"存在欧拉图！\n"</span>);</div><div class="line">	getch();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">MGraph *<span class="title">creat_MGraph</span><span class="params">()</span><span class="comment">//建立邻接矩阵</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j,k,n,e;</div><div class="line">	MGraph *mg=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MGraph));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入顶点的个数："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入边的条数："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e);</div><div class="line">	mg-&gt;n=n;</div><div class="line">	mg-&gt;e=e;</div><div class="line">	getchar();</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">			mg-&gt;edges[i][j]=<span class="number">0</span>;<span class="comment">//初始化邻接矩阵表示的所有边</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"请输入边的信息:\n"</span>);</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=e;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;j,&amp;k);</div><div class="line">			mg-&gt;edges[j][k]=<span class="number">1</span>;mg-&gt;edges[k][j]=<span class="number">1</span>;<span class="comment">//标记存在的边</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> mg;<span class="comment">//返回邻接矩阵的首地址</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euleriancycle</span><span class="params">(MGraph *mg)</span><span class="comment">//判断是否存在欧拉回路</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j,num;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)<span class="comment">//从第一个顶点开始，判断顶点的度数</span></div><div class="line">	&#123;</div><div class="line">		num=<span class="number">0</span>;<span class="comment">//初始化每个顶点的度数为0</span></div><div class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mg-&gt;n;j++)</div><div class="line">		&#123;</div><div class="line">			If((mg-&gt;edges[i][j]!=<span class="number">0</span>)&amp;&amp;(i!=j))<span class="comment">//如果顶点i到j的边存在度数加1</span></div><div class="line">				num=num+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">1</span>)<span class="comment">//如果有哪个顶点的度数为奇数，直接退出循环，返回0</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;	</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//当所有的顶点都判断完成还没有退出本函数说明所有顶点度数均为偶数，返回1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">dfs_trave</span><span class="params">(MGraph *mg)</span><span class="comment">//深度优先搜索遍历</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,m=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)<span class="comment">//将辅助变量全部初始化为0，表明顶点没有被访问过</span></div><div class="line">		visited[i]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mg-&gt;n;i++)</div><div class="line">		<span class="keyword">if</span>(visited[i]==<span class="number">0</span>)<span class="comment">//对没有访问过的顶点，调用深度优先搜索函数</span></div><div class="line">		&#123;</div><div class="line">			dfs(mg,i);<span class="comment">//深度优先搜索</span></div><div class="line">			m=m+<span class="number">1</span>;<span class="comment">//如果是非连通图，要调用1次以上，m用来记录调用dfs函数的次数</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> m;<span class="comment">//返回调用dfs函数的次数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(MGraph *mg,<span class="keyword">int</span> i)</span><span class="comment">//深度优先搜索</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	visited[i]=<span class="number">1</span>;<span class="comment">//访问该顶点</span></div><div class="line">	<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mg-&gt;n;j++)</div><div class="line">		<span class="keyword">if</span>((visited[j]==<span class="number">0</span>)&amp;&amp;(mg-&gt;edges[i][j]==<span class="number">1</span>))<span class="comment">//当顶点没有被访问过并且两顶点存在边</span></div><div class="line">			dfs(mg,j);<span class="comment">//对该顶点深度优先搜索</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;声明:本文为博主原创,如需转载请注明出处.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;本文中的算法用C语言进行了实现。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;p&gt;欧拉回路是指不令笔离开纸面，可画过图中每条边仅一次，且可以回到起点的一条回路。现给定一个图，
    
    </summary>
    
      <category term="算法" scheme="http://Donkey-Tao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
